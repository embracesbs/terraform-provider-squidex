/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"time"
)

// BackupJobDtoAllOf struct for BackupJobDtoAllOf
type BackupJobDtoAllOf struct {
	// The id of the backup job.
	Id *string `json:"id,omitempty"`
	// The time when the job has been started.
	Started *time.Time `json:"started,omitempty"`
	// The time when the job has been stopped.
	Stopped NullableTime `json:"stopped,omitempty"`
	// The number of handled events.
	HandledEvents *int32 `json:"handledEvents,omitempty"`
	// The number of handled assets.
	HandledAssets *int32 `json:"handledAssets,omitempty"`
	Status *JobStatus `json:"status,omitempty"`
}

// NewBackupJobDtoAllOf instantiates a new BackupJobDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupJobDtoAllOf() *BackupJobDtoAllOf {
	this := BackupJobDtoAllOf{}
	return &this
}

// NewBackupJobDtoAllOfWithDefaults instantiates a new BackupJobDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupJobDtoAllOfWithDefaults() *BackupJobDtoAllOf {
	this := BackupJobDtoAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BackupJobDtoAllOf) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobDtoAllOf) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BackupJobDtoAllOf) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BackupJobDtoAllOf) SetId(v string) {
	o.Id = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *BackupJobDtoAllOf) GetStarted() time.Time {
	if o == nil || isNil(o.Started) {
		var ret time.Time
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobDtoAllOf) GetStartedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Started) {
    return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *BackupJobDtoAllOf) HasStarted() bool {
	if o != nil && !isNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given time.Time and assigns it to the Started field.
func (o *BackupJobDtoAllOf) SetStarted(v time.Time) {
	o.Started = &v
}

// GetStopped returns the Stopped field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupJobDtoAllOf) GetStopped() time.Time {
	if o == nil || isNil(o.Stopped.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Stopped.Get()
}

// GetStoppedOk returns a tuple with the Stopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupJobDtoAllOf) GetStoppedOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.Stopped.Get(), o.Stopped.IsSet()
}

// HasStopped returns a boolean if a field has been set.
func (o *BackupJobDtoAllOf) HasStopped() bool {
	if o != nil && o.Stopped.IsSet() {
		return true
	}

	return false
}

// SetStopped gets a reference to the given NullableTime and assigns it to the Stopped field.
func (o *BackupJobDtoAllOf) SetStopped(v time.Time) {
	o.Stopped.Set(&v)
}
// SetStoppedNil sets the value for Stopped to be an explicit nil
func (o *BackupJobDtoAllOf) SetStoppedNil() {
	o.Stopped.Set(nil)
}

// UnsetStopped ensures that no value is present for Stopped, not even an explicit nil
func (o *BackupJobDtoAllOf) UnsetStopped() {
	o.Stopped.Unset()
}

// GetHandledEvents returns the HandledEvents field value if set, zero value otherwise.
func (o *BackupJobDtoAllOf) GetHandledEvents() int32 {
	if o == nil || isNil(o.HandledEvents) {
		var ret int32
		return ret
	}
	return *o.HandledEvents
}

// GetHandledEventsOk returns a tuple with the HandledEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobDtoAllOf) GetHandledEventsOk() (*int32, bool) {
	if o == nil || isNil(o.HandledEvents) {
    return nil, false
	}
	return o.HandledEvents, true
}

// HasHandledEvents returns a boolean if a field has been set.
func (o *BackupJobDtoAllOf) HasHandledEvents() bool {
	if o != nil && !isNil(o.HandledEvents) {
		return true
	}

	return false
}

// SetHandledEvents gets a reference to the given int32 and assigns it to the HandledEvents field.
func (o *BackupJobDtoAllOf) SetHandledEvents(v int32) {
	o.HandledEvents = &v
}

// GetHandledAssets returns the HandledAssets field value if set, zero value otherwise.
func (o *BackupJobDtoAllOf) GetHandledAssets() int32 {
	if o == nil || isNil(o.HandledAssets) {
		var ret int32
		return ret
	}
	return *o.HandledAssets
}

// GetHandledAssetsOk returns a tuple with the HandledAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobDtoAllOf) GetHandledAssetsOk() (*int32, bool) {
	if o == nil || isNil(o.HandledAssets) {
    return nil, false
	}
	return o.HandledAssets, true
}

// HasHandledAssets returns a boolean if a field has been set.
func (o *BackupJobDtoAllOf) HasHandledAssets() bool {
	if o != nil && !isNil(o.HandledAssets) {
		return true
	}

	return false
}

// SetHandledAssets gets a reference to the given int32 and assigns it to the HandledAssets field.
func (o *BackupJobDtoAllOf) SetHandledAssets(v int32) {
	o.HandledAssets = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BackupJobDtoAllOf) GetStatus() JobStatus {
	if o == nil || isNil(o.Status) {
		var ret JobStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobDtoAllOf) GetStatusOk() (*JobStatus, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BackupJobDtoAllOf) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given JobStatus and assigns it to the Status field.
func (o *BackupJobDtoAllOf) SetStatus(v JobStatus) {
	o.Status = &v
}

func (o BackupJobDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if o.Stopped.IsSet() {
		toSerialize["stopped"] = o.Stopped.Get()
	}
	if !isNil(o.HandledEvents) {
		toSerialize["handledEvents"] = o.HandledEvents
	}
	if !isNil(o.HandledAssets) {
		toSerialize["handledAssets"] = o.HandledAssets
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBackupJobDtoAllOf struct {
	value *BackupJobDtoAllOf
	isSet bool
}

func (v NullableBackupJobDtoAllOf) Get() *BackupJobDtoAllOf {
	return v.value
}

func (v *NullableBackupJobDtoAllOf) Set(val *BackupJobDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupJobDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupJobDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupJobDtoAllOf(val *BackupJobDtoAllOf) *NullableBackupJobDtoAllOf {
	return &NullableBackupJobDtoAllOf{value: val, isSet: true}
}

func (v NullableBackupJobDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupJobDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


