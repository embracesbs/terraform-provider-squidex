/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ComponentFieldPropertiesDto struct for ComponentFieldPropertiesDto
type ComponentFieldPropertiesDto struct {
	FieldPropertiesDto
	// The id of the embedded schemas.
	SchemaIds []string `json:"schemaIds,omitempty"`
}

// NewComponentFieldPropertiesDto instantiates a new ComponentFieldPropertiesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentFieldPropertiesDto(fieldType string) *ComponentFieldPropertiesDto {
	this := ComponentFieldPropertiesDto{}
	this.FieldType = fieldType
	return &this
}

// NewComponentFieldPropertiesDtoWithDefaults instantiates a new ComponentFieldPropertiesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentFieldPropertiesDtoWithDefaults() *ComponentFieldPropertiesDto {
	this := ComponentFieldPropertiesDto{}
	return &this
}

// GetSchemaIds returns the SchemaIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentFieldPropertiesDto) GetSchemaIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SchemaIds
}

// GetSchemaIdsOk returns a tuple with the SchemaIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentFieldPropertiesDto) GetSchemaIdsOk() ([]string, bool) {
	if o == nil || isNil(o.SchemaIds) {
    return nil, false
	}
	return o.SchemaIds, true
}

// HasSchemaIds returns a boolean if a field has been set.
func (o *ComponentFieldPropertiesDto) HasSchemaIds() bool {
	if o != nil && isNil(o.SchemaIds) {
		return true
	}

	return false
}

// SetSchemaIds gets a reference to the given []string and assigns it to the SchemaIds field.
func (o *ComponentFieldPropertiesDto) SetSchemaIds(v []string) {
	o.SchemaIds = v
}

func (o ComponentFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedFieldPropertiesDto, errFieldPropertiesDto := json.Marshal(o.FieldPropertiesDto)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	errFieldPropertiesDto = json.Unmarshal([]byte(serializedFieldPropertiesDto), &toSerialize)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	if o.SchemaIds != nil {
		toSerialize["schemaIds"] = o.SchemaIds
	}
	return json.Marshal(toSerialize)
}

type NullableComponentFieldPropertiesDto struct {
	value *ComponentFieldPropertiesDto
	isSet bool
}

func (v NullableComponentFieldPropertiesDto) Get() *ComponentFieldPropertiesDto {
	return v.value
}

func (v *NullableComponentFieldPropertiesDto) Set(val *ComponentFieldPropertiesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentFieldPropertiesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentFieldPropertiesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentFieldPropertiesDto(val *ComponentFieldPropertiesDto) *NullableComponentFieldPropertiesDto {
	return &NullableComponentFieldPropertiesDto{value: val, isSet: true}
}

func (v NullableComponentFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentFieldPropertiesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


