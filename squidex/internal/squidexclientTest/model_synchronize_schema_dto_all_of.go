/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// SynchronizeSchemaDtoAllOf struct for SynchronizeSchemaDtoAllOf
type SynchronizeSchemaDtoAllOf struct {
	// True, when fields should not be deleted.
	NoFieldDeletion *bool `json:"noFieldDeletion,omitempty"`
	// True, when fields with different types should not be recreated.
	NoFieldRecreation *bool `json:"noFieldRecreation,omitempty"`
}

// NewSynchronizeSchemaDtoAllOf instantiates a new SynchronizeSchemaDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSynchronizeSchemaDtoAllOf() *SynchronizeSchemaDtoAllOf {
	this := SynchronizeSchemaDtoAllOf{}
	return &this
}

// NewSynchronizeSchemaDtoAllOfWithDefaults instantiates a new SynchronizeSchemaDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSynchronizeSchemaDtoAllOfWithDefaults() *SynchronizeSchemaDtoAllOf {
	this := SynchronizeSchemaDtoAllOf{}
	return &this
}

// GetNoFieldDeletion returns the NoFieldDeletion field value if set, zero value otherwise.
func (o *SynchronizeSchemaDtoAllOf) GetNoFieldDeletion() bool {
	if o == nil || isNil(o.NoFieldDeletion) {
		var ret bool
		return ret
	}
	return *o.NoFieldDeletion
}

// GetNoFieldDeletionOk returns a tuple with the NoFieldDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SynchronizeSchemaDtoAllOf) GetNoFieldDeletionOk() (*bool, bool) {
	if o == nil || isNil(o.NoFieldDeletion) {
    return nil, false
	}
	return o.NoFieldDeletion, true
}

// HasNoFieldDeletion returns a boolean if a field has been set.
func (o *SynchronizeSchemaDtoAllOf) HasNoFieldDeletion() bool {
	if o != nil && !isNil(o.NoFieldDeletion) {
		return true
	}

	return false
}

// SetNoFieldDeletion gets a reference to the given bool and assigns it to the NoFieldDeletion field.
func (o *SynchronizeSchemaDtoAllOf) SetNoFieldDeletion(v bool) {
	o.NoFieldDeletion = &v
}

// GetNoFieldRecreation returns the NoFieldRecreation field value if set, zero value otherwise.
func (o *SynchronizeSchemaDtoAllOf) GetNoFieldRecreation() bool {
	if o == nil || isNil(o.NoFieldRecreation) {
		var ret bool
		return ret
	}
	return *o.NoFieldRecreation
}

// GetNoFieldRecreationOk returns a tuple with the NoFieldRecreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SynchronizeSchemaDtoAllOf) GetNoFieldRecreationOk() (*bool, bool) {
	if o == nil || isNil(o.NoFieldRecreation) {
    return nil, false
	}
	return o.NoFieldRecreation, true
}

// HasNoFieldRecreation returns a boolean if a field has been set.
func (o *SynchronizeSchemaDtoAllOf) HasNoFieldRecreation() bool {
	if o != nil && !isNil(o.NoFieldRecreation) {
		return true
	}

	return false
}

// SetNoFieldRecreation gets a reference to the given bool and assigns it to the NoFieldRecreation field.
func (o *SynchronizeSchemaDtoAllOf) SetNoFieldRecreation(v bool) {
	o.NoFieldRecreation = &v
}

func (o SynchronizeSchemaDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NoFieldDeletion) {
		toSerialize["noFieldDeletion"] = o.NoFieldDeletion
	}
	if !isNil(o.NoFieldRecreation) {
		toSerialize["noFieldRecreation"] = o.NoFieldRecreation
	}
	return json.Marshal(toSerialize)
}

type NullableSynchronizeSchemaDtoAllOf struct {
	value *SynchronizeSchemaDtoAllOf
	isSet bool
}

func (v NullableSynchronizeSchemaDtoAllOf) Get() *SynchronizeSchemaDtoAllOf {
	return v.value
}

func (v *NullableSynchronizeSchemaDtoAllOf) Set(val *SynchronizeSchemaDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSynchronizeSchemaDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSynchronizeSchemaDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSynchronizeSchemaDtoAllOf(val *SynchronizeSchemaDtoAllOf) *NullableSynchronizeSchemaDtoAllOf {
	return &NullableSynchronizeSchemaDtoAllOf{value: val, isSet: true}
}

func (v NullableSynchronizeSchemaDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSynchronizeSchemaDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


