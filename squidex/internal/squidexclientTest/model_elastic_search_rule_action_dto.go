/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ElasticSearchRuleActionDto struct for ElasticSearchRuleActionDto
type ElasticSearchRuleActionDto struct {
	RuleAction
	// The url to the elastic search instance or cluster.
	Host string `json:"host"`
	// The name of the index.
	IndexName string `json:"indexName"`
	// The optional username.
	Username NullableString `json:"username,omitempty"`
	// The optional password.
	Password NullableString `json:"password,omitempty"`
	// The optional custom document.
	Document NullableString `json:"document,omitempty"`
	// The condition when to delete the document.
	Delete NullableString `json:"delete,omitempty"`
}

// NewElasticSearchRuleActionDto instantiates a new ElasticSearchRuleActionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElasticSearchRuleActionDto(host string, indexName string, actionType NullableString) *ElasticSearchRuleActionDto {
	this := ElasticSearchRuleActionDto{}
	this.ActionType = actionType
	this.Host = host
	this.IndexName = indexName
	return &this
}

// NewElasticSearchRuleActionDtoWithDefaults instantiates a new ElasticSearchRuleActionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElasticSearchRuleActionDtoWithDefaults() *ElasticSearchRuleActionDto {
	this := ElasticSearchRuleActionDto{}
	return &this
}

// GetHost returns the Host field value
func (o *ElasticSearchRuleActionDto) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *ElasticSearchRuleActionDto) GetHostOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *ElasticSearchRuleActionDto) SetHost(v string) {
	o.Host = v
}

// GetIndexName returns the IndexName field value
func (o *ElasticSearchRuleActionDto) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *ElasticSearchRuleActionDto) GetIndexNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *ElasticSearchRuleActionDto) SetIndexName(v string) {
	o.IndexName = v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElasticSearchRuleActionDto) GetUsername() string {
	if o == nil || isNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElasticSearchRuleActionDto) GetUsernameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *ElasticSearchRuleActionDto) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *ElasticSearchRuleActionDto) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *ElasticSearchRuleActionDto) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *ElasticSearchRuleActionDto) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElasticSearchRuleActionDto) GetPassword() string {
	if o == nil || isNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElasticSearchRuleActionDto) GetPasswordOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *ElasticSearchRuleActionDto) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *ElasticSearchRuleActionDto) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *ElasticSearchRuleActionDto) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *ElasticSearchRuleActionDto) UnsetPassword() {
	o.Password.Unset()
}

// GetDocument returns the Document field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElasticSearchRuleActionDto) GetDocument() string {
	if o == nil || isNil(o.Document.Get()) {
		var ret string
		return ret
	}
	return *o.Document.Get()
}

// GetDocumentOk returns a tuple with the Document field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElasticSearchRuleActionDto) GetDocumentOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Document.Get(), o.Document.IsSet()
}

// HasDocument returns a boolean if a field has been set.
func (o *ElasticSearchRuleActionDto) HasDocument() bool {
	if o != nil && o.Document.IsSet() {
		return true
	}

	return false
}

// SetDocument gets a reference to the given NullableString and assigns it to the Document field.
func (o *ElasticSearchRuleActionDto) SetDocument(v string) {
	o.Document.Set(&v)
}
// SetDocumentNil sets the value for Document to be an explicit nil
func (o *ElasticSearchRuleActionDto) SetDocumentNil() {
	o.Document.Set(nil)
}

// UnsetDocument ensures that no value is present for Document, not even an explicit nil
func (o *ElasticSearchRuleActionDto) UnsetDocument() {
	o.Document.Unset()
}

// GetDelete returns the Delete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElasticSearchRuleActionDto) GetDelete() string {
	if o == nil || isNil(o.Delete.Get()) {
		var ret string
		return ret
	}
	return *o.Delete.Get()
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElasticSearchRuleActionDto) GetDeleteOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Delete.Get(), o.Delete.IsSet()
}

// HasDelete returns a boolean if a field has been set.
func (o *ElasticSearchRuleActionDto) HasDelete() bool {
	if o != nil && o.Delete.IsSet() {
		return true
	}

	return false
}

// SetDelete gets a reference to the given NullableString and assigns it to the Delete field.
func (o *ElasticSearchRuleActionDto) SetDelete(v string) {
	o.Delete.Set(&v)
}
// SetDeleteNil sets the value for Delete to be an explicit nil
func (o *ElasticSearchRuleActionDto) SetDeleteNil() {
	o.Delete.Set(nil)
}

// UnsetDelete ensures that no value is present for Delete, not even an explicit nil
func (o *ElasticSearchRuleActionDto) UnsetDelete() {
	o.Delete.Unset()
}

func (o ElasticSearchRuleActionDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedRuleAction, errRuleAction := json.Marshal(o.RuleAction)
	if errRuleAction != nil {
		return []byte{}, errRuleAction
	}
	errRuleAction = json.Unmarshal([]byte(serializedRuleAction), &toSerialize)
	if errRuleAction != nil {
		return []byte{}, errRuleAction
	}
	if true {
		toSerialize["host"] = o.Host
	}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Document.IsSet() {
		toSerialize["document"] = o.Document.Get()
	}
	if o.Delete.IsSet() {
		toSerialize["delete"] = o.Delete.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableElasticSearchRuleActionDto struct {
	value *ElasticSearchRuleActionDto
	isSet bool
}

func (v NullableElasticSearchRuleActionDto) Get() *ElasticSearchRuleActionDto {
	return v.value
}

func (v *NullableElasticSearchRuleActionDto) Set(val *ElasticSearchRuleActionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableElasticSearchRuleActionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableElasticSearchRuleActionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElasticSearchRuleActionDto(val *ElasticSearchRuleActionDto) *NullableElasticSearchRuleActionDto {
	return &NullableElasticSearchRuleActionDto{value: val, isSet: true}
}

func (v NullableElasticSearchRuleActionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElasticSearchRuleActionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


