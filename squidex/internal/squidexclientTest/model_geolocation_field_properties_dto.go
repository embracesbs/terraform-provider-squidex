/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// GeolocationFieldPropertiesDto struct for GeolocationFieldPropertiesDto
type GeolocationFieldPropertiesDto struct {
	FieldPropertiesDto
	Editor *GeolocationFieldEditor `json:"editor,omitempty"`
}

// NewGeolocationFieldPropertiesDto instantiates a new GeolocationFieldPropertiesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeolocationFieldPropertiesDto(fieldType string) *GeolocationFieldPropertiesDto {
	this := GeolocationFieldPropertiesDto{}
	this.FieldType = fieldType
	return &this
}

// NewGeolocationFieldPropertiesDtoWithDefaults instantiates a new GeolocationFieldPropertiesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeolocationFieldPropertiesDtoWithDefaults() *GeolocationFieldPropertiesDto {
	this := GeolocationFieldPropertiesDto{}
	return &this
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *GeolocationFieldPropertiesDto) GetEditor() GeolocationFieldEditor {
	if o == nil || isNil(o.Editor) {
		var ret GeolocationFieldEditor
		return ret
	}
	return *o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeolocationFieldPropertiesDto) GetEditorOk() (*GeolocationFieldEditor, bool) {
	if o == nil || isNil(o.Editor) {
    return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *GeolocationFieldPropertiesDto) HasEditor() bool {
	if o != nil && !isNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given GeolocationFieldEditor and assigns it to the Editor field.
func (o *GeolocationFieldPropertiesDto) SetEditor(v GeolocationFieldEditor) {
	o.Editor = &v
}

func (o GeolocationFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedFieldPropertiesDto, errFieldPropertiesDto := json.Marshal(o.FieldPropertiesDto)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	errFieldPropertiesDto = json.Unmarshal([]byte(serializedFieldPropertiesDto), &toSerialize)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	if !isNil(o.Editor) {
		toSerialize["editor"] = o.Editor
	}
	return json.Marshal(toSerialize)
}

type NullableGeolocationFieldPropertiesDto struct {
	value *GeolocationFieldPropertiesDto
	isSet bool
}

func (v NullableGeolocationFieldPropertiesDto) Get() *GeolocationFieldPropertiesDto {
	return v.value
}

func (v *NullableGeolocationFieldPropertiesDto) Set(val *GeolocationFieldPropertiesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableGeolocationFieldPropertiesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableGeolocationFieldPropertiesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeolocationFieldPropertiesDto(val *GeolocationFieldPropertiesDto) *NullableGeolocationFieldPropertiesDto {
	return &NullableGeolocationFieldPropertiesDto{value: val, isSet: true}
}

func (v NullableGeolocationFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeolocationFieldPropertiesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


