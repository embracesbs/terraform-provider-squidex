/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// AddLanguageDto struct for AddLanguageDto
type AddLanguageDto struct {
	// The language to add.
	Language string `json:"language"`
}

// NewAddLanguageDto instantiates a new AddLanguageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddLanguageDto(language string) *AddLanguageDto {
	this := AddLanguageDto{}
	this.Language = language
	return &this
}

// NewAddLanguageDtoWithDefaults instantiates a new AddLanguageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddLanguageDtoWithDefaults() *AddLanguageDto {
	this := AddLanguageDto{}
	return &this
}

// GetLanguage returns the Language field value
func (o *AddLanguageDto) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *AddLanguageDto) GetLanguageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *AddLanguageDto) SetLanguage(v string) {
	o.Language = v
}

func (o AddLanguageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["language"] = o.Language
	}
	return json.Marshal(toSerialize)
}

type NullableAddLanguageDto struct {
	value *AddLanguageDto
	isSet bool
}

func (v NullableAddLanguageDto) Get() *AddLanguageDto {
	return v.value
}

func (v *NullableAddLanguageDto) Set(val *AddLanguageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLanguageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLanguageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLanguageDto(val *AddLanguageDto) *NullableAddLanguageDto {
	return &NullableAddLanguageDto{value: val, isSet: true}
}

func (v NullableAddLanguageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLanguageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


