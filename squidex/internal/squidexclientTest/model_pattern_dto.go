/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// PatternDto struct for PatternDto
type PatternDto struct {
	// The name of the suggestion.
	Name string `json:"name"`
	// The regex pattern.
	Regex string `json:"regex"`
	// The regex message.
	Message NullableString `json:"message,omitempty"`
}

// NewPatternDto instantiates a new PatternDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatternDto(name string, regex string) *PatternDto {
	this := PatternDto{}
	this.Name = name
	this.Regex = regex
	return &this
}

// NewPatternDtoWithDefaults instantiates a new PatternDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatternDtoWithDefaults() *PatternDto {
	this := PatternDto{}
	return &this
}

// GetName returns the Name field value
func (o *PatternDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PatternDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PatternDto) SetName(v string) {
	o.Name = v
}

// GetRegex returns the Regex field value
func (o *PatternDto) GetRegex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Regex
}

// GetRegexOk returns a tuple with the Regex field value
// and a boolean to check if the value has been set.
func (o *PatternDto) GetRegexOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Regex, true
}

// SetRegex sets field value
func (o *PatternDto) SetRegex(v string) {
	o.Regex = v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatternDto) GetMessage() string {
	if o == nil || isNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatternDto) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *PatternDto) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *PatternDto) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *PatternDto) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *PatternDto) UnsetMessage() {
	o.Message.Unset()
}

func (o PatternDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["regex"] = o.Regex
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePatternDto struct {
	value *PatternDto
	isSet bool
}

func (v NullablePatternDto) Get() *PatternDto {
	return v.value
}

func (v *NullablePatternDto) Set(val *PatternDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePatternDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePatternDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatternDto(val *PatternDto) *NullablePatternDto {
	return &NullablePatternDto{value: val, isSet: true}
}

func (v NullablePatternDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatternDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


