/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// NumberFieldPropertiesDto struct for NumberFieldPropertiesDto
type NumberFieldPropertiesDto struct {
	FieldPropertiesDto
	DefaultValues *map[string]float64 `json:"defaultValues,omitempty"`
	// The default value for the field value.
	DefaultValue NullableFloat64 `json:"defaultValue,omitempty"`
	// The maximum allowed value for the field value.
	MaxValue NullableFloat64 `json:"maxValue,omitempty"`
	// The minimum allowed value for the field value.
	MinValue NullableFloat64 `json:"minValue,omitempty"`
	// The allowed values for the field value.
	AllowedValues []float64 `json:"allowedValues,omitempty"`
	// Indicates if the field value must be unique. Ignored for nested fields and localized fields.
	IsUnique *bool `json:"isUnique,omitempty"`
	// Indicates that the inline editor is enabled for this field.
	InlineEditable *bool `json:"inlineEditable,omitempty"`
	Editor *NumberFieldEditor `json:"editor,omitempty"`
}

// NewNumberFieldPropertiesDto instantiates a new NumberFieldPropertiesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberFieldPropertiesDto(fieldType string) *NumberFieldPropertiesDto {
	this := NumberFieldPropertiesDto{}
	this.FieldType = fieldType
	return &this
}

// NewNumberFieldPropertiesDtoWithDefaults instantiates a new NumberFieldPropertiesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberFieldPropertiesDtoWithDefaults() *NumberFieldPropertiesDto {
	this := NumberFieldPropertiesDto{}
	return &this
}

// GetDefaultValues returns the DefaultValues field value if set, zero value otherwise.
func (o *NumberFieldPropertiesDto) GetDefaultValues() map[string]float64 {
	if o == nil || isNil(o.DefaultValues) {
		var ret map[string]float64
		return ret
	}
	return *o.DefaultValues
}

// GetDefaultValuesOk returns a tuple with the DefaultValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberFieldPropertiesDto) GetDefaultValuesOk() (*map[string]float64, bool) {
	if o == nil || isNil(o.DefaultValues) {
    return nil, false
	}
	return o.DefaultValues, true
}

// HasDefaultValues returns a boolean if a field has been set.
func (o *NumberFieldPropertiesDto) HasDefaultValues() bool {
	if o != nil && !isNil(o.DefaultValues) {
		return true
	}

	return false
}

// SetDefaultValues gets a reference to the given map[string]float64 and assigns it to the DefaultValues field.
func (o *NumberFieldPropertiesDto) SetDefaultValues(v map[string]float64) {
	o.DefaultValues = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFieldPropertiesDto) GetDefaultValue() float64 {
	if o == nil || isNil(o.DefaultValue.Get()) {
		var ret float64
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFieldPropertiesDto) GetDefaultValueOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *NumberFieldPropertiesDto) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableFloat64 and assigns it to the DefaultValue field.
func (o *NumberFieldPropertiesDto) SetDefaultValue(v float64) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *NumberFieldPropertiesDto) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *NumberFieldPropertiesDto) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetMaxValue returns the MaxValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFieldPropertiesDto) GetMaxValue() float64 {
	if o == nil || isNil(o.MaxValue.Get()) {
		var ret float64
		return ret
	}
	return *o.MaxValue.Get()
}

// GetMaxValueOk returns a tuple with the MaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFieldPropertiesDto) GetMaxValueOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxValue.Get(), o.MaxValue.IsSet()
}

// HasMaxValue returns a boolean if a field has been set.
func (o *NumberFieldPropertiesDto) HasMaxValue() bool {
	if o != nil && o.MaxValue.IsSet() {
		return true
	}

	return false
}

// SetMaxValue gets a reference to the given NullableFloat64 and assigns it to the MaxValue field.
func (o *NumberFieldPropertiesDto) SetMaxValue(v float64) {
	o.MaxValue.Set(&v)
}
// SetMaxValueNil sets the value for MaxValue to be an explicit nil
func (o *NumberFieldPropertiesDto) SetMaxValueNil() {
	o.MaxValue.Set(nil)
}

// UnsetMaxValue ensures that no value is present for MaxValue, not even an explicit nil
func (o *NumberFieldPropertiesDto) UnsetMaxValue() {
	o.MaxValue.Unset()
}

// GetMinValue returns the MinValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFieldPropertiesDto) GetMinValue() float64 {
	if o == nil || isNil(o.MinValue.Get()) {
		var ret float64
		return ret
	}
	return *o.MinValue.Get()
}

// GetMinValueOk returns a tuple with the MinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFieldPropertiesDto) GetMinValueOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return o.MinValue.Get(), o.MinValue.IsSet()
}

// HasMinValue returns a boolean if a field has been set.
func (o *NumberFieldPropertiesDto) HasMinValue() bool {
	if o != nil && o.MinValue.IsSet() {
		return true
	}

	return false
}

// SetMinValue gets a reference to the given NullableFloat64 and assigns it to the MinValue field.
func (o *NumberFieldPropertiesDto) SetMinValue(v float64) {
	o.MinValue.Set(&v)
}
// SetMinValueNil sets the value for MinValue to be an explicit nil
func (o *NumberFieldPropertiesDto) SetMinValueNil() {
	o.MinValue.Set(nil)
}

// UnsetMinValue ensures that no value is present for MinValue, not even an explicit nil
func (o *NumberFieldPropertiesDto) UnsetMinValue() {
	o.MinValue.Unset()
}

// GetAllowedValues returns the AllowedValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFieldPropertiesDto) GetAllowedValues() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}
	return o.AllowedValues
}

// GetAllowedValuesOk returns a tuple with the AllowedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFieldPropertiesDto) GetAllowedValuesOk() ([]float64, bool) {
	if o == nil || isNil(o.AllowedValues) {
    return nil, false
	}
	return o.AllowedValues, true
}

// HasAllowedValues returns a boolean if a field has been set.
func (o *NumberFieldPropertiesDto) HasAllowedValues() bool {
	if o != nil && isNil(o.AllowedValues) {
		return true
	}

	return false
}

// SetAllowedValues gets a reference to the given []float64 and assigns it to the AllowedValues field.
func (o *NumberFieldPropertiesDto) SetAllowedValues(v []float64) {
	o.AllowedValues = v
}

// GetIsUnique returns the IsUnique field value if set, zero value otherwise.
func (o *NumberFieldPropertiesDto) GetIsUnique() bool {
	if o == nil || isNil(o.IsUnique) {
		var ret bool
		return ret
	}
	return *o.IsUnique
}

// GetIsUniqueOk returns a tuple with the IsUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberFieldPropertiesDto) GetIsUniqueOk() (*bool, bool) {
	if o == nil || isNil(o.IsUnique) {
    return nil, false
	}
	return o.IsUnique, true
}

// HasIsUnique returns a boolean if a field has been set.
func (o *NumberFieldPropertiesDto) HasIsUnique() bool {
	if o != nil && !isNil(o.IsUnique) {
		return true
	}

	return false
}

// SetIsUnique gets a reference to the given bool and assigns it to the IsUnique field.
func (o *NumberFieldPropertiesDto) SetIsUnique(v bool) {
	o.IsUnique = &v
}

// GetInlineEditable returns the InlineEditable field value if set, zero value otherwise.
func (o *NumberFieldPropertiesDto) GetInlineEditable() bool {
	if o == nil || isNil(o.InlineEditable) {
		var ret bool
		return ret
	}
	return *o.InlineEditable
}

// GetInlineEditableOk returns a tuple with the InlineEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberFieldPropertiesDto) GetInlineEditableOk() (*bool, bool) {
	if o == nil || isNil(o.InlineEditable) {
    return nil, false
	}
	return o.InlineEditable, true
}

// HasInlineEditable returns a boolean if a field has been set.
func (o *NumberFieldPropertiesDto) HasInlineEditable() bool {
	if o != nil && !isNil(o.InlineEditable) {
		return true
	}

	return false
}

// SetInlineEditable gets a reference to the given bool and assigns it to the InlineEditable field.
func (o *NumberFieldPropertiesDto) SetInlineEditable(v bool) {
	o.InlineEditable = &v
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *NumberFieldPropertiesDto) GetEditor() NumberFieldEditor {
	if o == nil || isNil(o.Editor) {
		var ret NumberFieldEditor
		return ret
	}
	return *o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberFieldPropertiesDto) GetEditorOk() (*NumberFieldEditor, bool) {
	if o == nil || isNil(o.Editor) {
    return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *NumberFieldPropertiesDto) HasEditor() bool {
	if o != nil && !isNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given NumberFieldEditor and assigns it to the Editor field.
func (o *NumberFieldPropertiesDto) SetEditor(v NumberFieldEditor) {
	o.Editor = &v
}

func (o NumberFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedFieldPropertiesDto, errFieldPropertiesDto := json.Marshal(o.FieldPropertiesDto)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	errFieldPropertiesDto = json.Unmarshal([]byte(serializedFieldPropertiesDto), &toSerialize)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	if !isNil(o.DefaultValues) {
		toSerialize["defaultValues"] = o.DefaultValues
	}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if o.MaxValue.IsSet() {
		toSerialize["maxValue"] = o.MaxValue.Get()
	}
	if o.MinValue.IsSet() {
		toSerialize["minValue"] = o.MinValue.Get()
	}
	if o.AllowedValues != nil {
		toSerialize["allowedValues"] = o.AllowedValues
	}
	if !isNil(o.IsUnique) {
		toSerialize["isUnique"] = o.IsUnique
	}
	if !isNil(o.InlineEditable) {
		toSerialize["inlineEditable"] = o.InlineEditable
	}
	if !isNil(o.Editor) {
		toSerialize["editor"] = o.Editor
	}
	return json.Marshal(toSerialize)
}

type NullableNumberFieldPropertiesDto struct {
	value *NumberFieldPropertiesDto
	isSet bool
}

func (v NullableNumberFieldPropertiesDto) Get() *NumberFieldPropertiesDto {
	return v.value
}

func (v *NullableNumberFieldPropertiesDto) Set(val *NumberFieldPropertiesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberFieldPropertiesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberFieldPropertiesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberFieldPropertiesDto(val *NumberFieldPropertiesDto) *NullableNumberFieldPropertiesDto {
	return &NullableNumberFieldPropertiesDto{value: val, isSet: true}
}

func (v NullableNumberFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberFieldPropertiesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


