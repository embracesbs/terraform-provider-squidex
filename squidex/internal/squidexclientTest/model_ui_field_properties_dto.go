/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// UIFieldPropertiesDto struct for UIFieldPropertiesDto
type UIFieldPropertiesDto struct {
	FieldPropertiesDto
	Editor *UIFieldEditor `json:"editor,omitempty"`
}

// NewUIFieldPropertiesDto instantiates a new UIFieldPropertiesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUIFieldPropertiesDto(fieldType string) *UIFieldPropertiesDto {
	this := UIFieldPropertiesDto{}
	this.FieldType = fieldType
	return &this
}

// NewUIFieldPropertiesDtoWithDefaults instantiates a new UIFieldPropertiesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUIFieldPropertiesDtoWithDefaults() *UIFieldPropertiesDto {
	this := UIFieldPropertiesDto{}
	return &this
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *UIFieldPropertiesDto) GetEditor() UIFieldEditor {
	if o == nil || isNil(o.Editor) {
		var ret UIFieldEditor
		return ret
	}
	return *o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIFieldPropertiesDto) GetEditorOk() (*UIFieldEditor, bool) {
	if o == nil || isNil(o.Editor) {
    return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *UIFieldPropertiesDto) HasEditor() bool {
	if o != nil && !isNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given UIFieldEditor and assigns it to the Editor field.
func (o *UIFieldPropertiesDto) SetEditor(v UIFieldEditor) {
	o.Editor = &v
}

func (o UIFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedFieldPropertiesDto, errFieldPropertiesDto := json.Marshal(o.FieldPropertiesDto)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	errFieldPropertiesDto = json.Unmarshal([]byte(serializedFieldPropertiesDto), &toSerialize)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	if !isNil(o.Editor) {
		toSerialize["editor"] = o.Editor
	}
	return json.Marshal(toSerialize)
}

type NullableUIFieldPropertiesDto struct {
	value *UIFieldPropertiesDto
	isSet bool
}

func (v NullableUIFieldPropertiesDto) Get() *UIFieldPropertiesDto {
	return v.value
}

func (v *NullableUIFieldPropertiesDto) Set(val *UIFieldPropertiesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUIFieldPropertiesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUIFieldPropertiesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUIFieldPropertiesDto(val *UIFieldPropertiesDto) *NullableUIFieldPropertiesDto {
	return &NullableUIFieldPropertiesDto{value: val, isSet: true}
}

func (v NullableUIFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUIFieldPropertiesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


