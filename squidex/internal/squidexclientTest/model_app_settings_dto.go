/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// AppSettingsDto struct for AppSettingsDto
type AppSettingsDto struct {
	// The links.
	Links map[string]ResourceLink `json:"_links"`
	// The configured app patterns.
	Patterns []PatternDto `json:"patterns"`
	// The configured UI editors.
	Editors []EditorDto `json:"editors"`
	// Hide the scheduler for content items.
	HideScheduler *bool `json:"hideScheduler,omitempty"`
	// Hide the datetime mode button.
	HideDateTimeModeButton *bool `json:"hideDateTimeModeButton,omitempty"`
	// The version of the app.
	Version *int64 `json:"version,omitempty"`
}

// NewAppSettingsDto instantiates a new AppSettingsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppSettingsDto(links map[string]ResourceLink, patterns []PatternDto, editors []EditorDto) *AppSettingsDto {
	this := AppSettingsDto{}
	this.Links = links
	this.Patterns = patterns
	this.Editors = editors
	return &this
}

// NewAppSettingsDtoWithDefaults instantiates a new AppSettingsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppSettingsDtoWithDefaults() *AppSettingsDto {
	this := AppSettingsDto{}
	return &this
}

// GetLinks returns the Links field value
func (o *AppSettingsDto) GetLinks() map[string]ResourceLink {
	if o == nil {
		var ret map[string]ResourceLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *AppSettingsDto) GetLinksOk() (*map[string]ResourceLink, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *AppSettingsDto) SetLinks(v map[string]ResourceLink) {
	o.Links = v
}

// GetPatterns returns the Patterns field value
func (o *AppSettingsDto) GetPatterns() []PatternDto {
	if o == nil {
		var ret []PatternDto
		return ret
	}

	return o.Patterns
}

// GetPatternsOk returns a tuple with the Patterns field value
// and a boolean to check if the value has been set.
func (o *AppSettingsDto) GetPatternsOk() ([]PatternDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Patterns, true
}

// SetPatterns sets field value
func (o *AppSettingsDto) SetPatterns(v []PatternDto) {
	o.Patterns = v
}

// GetEditors returns the Editors field value
func (o *AppSettingsDto) GetEditors() []EditorDto {
	if o == nil {
		var ret []EditorDto
		return ret
	}

	return o.Editors
}

// GetEditorsOk returns a tuple with the Editors field value
// and a boolean to check if the value has been set.
func (o *AppSettingsDto) GetEditorsOk() ([]EditorDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Editors, true
}

// SetEditors sets field value
func (o *AppSettingsDto) SetEditors(v []EditorDto) {
	o.Editors = v
}

// GetHideScheduler returns the HideScheduler field value if set, zero value otherwise.
func (o *AppSettingsDto) GetHideScheduler() bool {
	if o == nil || isNil(o.HideScheduler) {
		var ret bool
		return ret
	}
	return *o.HideScheduler
}

// GetHideSchedulerOk returns a tuple with the HideScheduler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettingsDto) GetHideSchedulerOk() (*bool, bool) {
	if o == nil || isNil(o.HideScheduler) {
    return nil, false
	}
	return o.HideScheduler, true
}

// HasHideScheduler returns a boolean if a field has been set.
func (o *AppSettingsDto) HasHideScheduler() bool {
	if o != nil && !isNil(o.HideScheduler) {
		return true
	}

	return false
}

// SetHideScheduler gets a reference to the given bool and assigns it to the HideScheduler field.
func (o *AppSettingsDto) SetHideScheduler(v bool) {
	o.HideScheduler = &v
}

// GetHideDateTimeModeButton returns the HideDateTimeModeButton field value if set, zero value otherwise.
func (o *AppSettingsDto) GetHideDateTimeModeButton() bool {
	if o == nil || isNil(o.HideDateTimeModeButton) {
		var ret bool
		return ret
	}
	return *o.HideDateTimeModeButton
}

// GetHideDateTimeModeButtonOk returns a tuple with the HideDateTimeModeButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettingsDto) GetHideDateTimeModeButtonOk() (*bool, bool) {
	if o == nil || isNil(o.HideDateTimeModeButton) {
    return nil, false
	}
	return o.HideDateTimeModeButton, true
}

// HasHideDateTimeModeButton returns a boolean if a field has been set.
func (o *AppSettingsDto) HasHideDateTimeModeButton() bool {
	if o != nil && !isNil(o.HideDateTimeModeButton) {
		return true
	}

	return false
}

// SetHideDateTimeModeButton gets a reference to the given bool and assigns it to the HideDateTimeModeButton field.
func (o *AppSettingsDto) SetHideDateTimeModeButton(v bool) {
	o.HideDateTimeModeButton = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AppSettingsDto) GetVersion() int64 {
	if o == nil || isNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettingsDto) GetVersionOk() (*int64, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AppSettingsDto) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *AppSettingsDto) SetVersion(v int64) {
	o.Version = &v
}

func (o AppSettingsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_links"] = o.Links
	}
	if true {
		toSerialize["patterns"] = o.Patterns
	}
	if true {
		toSerialize["editors"] = o.Editors
	}
	if !isNil(o.HideScheduler) {
		toSerialize["hideScheduler"] = o.HideScheduler
	}
	if !isNil(o.HideDateTimeModeButton) {
		toSerialize["hideDateTimeModeButton"] = o.HideDateTimeModeButton
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableAppSettingsDto struct {
	value *AppSettingsDto
	isSet bool
}

func (v NullableAppSettingsDto) Get() *AppSettingsDto {
	return v.value
}

func (v *NullableAppSettingsDto) Set(val *AppSettingsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppSettingsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppSettingsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppSettingsDto(val *AppSettingsDto) *NullableAppSettingsDto {
	return &NullableAppSettingsDto{value: val, isSet: true}
}

func (v NullableAppSettingsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppSettingsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


