/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// AddWorkflowDto struct for AddWorkflowDto
type AddWorkflowDto struct {
	// The name of the workflow.
	Name string `json:"name"`
}

// NewAddWorkflowDto instantiates a new AddWorkflowDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddWorkflowDto(name string) *AddWorkflowDto {
	this := AddWorkflowDto{}
	this.Name = name
	return &this
}

// NewAddWorkflowDtoWithDefaults instantiates a new AddWorkflowDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddWorkflowDtoWithDefaults() *AddWorkflowDto {
	this := AddWorkflowDto{}
	return &this
}

// GetName returns the Name field value
func (o *AddWorkflowDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddWorkflowDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddWorkflowDto) SetName(v string) {
	o.Name = v
}

func (o AddWorkflowDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableAddWorkflowDto struct {
	value *AddWorkflowDto
	isSet bool
}

func (v NullableAddWorkflowDto) Get() *AddWorkflowDto {
	return v.value
}

func (v *NullableAddWorkflowDto) Set(val *AddWorkflowDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAddWorkflowDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAddWorkflowDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddWorkflowDto(val *AddWorkflowDto) *NullableAddWorkflowDto {
	return &NullableAddWorkflowDto{value: val, isSet: true}
}

func (v NullableAddWorkflowDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddWorkflowDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


