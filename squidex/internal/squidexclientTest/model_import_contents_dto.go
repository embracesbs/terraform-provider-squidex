/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ImportContentsDto struct for ImportContentsDto
type ImportContentsDto struct {
	// The data to import.
	Datas []map[string]map[string]interface{} `json:"datas"`
	// True to automatically publish the content.
	// Deprecated
	Publish *bool `json:"publish,omitempty"`
	// True to turn off scripting for faster inserts. Default: true.
	DoNotScript *bool `json:"doNotScript,omitempty"`
	// True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.
	OptimizeValidation *bool `json:"optimizeValidation,omitempty"`
}

// NewImportContentsDto instantiates a new ImportContentsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportContentsDto(datas []map[string]map[string]interface{}) *ImportContentsDto {
	this := ImportContentsDto{}
	this.Datas = datas
	return &this
}

// NewImportContentsDtoWithDefaults instantiates a new ImportContentsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportContentsDtoWithDefaults() *ImportContentsDto {
	this := ImportContentsDto{}
	return &this
}

// GetDatas returns the Datas field value
func (o *ImportContentsDto) GetDatas() []map[string]map[string]interface{} {
	if o == nil {
		var ret []map[string]map[string]interface{}
		return ret
	}

	return o.Datas
}

// GetDatasOk returns a tuple with the Datas field value
// and a boolean to check if the value has been set.
func (o *ImportContentsDto) GetDatasOk() ([]map[string]map[string]interface{}, bool) {
	if o == nil {
    return nil, false
	}
	return o.Datas, true
}

// SetDatas sets field value
func (o *ImportContentsDto) SetDatas(v []map[string]map[string]interface{}) {
	o.Datas = v
}

// GetPublish returns the Publish field value if set, zero value otherwise.
// Deprecated
func (o *ImportContentsDto) GetPublish() bool {
	if o == nil || isNil(o.Publish) {
		var ret bool
		return ret
	}
	return *o.Publish
}

// GetPublishOk returns a tuple with the Publish field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ImportContentsDto) GetPublishOk() (*bool, bool) {
	if o == nil || isNil(o.Publish) {
    return nil, false
	}
	return o.Publish, true
}

// HasPublish returns a boolean if a field has been set.
func (o *ImportContentsDto) HasPublish() bool {
	if o != nil && !isNil(o.Publish) {
		return true
	}

	return false
}

// SetPublish gets a reference to the given bool and assigns it to the Publish field.
// Deprecated
func (o *ImportContentsDto) SetPublish(v bool) {
	o.Publish = &v
}

// GetDoNotScript returns the DoNotScript field value if set, zero value otherwise.
func (o *ImportContentsDto) GetDoNotScript() bool {
	if o == nil || isNil(o.DoNotScript) {
		var ret bool
		return ret
	}
	return *o.DoNotScript
}

// GetDoNotScriptOk returns a tuple with the DoNotScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportContentsDto) GetDoNotScriptOk() (*bool, bool) {
	if o == nil || isNil(o.DoNotScript) {
    return nil, false
	}
	return o.DoNotScript, true
}

// HasDoNotScript returns a boolean if a field has been set.
func (o *ImportContentsDto) HasDoNotScript() bool {
	if o != nil && !isNil(o.DoNotScript) {
		return true
	}

	return false
}

// SetDoNotScript gets a reference to the given bool and assigns it to the DoNotScript field.
func (o *ImportContentsDto) SetDoNotScript(v bool) {
	o.DoNotScript = &v
}

// GetOptimizeValidation returns the OptimizeValidation field value if set, zero value otherwise.
func (o *ImportContentsDto) GetOptimizeValidation() bool {
	if o == nil || isNil(o.OptimizeValidation) {
		var ret bool
		return ret
	}
	return *o.OptimizeValidation
}

// GetOptimizeValidationOk returns a tuple with the OptimizeValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportContentsDto) GetOptimizeValidationOk() (*bool, bool) {
	if o == nil || isNil(o.OptimizeValidation) {
    return nil, false
	}
	return o.OptimizeValidation, true
}

// HasOptimizeValidation returns a boolean if a field has been set.
func (o *ImportContentsDto) HasOptimizeValidation() bool {
	if o != nil && !isNil(o.OptimizeValidation) {
		return true
	}

	return false
}

// SetOptimizeValidation gets a reference to the given bool and assigns it to the OptimizeValidation field.
func (o *ImportContentsDto) SetOptimizeValidation(v bool) {
	o.OptimizeValidation = &v
}

func (o ImportContentsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["datas"] = o.Datas
	}
	if !isNil(o.Publish) {
		toSerialize["publish"] = o.Publish
	}
	if !isNil(o.DoNotScript) {
		toSerialize["doNotScript"] = o.DoNotScript
	}
	if !isNil(o.OptimizeValidation) {
		toSerialize["optimizeValidation"] = o.OptimizeValidation
	}
	return json.Marshal(toSerialize)
}

type NullableImportContentsDto struct {
	value *ImportContentsDto
	isSet bool
}

func (v NullableImportContentsDto) Get() *ImportContentsDto {
	return v.value
}

func (v *NullableImportContentsDto) Set(val *ImportContentsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableImportContentsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableImportContentsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportContentsDto(val *ImportContentsDto) *NullableImportContentsDto {
	return &NullableImportContentsDto{value: val, isSet: true}
}

func (v NullableImportContentsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportContentsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


