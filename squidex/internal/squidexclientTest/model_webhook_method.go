/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// WebhookMethod 
type WebhookMethod string

// List of WebhookMethod
const (
	POST WebhookMethod = "POST"
	PUT WebhookMethod = "PUT"
	GET WebhookMethod = "GET"
	DELETE WebhookMethod = "DELETE"
	PATCH WebhookMethod = "PATCH"
)

// All allowed values of WebhookMethod enum
var AllowedWebhookMethodEnumValues = []WebhookMethod{
	"POST",
	"PUT",
	"GET",
	"DELETE",
	"PATCH",
}

func (v *WebhookMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookMethod(value)
	for _, existing := range AllowedWebhookMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookMethod", value)
}

// NewWebhookMethodFromValue returns a pointer to a valid WebhookMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookMethodFromValue(v string) (*WebhookMethod, error) {
	ev := WebhookMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookMethod: valid values are %v", v, AllowedWebhookMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookMethod) IsValid() bool {
	for _, existing := range AllowedWebhookMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookMethod value
func (v WebhookMethod) Ptr() *WebhookMethod {
	return &v
}

type NullableWebhookMethod struct {
	value *WebhookMethod
	isSet bool
}

func (v NullableWebhookMethod) Get() *WebhookMethod {
	return v.value
}

func (v *NullableWebhookMethod) Set(val *WebhookMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookMethod(val *WebhookMethod) *NullableWebhookMethod {
	return &NullableWebhookMethod{value: val, isSet: true}
}

func (v NullableWebhookMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

