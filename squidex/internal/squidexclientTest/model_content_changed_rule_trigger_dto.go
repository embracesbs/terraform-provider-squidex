/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ContentChangedRuleTriggerDto struct for ContentChangedRuleTriggerDto
type ContentChangedRuleTriggerDto struct {
	RuleTriggerDto
	// The schema settings.
	Schemas []ContentChangedRuleTriggerSchemaDto `json:"schemas,omitempty"`
	// Determines whether the trigger should handle all content changes events.
	HandleAll *bool `json:"handleAll,omitempty"`
}

// NewContentChangedRuleTriggerDto instantiates a new ContentChangedRuleTriggerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentChangedRuleTriggerDto(triggerType string) *ContentChangedRuleTriggerDto {
	this := ContentChangedRuleTriggerDto{}
	this.TriggerType = triggerType
	return &this
}

// NewContentChangedRuleTriggerDtoWithDefaults instantiates a new ContentChangedRuleTriggerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentChangedRuleTriggerDtoWithDefaults() *ContentChangedRuleTriggerDto {
	this := ContentChangedRuleTriggerDto{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentChangedRuleTriggerDto) GetSchemas() []ContentChangedRuleTriggerSchemaDto {
	if o == nil {
		var ret []ContentChangedRuleTriggerSchemaDto
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentChangedRuleTriggerDto) GetSchemasOk() ([]ContentChangedRuleTriggerSchemaDto, bool) {
	if o == nil || isNil(o.Schemas) {
    return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *ContentChangedRuleTriggerDto) HasSchemas() bool {
	if o != nil && isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []ContentChangedRuleTriggerSchemaDto and assigns it to the Schemas field.
func (o *ContentChangedRuleTriggerDto) SetSchemas(v []ContentChangedRuleTriggerSchemaDto) {
	o.Schemas = v
}

// GetHandleAll returns the HandleAll field value if set, zero value otherwise.
func (o *ContentChangedRuleTriggerDto) GetHandleAll() bool {
	if o == nil || isNil(o.HandleAll) {
		var ret bool
		return ret
	}
	return *o.HandleAll
}

// GetHandleAllOk returns a tuple with the HandleAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentChangedRuleTriggerDto) GetHandleAllOk() (*bool, bool) {
	if o == nil || isNil(o.HandleAll) {
    return nil, false
	}
	return o.HandleAll, true
}

// HasHandleAll returns a boolean if a field has been set.
func (o *ContentChangedRuleTriggerDto) HasHandleAll() bool {
	if o != nil && !isNil(o.HandleAll) {
		return true
	}

	return false
}

// SetHandleAll gets a reference to the given bool and assigns it to the HandleAll field.
func (o *ContentChangedRuleTriggerDto) SetHandleAll(v bool) {
	o.HandleAll = &v
}

func (o ContentChangedRuleTriggerDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedRuleTriggerDto, errRuleTriggerDto := json.Marshal(o.RuleTriggerDto)
	if errRuleTriggerDto != nil {
		return []byte{}, errRuleTriggerDto
	}
	errRuleTriggerDto = json.Unmarshal([]byte(serializedRuleTriggerDto), &toSerialize)
	if errRuleTriggerDto != nil {
		return []byte{}, errRuleTriggerDto
	}
	if o.Schemas != nil {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.HandleAll) {
		toSerialize["handleAll"] = o.HandleAll
	}
	return json.Marshal(toSerialize)
}

type NullableContentChangedRuleTriggerDto struct {
	value *ContentChangedRuleTriggerDto
	isSet bool
}

func (v NullableContentChangedRuleTriggerDto) Get() *ContentChangedRuleTriggerDto {
	return v.value
}

func (v *NullableContentChangedRuleTriggerDto) Set(val *ContentChangedRuleTriggerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableContentChangedRuleTriggerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableContentChangedRuleTriggerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentChangedRuleTriggerDto(val *ContentChangedRuleTriggerDto) *NullableContentChangedRuleTriggerDto {
	return &NullableContentChangedRuleTriggerDto{value: val, isSet: true}
}

func (v NullableContentChangedRuleTriggerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentChangedRuleTriggerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


