/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// EventConsumersDtoAllOf struct for EventConsumersDtoAllOf
type EventConsumersDtoAllOf struct {
	// The event consumers.
	Items []EventConsumerDto `json:"items,omitempty"`
}

// NewEventConsumersDtoAllOf instantiates a new EventConsumersDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventConsumersDtoAllOf() *EventConsumersDtoAllOf {
	this := EventConsumersDtoAllOf{}
	return &this
}

// NewEventConsumersDtoAllOfWithDefaults instantiates a new EventConsumersDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventConsumersDtoAllOfWithDefaults() *EventConsumersDtoAllOf {
	this := EventConsumersDtoAllOf{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *EventConsumersDtoAllOf) GetItems() []EventConsumerDto {
	if o == nil || isNil(o.Items) {
		var ret []EventConsumerDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventConsumersDtoAllOf) GetItemsOk() ([]EventConsumerDto, bool) {
	if o == nil || isNil(o.Items) {
    return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *EventConsumersDtoAllOf) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []EventConsumerDto and assigns it to the Items field.
func (o *EventConsumersDtoAllOf) SetItems(v []EventConsumerDto) {
	o.Items = v
}

func (o EventConsumersDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableEventConsumersDtoAllOf struct {
	value *EventConsumersDtoAllOf
	isSet bool
}

func (v NullableEventConsumersDtoAllOf) Get() *EventConsumersDtoAllOf {
	return v.value
}

func (v *NullableEventConsumersDtoAllOf) Set(val *EventConsumersDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEventConsumersDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEventConsumersDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventConsumersDtoAllOf(val *EventConsumersDtoAllOf) *NullableEventConsumersDtoAllOf {
	return &NullableEventConsumersDtoAllOf{value: val, isSet: true}
}

func (v NullableEventConsumersDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventConsumersDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


