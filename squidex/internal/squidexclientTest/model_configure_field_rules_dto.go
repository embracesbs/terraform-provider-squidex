/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ConfigureFieldRulesDto struct for ConfigureFieldRulesDto
type ConfigureFieldRulesDto struct {
	// The field rules to configure.
	FieldRules []FieldRuleDto `json:"fieldRules,omitempty"`
}

// NewConfigureFieldRulesDto instantiates a new ConfigureFieldRulesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigureFieldRulesDto() *ConfigureFieldRulesDto {
	this := ConfigureFieldRulesDto{}
	return &this
}

// NewConfigureFieldRulesDtoWithDefaults instantiates a new ConfigureFieldRulesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigureFieldRulesDtoWithDefaults() *ConfigureFieldRulesDto {
	this := ConfigureFieldRulesDto{}
	return &this
}

// GetFieldRules returns the FieldRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigureFieldRulesDto) GetFieldRules() []FieldRuleDto {
	if o == nil {
		var ret []FieldRuleDto
		return ret
	}
	return o.FieldRules
}

// GetFieldRulesOk returns a tuple with the FieldRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigureFieldRulesDto) GetFieldRulesOk() ([]FieldRuleDto, bool) {
	if o == nil || isNil(o.FieldRules) {
    return nil, false
	}
	return o.FieldRules, true
}

// HasFieldRules returns a boolean if a field has been set.
func (o *ConfigureFieldRulesDto) HasFieldRules() bool {
	if o != nil && isNil(o.FieldRules) {
		return true
	}

	return false
}

// SetFieldRules gets a reference to the given []FieldRuleDto and assigns it to the FieldRules field.
func (o *ConfigureFieldRulesDto) SetFieldRules(v []FieldRuleDto) {
	o.FieldRules = v
}

func (o ConfigureFieldRulesDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldRules != nil {
		toSerialize["fieldRules"] = o.FieldRules
	}
	return json.Marshal(toSerialize)
}

type NullableConfigureFieldRulesDto struct {
	value *ConfigureFieldRulesDto
	isSet bool
}

func (v NullableConfigureFieldRulesDto) Get() *ConfigureFieldRulesDto {
	return v.value
}

func (v *NullableConfigureFieldRulesDto) Set(val *ConfigureFieldRulesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigureFieldRulesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigureFieldRulesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigureFieldRulesDto(val *ConfigureFieldRulesDto) *NullableConfigureFieldRulesDto {
	return &NullableConfigureFieldRulesDto{value: val, isSet: true}
}

func (v NullableConfigureFieldRulesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigureFieldRulesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


