/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// DiscourseRuleActionDto struct for DiscourseRuleActionDto
type DiscourseRuleActionDto struct {
	RuleAction
	// The url to the discourse server.
	Url string `json:"url"`
	// The api key to authenticate to your discourse server.
	ApiKey string `json:"apiKey"`
	// The api username to authenticate to your discourse server.
	ApiUsername string `json:"apiUsername"`
	// The text as markdown.
	Text string `json:"text"`
	// The optional title when creating new topics.
	Title NullableString `json:"title,omitempty"`
	// The optional topic id.
	Topic NullableInt32 `json:"topic,omitempty"`
	// The optional category id.
	Category NullableInt32 `json:"category,omitempty"`
}

// NewDiscourseRuleActionDto instantiates a new DiscourseRuleActionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscourseRuleActionDto(url string, apiKey string, apiUsername string, text string, actionType NullableString) *DiscourseRuleActionDto {
	this := DiscourseRuleActionDto{}
	this.ActionType = actionType
	this.Url = url
	this.ApiKey = apiKey
	this.ApiUsername = apiUsername
	this.Text = text
	return &this
}

// NewDiscourseRuleActionDtoWithDefaults instantiates a new DiscourseRuleActionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscourseRuleActionDtoWithDefaults() *DiscourseRuleActionDto {
	this := DiscourseRuleActionDto{}
	return &this
}

// GetUrl returns the Url field value
func (o *DiscourseRuleActionDto) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *DiscourseRuleActionDto) GetUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *DiscourseRuleActionDto) SetUrl(v string) {
	o.Url = v
}

// GetApiKey returns the ApiKey field value
func (o *DiscourseRuleActionDto) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *DiscourseRuleActionDto) GetApiKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *DiscourseRuleActionDto) SetApiKey(v string) {
	o.ApiKey = v
}

// GetApiUsername returns the ApiUsername field value
func (o *DiscourseRuleActionDto) GetApiUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiUsername
}

// GetApiUsernameOk returns a tuple with the ApiUsername field value
// and a boolean to check if the value has been set.
func (o *DiscourseRuleActionDto) GetApiUsernameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ApiUsername, true
}

// SetApiUsername sets field value
func (o *DiscourseRuleActionDto) SetApiUsername(v string) {
	o.ApiUsername = v
}

// GetText returns the Text field value
func (o *DiscourseRuleActionDto) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *DiscourseRuleActionDto) GetTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *DiscourseRuleActionDto) SetText(v string) {
	o.Text = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiscourseRuleActionDto) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiscourseRuleActionDto) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *DiscourseRuleActionDto) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *DiscourseRuleActionDto) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *DiscourseRuleActionDto) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *DiscourseRuleActionDto) UnsetTitle() {
	o.Title.Unset()
}

// GetTopic returns the Topic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiscourseRuleActionDto) GetTopic() int32 {
	if o == nil || isNil(o.Topic.Get()) {
		var ret int32
		return ret
	}
	return *o.Topic.Get()
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiscourseRuleActionDto) GetTopicOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Topic.Get(), o.Topic.IsSet()
}

// HasTopic returns a boolean if a field has been set.
func (o *DiscourseRuleActionDto) HasTopic() bool {
	if o != nil && o.Topic.IsSet() {
		return true
	}

	return false
}

// SetTopic gets a reference to the given NullableInt32 and assigns it to the Topic field.
func (o *DiscourseRuleActionDto) SetTopic(v int32) {
	o.Topic.Set(&v)
}
// SetTopicNil sets the value for Topic to be an explicit nil
func (o *DiscourseRuleActionDto) SetTopicNil() {
	o.Topic.Set(nil)
}

// UnsetTopic ensures that no value is present for Topic, not even an explicit nil
func (o *DiscourseRuleActionDto) UnsetTopic() {
	o.Topic.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiscourseRuleActionDto) GetCategory() int32 {
	if o == nil || isNil(o.Category.Get()) {
		var ret int32
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiscourseRuleActionDto) GetCategoryOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *DiscourseRuleActionDto) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableInt32 and assigns it to the Category field.
func (o *DiscourseRuleActionDto) SetCategory(v int32) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *DiscourseRuleActionDto) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *DiscourseRuleActionDto) UnsetCategory() {
	o.Category.Unset()
}

func (o DiscourseRuleActionDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedRuleAction, errRuleAction := json.Marshal(o.RuleAction)
	if errRuleAction != nil {
		return []byte{}, errRuleAction
	}
	errRuleAction = json.Unmarshal([]byte(serializedRuleAction), &toSerialize)
	if errRuleAction != nil {
		return []byte{}, errRuleAction
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["apiKey"] = o.ApiKey
	}
	if true {
		toSerialize["apiUsername"] = o.ApiUsername
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Topic.IsSet() {
		toSerialize["topic"] = o.Topic.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDiscourseRuleActionDto struct {
	value *DiscourseRuleActionDto
	isSet bool
}

func (v NullableDiscourseRuleActionDto) Get() *DiscourseRuleActionDto {
	return v.value
}

func (v *NullableDiscourseRuleActionDto) Set(val *DiscourseRuleActionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscourseRuleActionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscourseRuleActionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscourseRuleActionDto(val *DiscourseRuleActionDto) *NullableDiscourseRuleActionDto {
	return &NullableDiscourseRuleActionDto{value: val, isSet: true}
}

func (v NullableDiscourseRuleActionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscourseRuleActionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


