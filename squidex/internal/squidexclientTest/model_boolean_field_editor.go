/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// BooleanFieldEditor 
type BooleanFieldEditor string

// List of BooleanFieldEditor
const (
	BooleanFieldEditorCHECKBOX BooleanFieldEditor = "Checkbox"
	BooleanFieldEditorTOGGLE BooleanFieldEditor = "Toggle"
)

// All allowed values of BooleanFieldEditor enum
var AllowedBooleanFieldEditorEnumValues = []BooleanFieldEditor{
	"Checkbox",
	"Toggle",
}

func (v *BooleanFieldEditor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BooleanFieldEditor(value)
	for _, existing := range AllowedBooleanFieldEditorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BooleanFieldEditor", value)
}

// NewBooleanFieldEditorFromValue returns a pointer to a valid BooleanFieldEditor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBooleanFieldEditorFromValue(v string) (*BooleanFieldEditor, error) {
	ev := BooleanFieldEditor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BooleanFieldEditor: valid values are %v", v, AllowedBooleanFieldEditorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BooleanFieldEditor) IsValid() bool {
	for _, existing := range AllowedBooleanFieldEditorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BooleanFieldEditor value
func (v BooleanFieldEditor) Ptr() *BooleanFieldEditor {
	return &v
}

type NullableBooleanFieldEditor struct {
	value *BooleanFieldEditor
	isSet bool
}

func (v NullableBooleanFieldEditor) Get() *BooleanFieldEditor {
	return v.value
}

func (v *NullableBooleanFieldEditor) Set(val *BooleanFieldEditor) {
	v.value = val
	v.isSet = true
}

func (v NullableBooleanFieldEditor) IsSet() bool {
	return v.isSet
}

func (v *NullableBooleanFieldEditor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBooleanFieldEditor(val *BooleanFieldEditor) *NullableBooleanFieldEditor {
	return &NullableBooleanFieldEditor{value: val, isSet: true}
}

func (v NullableBooleanFieldEditor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBooleanFieldEditor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

