/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// FieldRuleDto struct for FieldRuleDto
type FieldRuleDto struct {
	Action FieldRuleAction `json:"action"`
	// The field to update.
	Field string `json:"field"`
	// The condition.
	Condition NullableString `json:"condition,omitempty"`
}

// NewFieldRuleDto instantiates a new FieldRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldRuleDto(action FieldRuleAction, field string) *FieldRuleDto {
	this := FieldRuleDto{}
	this.Action = action
	this.Field = field
	return &this
}

// NewFieldRuleDtoWithDefaults instantiates a new FieldRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldRuleDtoWithDefaults() *FieldRuleDto {
	this := FieldRuleDto{}
	return &this
}

// GetAction returns the Action field value
func (o *FieldRuleDto) GetAction() FieldRuleAction {
	if o == nil {
		var ret FieldRuleAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *FieldRuleDto) GetActionOk() (*FieldRuleAction, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *FieldRuleDto) SetAction(v FieldRuleAction) {
	o.Action = v
}

// GetField returns the Field field value
func (o *FieldRuleDto) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *FieldRuleDto) GetFieldOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *FieldRuleDto) SetField(v string) {
	o.Field = v
}

// GetCondition returns the Condition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldRuleDto) GetCondition() string {
	if o == nil || isNil(o.Condition.Get()) {
		var ret string
		return ret
	}
	return *o.Condition.Get()
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldRuleDto) GetConditionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Condition.Get(), o.Condition.IsSet()
}

// HasCondition returns a boolean if a field has been set.
func (o *FieldRuleDto) HasCondition() bool {
	if o != nil && o.Condition.IsSet() {
		return true
	}

	return false
}

// SetCondition gets a reference to the given NullableString and assigns it to the Condition field.
func (o *FieldRuleDto) SetCondition(v string) {
	o.Condition.Set(&v)
}
// SetConditionNil sets the value for Condition to be an explicit nil
func (o *FieldRuleDto) SetConditionNil() {
	o.Condition.Set(nil)
}

// UnsetCondition ensures that no value is present for Condition, not even an explicit nil
func (o *FieldRuleDto) UnsetCondition() {
	o.Condition.Unset()
}

func (o FieldRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["field"] = o.Field
	}
	if o.Condition.IsSet() {
		toSerialize["condition"] = o.Condition.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFieldRuleDto struct {
	value *FieldRuleDto
	isSet bool
}

func (v NullableFieldRuleDto) Get() *FieldRuleDto {
	return v.value
}

func (v *NullableFieldRuleDto) Set(val *FieldRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldRuleDto(val *FieldRuleDto) *NullableFieldRuleDto {
	return &NullableFieldRuleDto{value: val, isSet: true}
}

func (v NullableFieldRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


