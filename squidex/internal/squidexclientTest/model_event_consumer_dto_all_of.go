/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// EventConsumerDtoAllOf struct for EventConsumerDtoAllOf
type EventConsumerDtoAllOf struct {
	IsStopped *bool `json:"isStopped,omitempty"`
	IsResetting *bool `json:"isResetting,omitempty"`
	Count *int32 `json:"count,omitempty"`
	Name *string `json:"name,omitempty"`
	Error NullableString `json:"error,omitempty"`
	Position NullableString `json:"position,omitempty"`
}

// NewEventConsumerDtoAllOf instantiates a new EventConsumerDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventConsumerDtoAllOf() *EventConsumerDtoAllOf {
	this := EventConsumerDtoAllOf{}
	return &this
}

// NewEventConsumerDtoAllOfWithDefaults instantiates a new EventConsumerDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventConsumerDtoAllOfWithDefaults() *EventConsumerDtoAllOf {
	this := EventConsumerDtoAllOf{}
	return &this
}

// GetIsStopped returns the IsStopped field value if set, zero value otherwise.
func (o *EventConsumerDtoAllOf) GetIsStopped() bool {
	if o == nil || isNil(o.IsStopped) {
		var ret bool
		return ret
	}
	return *o.IsStopped
}

// GetIsStoppedOk returns a tuple with the IsStopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventConsumerDtoAllOf) GetIsStoppedOk() (*bool, bool) {
	if o == nil || isNil(o.IsStopped) {
    return nil, false
	}
	return o.IsStopped, true
}

// HasIsStopped returns a boolean if a field has been set.
func (o *EventConsumerDtoAllOf) HasIsStopped() bool {
	if o != nil && !isNil(o.IsStopped) {
		return true
	}

	return false
}

// SetIsStopped gets a reference to the given bool and assigns it to the IsStopped field.
func (o *EventConsumerDtoAllOf) SetIsStopped(v bool) {
	o.IsStopped = &v
}

// GetIsResetting returns the IsResetting field value if set, zero value otherwise.
func (o *EventConsumerDtoAllOf) GetIsResetting() bool {
	if o == nil || isNil(o.IsResetting) {
		var ret bool
		return ret
	}
	return *o.IsResetting
}

// GetIsResettingOk returns a tuple with the IsResetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventConsumerDtoAllOf) GetIsResettingOk() (*bool, bool) {
	if o == nil || isNil(o.IsResetting) {
    return nil, false
	}
	return o.IsResetting, true
}

// HasIsResetting returns a boolean if a field has been set.
func (o *EventConsumerDtoAllOf) HasIsResetting() bool {
	if o != nil && !isNil(o.IsResetting) {
		return true
	}

	return false
}

// SetIsResetting gets a reference to the given bool and assigns it to the IsResetting field.
func (o *EventConsumerDtoAllOf) SetIsResetting(v bool) {
	o.IsResetting = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EventConsumerDtoAllOf) GetCount() int32 {
	if o == nil || isNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventConsumerDtoAllOf) GetCountOk() (*int32, bool) {
	if o == nil || isNil(o.Count) {
    return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EventConsumerDtoAllOf) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *EventConsumerDtoAllOf) SetCount(v int32) {
	o.Count = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventConsumerDtoAllOf) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventConsumerDtoAllOf) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventConsumerDtoAllOf) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventConsumerDtoAllOf) SetName(v string) {
	o.Name = &v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventConsumerDtoAllOf) GetError() string {
	if o == nil || isNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventConsumerDtoAllOf) GetErrorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *EventConsumerDtoAllOf) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *EventConsumerDtoAllOf) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *EventConsumerDtoAllOf) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *EventConsumerDtoAllOf) UnsetError() {
	o.Error.Unset()
}

// GetPosition returns the Position field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventConsumerDtoAllOf) GetPosition() string {
	if o == nil || isNil(o.Position.Get()) {
		var ret string
		return ret
	}
	return *o.Position.Get()
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventConsumerDtoAllOf) GetPositionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Position.Get(), o.Position.IsSet()
}

// HasPosition returns a boolean if a field has been set.
func (o *EventConsumerDtoAllOf) HasPosition() bool {
	if o != nil && o.Position.IsSet() {
		return true
	}

	return false
}

// SetPosition gets a reference to the given NullableString and assigns it to the Position field.
func (o *EventConsumerDtoAllOf) SetPosition(v string) {
	o.Position.Set(&v)
}
// SetPositionNil sets the value for Position to be an explicit nil
func (o *EventConsumerDtoAllOf) SetPositionNil() {
	o.Position.Set(nil)
}

// UnsetPosition ensures that no value is present for Position, not even an explicit nil
func (o *EventConsumerDtoAllOf) UnsetPosition() {
	o.Position.Unset()
}

func (o EventConsumerDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsStopped) {
		toSerialize["isStopped"] = o.IsStopped
	}
	if !isNil(o.IsResetting) {
		toSerialize["isResetting"] = o.IsResetting
	}
	if !isNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.Position.IsSet() {
		toSerialize["position"] = o.Position.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEventConsumerDtoAllOf struct {
	value *EventConsumerDtoAllOf
	isSet bool
}

func (v NullableEventConsumerDtoAllOf) Get() *EventConsumerDtoAllOf {
	return v.value
}

func (v *NullableEventConsumerDtoAllOf) Set(val *EventConsumerDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEventConsumerDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEventConsumerDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventConsumerDtoAllOf(val *EventConsumerDtoAllOf) *NullableEventConsumerDtoAllOf {
	return &NullableEventConsumerDtoAllOf{value: val, isSet: true}
}

func (v NullableEventConsumerDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventConsumerDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


