/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// FeaturesDto struct for FeaturesDto
type FeaturesDto struct {
	// The latest features.
	Features []FeatureDto `json:"features"`
	// The recent version.
	Version *int32 `json:"version,omitempty"`
}

// NewFeaturesDto instantiates a new FeaturesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeaturesDto(features []FeatureDto) *FeaturesDto {
	this := FeaturesDto{}
	this.Features = features
	return &this
}

// NewFeaturesDtoWithDefaults instantiates a new FeaturesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeaturesDtoWithDefaults() *FeaturesDto {
	this := FeaturesDto{}
	return &this
}

// GetFeatures returns the Features field value
func (o *FeaturesDto) GetFeatures() []FeatureDto {
	if o == nil {
		var ret []FeatureDto
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *FeaturesDto) GetFeaturesOk() ([]FeatureDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *FeaturesDto) SetFeatures(v []FeatureDto) {
	o.Features = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FeaturesDto) GetVersion() int32 {
	if o == nil || isNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeaturesDto) GetVersionOk() (*int32, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FeaturesDto) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *FeaturesDto) SetVersion(v int32) {
	o.Version = &v
}

func (o FeaturesDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["features"] = o.Features
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableFeaturesDto struct {
	value *FeaturesDto
	isSet bool
}

func (v NullableFeaturesDto) Get() *FeaturesDto {
	return v.value
}

func (v *NullableFeaturesDto) Set(val *FeaturesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFeaturesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFeaturesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeaturesDto(val *FeaturesDto) *NullableFeaturesDto {
	return &NullableFeaturesDto{value: val, isSet: true}
}

func (v NullableFeaturesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeaturesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


