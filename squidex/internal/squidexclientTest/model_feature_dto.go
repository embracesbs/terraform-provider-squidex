/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// FeatureDto struct for FeatureDto
type FeatureDto struct {
	// The name of the feature.
	Name string `json:"name"`
	// The description text.
	Text string `json:"text"`
}

// NewFeatureDto instantiates a new FeatureDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureDto(name string, text string) *FeatureDto {
	this := FeatureDto{}
	this.Name = name
	this.Text = text
	return &this
}

// NewFeatureDtoWithDefaults instantiates a new FeatureDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureDtoWithDefaults() *FeatureDto {
	this := FeatureDto{}
	return &this
}

// GetName returns the Name field value
func (o *FeatureDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeatureDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeatureDto) SetName(v string) {
	o.Name = v
}

// GetText returns the Text field value
func (o *FeatureDto) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *FeatureDto) GetTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *FeatureDto) SetText(v string) {
	o.Text = v
}

func (o FeatureDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableFeatureDto struct {
	value *FeatureDto
	isSet bool
}

func (v NullableFeatureDto) Get() *FeatureDto {
	return v.value
}

func (v *NullableFeatureDto) Set(val *FeatureDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureDto(val *FeatureDto) *NullableFeatureDto {
	return &NullableFeatureDto{value: val, isSet: true}
}

func (v NullableFeatureDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


