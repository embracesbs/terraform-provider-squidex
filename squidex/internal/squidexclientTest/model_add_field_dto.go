/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// AddFieldDto struct for AddFieldDto
type AddFieldDto struct {
	// The name of the field. Must be unique within the schema.
	Name string `json:"name"`
	// Determines the optional partitioning of the field.
	Partitioning NullableString `json:"partitioning,omitempty"`
	Properties FieldPropertiesDto `json:"properties"`
}

// NewAddFieldDto instantiates a new AddFieldDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddFieldDto(name string, properties FieldPropertiesDto) *AddFieldDto {
	this := AddFieldDto{}
	this.Name = name
	this.Properties = properties
	return &this
}

// NewAddFieldDtoWithDefaults instantiates a new AddFieldDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddFieldDtoWithDefaults() *AddFieldDto {
	this := AddFieldDto{}
	return &this
}

// GetName returns the Name field value
func (o *AddFieldDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddFieldDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddFieldDto) SetName(v string) {
	o.Name = v
}

// GetPartitioning returns the Partitioning field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddFieldDto) GetPartitioning() string {
	if o == nil || isNil(o.Partitioning.Get()) {
		var ret string
		return ret
	}
	return *o.Partitioning.Get()
}

// GetPartitioningOk returns a tuple with the Partitioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddFieldDto) GetPartitioningOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Partitioning.Get(), o.Partitioning.IsSet()
}

// HasPartitioning returns a boolean if a field has been set.
func (o *AddFieldDto) HasPartitioning() bool {
	if o != nil && o.Partitioning.IsSet() {
		return true
	}

	return false
}

// SetPartitioning gets a reference to the given NullableString and assigns it to the Partitioning field.
func (o *AddFieldDto) SetPartitioning(v string) {
	o.Partitioning.Set(&v)
}
// SetPartitioningNil sets the value for Partitioning to be an explicit nil
func (o *AddFieldDto) SetPartitioningNil() {
	o.Partitioning.Set(nil)
}

// UnsetPartitioning ensures that no value is present for Partitioning, not even an explicit nil
func (o *AddFieldDto) UnsetPartitioning() {
	o.Partitioning.Unset()
}

// GetProperties returns the Properties field value
func (o *AddFieldDto) GetProperties() FieldPropertiesDto {
	if o == nil {
		var ret FieldPropertiesDto
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *AddFieldDto) GetPropertiesOk() (*FieldPropertiesDto, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *AddFieldDto) SetProperties(v FieldPropertiesDto) {
	o.Properties = v
}

func (o AddFieldDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Partitioning.IsSet() {
		toSerialize["partitioning"] = o.Partitioning.Get()
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableAddFieldDto struct {
	value *AddFieldDto
	isSet bool
}

func (v NullableAddFieldDto) Get() *AddFieldDto {
	return v.value
}

func (v *NullableAddFieldDto) Set(val *AddFieldDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAddFieldDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAddFieldDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddFieldDto(val *AddFieldDto) *NullableAddFieldDto {
	return &NullableAddFieldDto{value: val, isSet: true}
}

func (v NullableAddFieldDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddFieldDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


