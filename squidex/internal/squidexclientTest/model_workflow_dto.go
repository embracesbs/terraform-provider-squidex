/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// WorkflowDto struct for WorkflowDto
type WorkflowDto struct {
	// The links.
	Links map[string]ResourceLink `json:"_links"`
	// The workflow id.
	Id *string `json:"id,omitempty"`
	// The name of the workflow.
	Name NullableString `json:"name,omitempty"`
	// The workflow steps.
	Steps map[string]WorkflowStepDto `json:"steps"`
	// The schema ids.
	SchemaIds []string `json:"schemaIds,omitempty"`
	// The initial step.
	Initial *string `json:"initial,omitempty"`
}

// NewWorkflowDto instantiates a new WorkflowDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowDto(links map[string]ResourceLink, steps map[string]WorkflowStepDto) *WorkflowDto {
	this := WorkflowDto{}
	this.Links = links
	this.Steps = steps
	return &this
}

// NewWorkflowDtoWithDefaults instantiates a new WorkflowDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowDtoWithDefaults() *WorkflowDto {
	this := WorkflowDto{}
	return &this
}

// GetLinks returns the Links field value
func (o *WorkflowDto) GetLinks() map[string]ResourceLink {
	if o == nil {
		var ret map[string]ResourceLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *WorkflowDto) GetLinksOk() (*map[string]ResourceLink, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *WorkflowDto) SetLinks(v map[string]ResourceLink) {
	o.Links = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowDto) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowDto) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowDto) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowDto) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowDto) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *WorkflowDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *WorkflowDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *WorkflowDto) UnsetName() {
	o.Name.Unset()
}

// GetSteps returns the Steps field value
func (o *WorkflowDto) GetSteps() map[string]WorkflowStepDto {
	if o == nil {
		var ret map[string]WorkflowStepDto
		return ret
	}

	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value
// and a boolean to check if the value has been set.
func (o *WorkflowDto) GetStepsOk() (*map[string]WorkflowStepDto, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Steps, true
}

// SetSteps sets field value
func (o *WorkflowDto) SetSteps(v map[string]WorkflowStepDto) {
	o.Steps = v
}

// GetSchemaIds returns the SchemaIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowDto) GetSchemaIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SchemaIds
}

// GetSchemaIdsOk returns a tuple with the SchemaIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowDto) GetSchemaIdsOk() ([]string, bool) {
	if o == nil || isNil(o.SchemaIds) {
    return nil, false
	}
	return o.SchemaIds, true
}

// HasSchemaIds returns a boolean if a field has been set.
func (o *WorkflowDto) HasSchemaIds() bool {
	if o != nil && isNil(o.SchemaIds) {
		return true
	}

	return false
}

// SetSchemaIds gets a reference to the given []string and assigns it to the SchemaIds field.
func (o *WorkflowDto) SetSchemaIds(v []string) {
	o.SchemaIds = v
}

// GetInitial returns the Initial field value if set, zero value otherwise.
func (o *WorkflowDto) GetInitial() string {
	if o == nil || isNil(o.Initial) {
		var ret string
		return ret
	}
	return *o.Initial
}

// GetInitialOk returns a tuple with the Initial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowDto) GetInitialOk() (*string, bool) {
	if o == nil || isNil(o.Initial) {
    return nil, false
	}
	return o.Initial, true
}

// HasInitial returns a boolean if a field has been set.
func (o *WorkflowDto) HasInitial() bool {
	if o != nil && !isNil(o.Initial) {
		return true
	}

	return false
}

// SetInitial gets a reference to the given string and assigns it to the Initial field.
func (o *WorkflowDto) SetInitial(v string) {
	o.Initial = &v
}

func (o WorkflowDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_links"] = o.Links
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["steps"] = o.Steps
	}
	if o.SchemaIds != nil {
		toSerialize["schemaIds"] = o.SchemaIds
	}
	if !isNil(o.Initial) {
		toSerialize["initial"] = o.Initial
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowDto struct {
	value *WorkflowDto
	isSet bool
}

func (v NullableWorkflowDto) Get() *WorkflowDto {
	return v.value
}

func (v *NullableWorkflowDto) Set(val *WorkflowDto) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowDto) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowDto(val *WorkflowDto) *NullableWorkflowDto {
	return &NullableWorkflowDto{value: val, isSet: true}
}

func (v NullableWorkflowDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


