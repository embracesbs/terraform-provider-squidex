/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// AnnotateAssetDto struct for AnnotateAssetDto
type AnnotateAssetDto struct {
	// The new name of the asset.
	FileName NullableString `json:"fileName,omitempty"`
	// The new slug of the asset.
	Slug NullableString `json:"slug,omitempty"`
	// True, when the asset is not public.
	IsProtected NullableBool `json:"isProtected,omitempty"`
	// The new asset tags.
	Tags []string `json:"tags,omitempty"`
	// The asset metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewAnnotateAssetDto instantiates a new AnnotateAssetDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnotateAssetDto() *AnnotateAssetDto {
	this := AnnotateAssetDto{}
	return &this
}

// NewAnnotateAssetDtoWithDefaults instantiates a new AnnotateAssetDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnotateAssetDtoWithDefaults() *AnnotateAssetDto {
	this := AnnotateAssetDto{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnnotateAssetDto) GetFileName() string {
	if o == nil || isNil(o.FileName.Get()) {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnnotateAssetDto) GetFileNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *AnnotateAssetDto) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *AnnotateAssetDto) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *AnnotateAssetDto) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *AnnotateAssetDto) UnsetFileName() {
	o.FileName.Unset()
}

// GetSlug returns the Slug field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnnotateAssetDto) GetSlug() string {
	if o == nil || isNil(o.Slug.Get()) {
		var ret string
		return ret
	}
	return *o.Slug.Get()
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnnotateAssetDto) GetSlugOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Slug.Get(), o.Slug.IsSet()
}

// HasSlug returns a boolean if a field has been set.
func (o *AnnotateAssetDto) HasSlug() bool {
	if o != nil && o.Slug.IsSet() {
		return true
	}

	return false
}

// SetSlug gets a reference to the given NullableString and assigns it to the Slug field.
func (o *AnnotateAssetDto) SetSlug(v string) {
	o.Slug.Set(&v)
}
// SetSlugNil sets the value for Slug to be an explicit nil
func (o *AnnotateAssetDto) SetSlugNil() {
	o.Slug.Set(nil)
}

// UnsetSlug ensures that no value is present for Slug, not even an explicit nil
func (o *AnnotateAssetDto) UnsetSlug() {
	o.Slug.Unset()
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnnotateAssetDto) GetIsProtected() bool {
	if o == nil || isNil(o.IsProtected.Get()) {
		var ret bool
		return ret
	}
	return *o.IsProtected.Get()
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnnotateAssetDto) GetIsProtectedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IsProtected.Get(), o.IsProtected.IsSet()
}

// HasIsProtected returns a boolean if a field has been set.
func (o *AnnotateAssetDto) HasIsProtected() bool {
	if o != nil && o.IsProtected.IsSet() {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given NullableBool and assigns it to the IsProtected field.
func (o *AnnotateAssetDto) SetIsProtected(v bool) {
	o.IsProtected.Set(&v)
}
// SetIsProtectedNil sets the value for IsProtected to be an explicit nil
func (o *AnnotateAssetDto) SetIsProtectedNil() {
	o.IsProtected.Set(nil)
}

// UnsetIsProtected ensures that no value is present for IsProtected, not even an explicit nil
func (o *AnnotateAssetDto) UnsetIsProtected() {
	o.IsProtected.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnnotateAssetDto) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnnotateAssetDto) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AnnotateAssetDto) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *AnnotateAssetDto) SetTags(v []string) {
	o.Tags = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnnotateAssetDto) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnnotateAssetDto) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Metadata) {
    return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AnnotateAssetDto) HasMetadata() bool {
	if o != nil && isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *AnnotateAssetDto) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o AnnotateAssetDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileName.IsSet() {
		toSerialize["fileName"] = o.FileName.Get()
	}
	if o.Slug.IsSet() {
		toSerialize["slug"] = o.Slug.Get()
	}
	if o.IsProtected.IsSet() {
		toSerialize["isProtected"] = o.IsProtected.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableAnnotateAssetDto struct {
	value *AnnotateAssetDto
	isSet bool
}

func (v NullableAnnotateAssetDto) Get() *AnnotateAssetDto {
	return v.value
}

func (v *NullableAnnotateAssetDto) Set(val *AnnotateAssetDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotateAssetDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotateAssetDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotateAssetDto(val *AnnotateAssetDto) *NullableAnnotateAssetDto {
	return &NullableAnnotateAssetDto{value: val, isSet: true}
}

func (v NullableAnnotateAssetDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotateAssetDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


