/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// UpdateRuleDto struct for UpdateRuleDto
type UpdateRuleDto struct {
	// Optional rule name.
	Name NullableString `json:"name,omitempty"`
	Trigger *RuleTriggerDto `json:"trigger,omitempty"`
	Action *RuleAction `json:"action,omitempty"`
	// Enable or disable the rule.
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
}

// NewUpdateRuleDto instantiates a new UpdateRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRuleDto() *UpdateRuleDto {
	this := UpdateRuleDto{}
	return &this
}

// NewUpdateRuleDtoWithDefaults instantiates a new UpdateRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRuleDtoWithDefaults() *UpdateRuleDto {
	this := UpdateRuleDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateRuleDto) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRuleDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateRuleDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateRuleDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateRuleDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateRuleDto) UnsetName() {
	o.Name.Unset()
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *UpdateRuleDto) GetTrigger() RuleTriggerDto {
	if o == nil || isNil(o.Trigger) {
		var ret RuleTriggerDto
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRuleDto) GetTriggerOk() (*RuleTriggerDto, bool) {
	if o == nil || isNil(o.Trigger) {
    return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *UpdateRuleDto) HasTrigger() bool {
	if o != nil && !isNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given RuleTriggerDto and assigns it to the Trigger field.
func (o *UpdateRuleDto) SetTrigger(v RuleTriggerDto) {
	o.Trigger = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *UpdateRuleDto) GetAction() RuleAction {
	if o == nil || isNil(o.Action) {
		var ret RuleAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRuleDto) GetActionOk() (*RuleAction, bool) {
	if o == nil || isNil(o.Action) {
    return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *UpdateRuleDto) HasAction() bool {
	if o != nil && !isNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given RuleAction and assigns it to the Action field.
func (o *UpdateRuleDto) SetAction(v RuleAction) {
	o.Action = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateRuleDto) GetIsEnabled() bool {
	if o == nil || isNil(o.IsEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRuleDto) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *UpdateRuleDto) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *UpdateRuleDto) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *UpdateRuleDto) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *UpdateRuleDto) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

func (o UpdateRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !isNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !isNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateRuleDto struct {
	value *UpdateRuleDto
	isSet bool
}

func (v NullableUpdateRuleDto) Get() *UpdateRuleDto {
	return v.value
}

func (v *NullableUpdateRuleDto) Set(val *UpdateRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRuleDto(val *UpdateRuleDto) *NullableUpdateRuleDto {
	return &NullableUpdateRuleDto{value: val, isSet: true}
}

func (v NullableUpdateRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


