/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StorageUsagePerDateDto struct for StorageUsagePerDateDto
type StorageUsagePerDateDto struct {
	// The date when the usage was tracked.
	Date *string `json:"date,omitempty"`
	// The number of assets.
	TotalCount *int64 `json:"totalCount,omitempty"`
	// The size in bytes.
	TotalSize *int64 `json:"totalSize,omitempty"`
}

// NewStorageUsagePerDateDto instantiates a new StorageUsagePerDateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageUsagePerDateDto() *StorageUsagePerDateDto {
	this := StorageUsagePerDateDto{}
	return &this
}

// NewStorageUsagePerDateDtoWithDefaults instantiates a new StorageUsagePerDateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageUsagePerDateDtoWithDefaults() *StorageUsagePerDateDto {
	this := StorageUsagePerDateDto{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *StorageUsagePerDateDto) GetDate() string {
	if o == nil || isNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageUsagePerDateDto) GetDateOk() (*string, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *StorageUsagePerDateDto) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *StorageUsagePerDateDto) SetDate(v string) {
	o.Date = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *StorageUsagePerDateDto) GetTotalCount() int64 {
	if o == nil || isNil(o.TotalCount) {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageUsagePerDateDto) GetTotalCountOk() (*int64, bool) {
	if o == nil || isNil(o.TotalCount) {
    return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *StorageUsagePerDateDto) HasTotalCount() bool {
	if o != nil && !isNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *StorageUsagePerDateDto) SetTotalCount(v int64) {
	o.TotalCount = &v
}

// GetTotalSize returns the TotalSize field value if set, zero value otherwise.
func (o *StorageUsagePerDateDto) GetTotalSize() int64 {
	if o == nil || isNil(o.TotalSize) {
		var ret int64
		return ret
	}
	return *o.TotalSize
}

// GetTotalSizeOk returns a tuple with the TotalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageUsagePerDateDto) GetTotalSizeOk() (*int64, bool) {
	if o == nil || isNil(o.TotalSize) {
    return nil, false
	}
	return o.TotalSize, true
}

// HasTotalSize returns a boolean if a field has been set.
func (o *StorageUsagePerDateDto) HasTotalSize() bool {
	if o != nil && !isNil(o.TotalSize) {
		return true
	}

	return false
}

// SetTotalSize gets a reference to the given int64 and assigns it to the TotalSize field.
func (o *StorageUsagePerDateDto) SetTotalSize(v int64) {
	o.TotalSize = &v
}

func (o StorageUsagePerDateDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	if !isNil(o.TotalSize) {
		toSerialize["totalSize"] = o.TotalSize
	}
	return json.Marshal(toSerialize)
}

type NullableStorageUsagePerDateDto struct {
	value *StorageUsagePerDateDto
	isSet bool
}

func (v NullableStorageUsagePerDateDto) Get() *StorageUsagePerDateDto {
	return v.value
}

func (v *NullableStorageUsagePerDateDto) Set(val *StorageUsagePerDateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageUsagePerDateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageUsagePerDateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageUsagePerDateDto(val *StorageUsagePerDateDto) *NullableStorageUsagePerDateDto {
	return &NullableStorageUsagePerDateDto{value: val, isSet: true}
}

func (v NullableStorageUsagePerDateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageUsagePerDateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


