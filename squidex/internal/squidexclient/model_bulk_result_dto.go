/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BulkResultDto struct for BulkResultDto
type BulkResultDto struct {
	Error *ErrorDto `json:"error,omitempty"`
	// The index of the bulk job where the result belongs to. The order can change.
	JobIndex *int32 `json:"jobIndex,omitempty"`
	// The id of the entity that has been handled successfully or not.
	Id NullableString `json:"id,omitempty"`
	// The id of the entity that has been handled successfully or not.
	// Deprecated
	ContentId NullableString `json:"contentId,omitempty"`
}

// NewBulkResultDto instantiates a new BulkResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkResultDto() *BulkResultDto {
	this := BulkResultDto{}
	return &this
}

// NewBulkResultDtoWithDefaults instantiates a new BulkResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkResultDtoWithDefaults() *BulkResultDto {
	this := BulkResultDto{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BulkResultDto) GetError() ErrorDto {
	if o == nil || isNil(o.Error) {
		var ret ErrorDto
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkResultDto) GetErrorOk() (*ErrorDto, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BulkResultDto) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorDto and assigns it to the Error field.
func (o *BulkResultDto) SetError(v ErrorDto) {
	o.Error = &v
}

// GetJobIndex returns the JobIndex field value if set, zero value otherwise.
func (o *BulkResultDto) GetJobIndex() int32 {
	if o == nil || isNil(o.JobIndex) {
		var ret int32
		return ret
	}
	return *o.JobIndex
}

// GetJobIndexOk returns a tuple with the JobIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkResultDto) GetJobIndexOk() (*int32, bool) {
	if o == nil || isNil(o.JobIndex) {
    return nil, false
	}
	return o.JobIndex, true
}

// HasJobIndex returns a boolean if a field has been set.
func (o *BulkResultDto) HasJobIndex() bool {
	if o != nil && !isNil(o.JobIndex) {
		return true
	}

	return false
}

// SetJobIndex gets a reference to the given int32 and assigns it to the JobIndex field.
func (o *BulkResultDto) SetJobIndex(v int32) {
	o.JobIndex = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BulkResultDto) GetId() string {
	if o == nil || isNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BulkResultDto) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *BulkResultDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *BulkResultDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *BulkResultDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *BulkResultDto) UnsetId() {
	o.Id.Unset()
}

// GetContentId returns the ContentId field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *BulkResultDto) GetContentId() string {
	if o == nil || isNil(o.ContentId.Get()) {
		var ret string
		return ret
	}
	return *o.ContentId.Get()
}

// GetContentIdOk returns a tuple with the ContentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *BulkResultDto) GetContentIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ContentId.Get(), o.ContentId.IsSet()
}

// HasContentId returns a boolean if a field has been set.
func (o *BulkResultDto) HasContentId() bool {
	if o != nil && o.ContentId.IsSet() {
		return true
	}

	return false
}

// SetContentId gets a reference to the given NullableString and assigns it to the ContentId field.
// Deprecated
func (o *BulkResultDto) SetContentId(v string) {
	o.ContentId.Set(&v)
}
// SetContentIdNil sets the value for ContentId to be an explicit nil
func (o *BulkResultDto) SetContentIdNil() {
	o.ContentId.Set(nil)
}

// UnsetContentId ensures that no value is present for ContentId, not even an explicit nil
func (o *BulkResultDto) UnsetContentId() {
	o.ContentId.Unset()
}

func (o BulkResultDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.JobIndex) {
		toSerialize["jobIndex"] = o.JobIndex
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ContentId.IsSet() {
		toSerialize["contentId"] = o.ContentId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBulkResultDto struct {
	value *BulkResultDto
	isSet bool
}

func (v NullableBulkResultDto) Get() *BulkResultDto {
	return v.value
}

func (v *NullableBulkResultDto) Set(val *BulkResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkResultDto(val *BulkResultDto) *NullableBulkResultDto {
	return &NullableBulkResultDto{value: val, isSet: true}
}

func (v NullableBulkResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


