/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceLink struct for ResourceLink
type ResourceLink struct {
	// The link url.
	Href string `json:"href"`
	// The link method.
	Method string `json:"method"`
	// Additional data about the link.
	Metadata NullableString `json:"metadata,omitempty"`
}

// NewResourceLink instantiates a new ResourceLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceLink(href string, method string) *ResourceLink {
	this := ResourceLink{}
	this.Href = href
	this.Method = method
	return &this
}

// NewResourceLinkWithDefaults instantiates a new ResourceLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceLinkWithDefaults() *ResourceLink {
	this := ResourceLink{}
	return &this
}

// GetHref returns the Href field value
func (o *ResourceLink) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *ResourceLink) GetHrefOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *ResourceLink) SetHref(v string) {
	o.Href = v
}

// GetMethod returns the Method field value
func (o *ResourceLink) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *ResourceLink) GetMethodOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *ResourceLink) SetMethod(v string) {
	o.Method = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceLink) GetMetadata() string {
	if o == nil || isNil(o.Metadata.Get()) {
		var ret string
		return ret
	}
	return *o.Metadata.Get()
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceLink) GetMetadataOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Metadata.Get(), o.Metadata.IsSet()
}

// HasMetadata returns a boolean if a field has been set.
func (o *ResourceLink) HasMetadata() bool {
	if o != nil && o.Metadata.IsSet() {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given NullableString and assigns it to the Metadata field.
func (o *ResourceLink) SetMetadata(v string) {
	o.Metadata.Set(&v)
}
// SetMetadataNil sets the value for Metadata to be an explicit nil
func (o *ResourceLink) SetMetadataNil() {
	o.Metadata.Set(nil)
}

// UnsetMetadata ensures that no value is present for Metadata, not even an explicit nil
func (o *ResourceLink) UnsetMetadata() {
	o.Metadata.Unset()
}

func (o ResourceLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["href"] = o.Href
	}
	if true {
		toSerialize["method"] = o.Method
	}
	if o.Metadata.IsSet() {
		toSerialize["metadata"] = o.Metadata.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableResourceLink struct {
	value *ResourceLink
	isSet bool
}

func (v NullableResourceLink) Get() *ResourceLink {
	return v.value
}

func (v *NullableResourceLink) Set(val *ResourceLink) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceLink) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceLink(val *ResourceLink) *NullableResourceLink {
	return &NullableResourceLink{value: val, isSet: true}
}

func (v NullableResourceLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


