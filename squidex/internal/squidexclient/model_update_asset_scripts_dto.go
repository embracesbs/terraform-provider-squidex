/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateAssetScriptsDto struct for UpdateAssetScriptsDto
type UpdateAssetScriptsDto struct {
	// The script that is executed when creating an asset.
	Create NullableString `json:"create,omitempty"`
	// The script that is executed when updating a content.
	Update NullableString `json:"update,omitempty"`
	// The script that is executed when annotating a content.
	Annotate NullableString `json:"annotate,omitempty"`
	// The script that is executed when moving a content.
	Move NullableString `json:"move,omitempty"`
	// The script that is executed when deleting a content.
	Delete NullableString `json:"delete,omitempty"`
}

// NewUpdateAssetScriptsDto instantiates a new UpdateAssetScriptsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAssetScriptsDto() *UpdateAssetScriptsDto {
	this := UpdateAssetScriptsDto{}
	return &this
}

// NewUpdateAssetScriptsDtoWithDefaults instantiates a new UpdateAssetScriptsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAssetScriptsDtoWithDefaults() *UpdateAssetScriptsDto {
	this := UpdateAssetScriptsDto{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAssetScriptsDto) GetCreate() string {
	if o == nil || isNil(o.Create.Get()) {
		var ret string
		return ret
	}
	return *o.Create.Get()
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAssetScriptsDto) GetCreateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Create.Get(), o.Create.IsSet()
}

// HasCreate returns a boolean if a field has been set.
func (o *UpdateAssetScriptsDto) HasCreate() bool {
	if o != nil && o.Create.IsSet() {
		return true
	}

	return false
}

// SetCreate gets a reference to the given NullableString and assigns it to the Create field.
func (o *UpdateAssetScriptsDto) SetCreate(v string) {
	o.Create.Set(&v)
}
// SetCreateNil sets the value for Create to be an explicit nil
func (o *UpdateAssetScriptsDto) SetCreateNil() {
	o.Create.Set(nil)
}

// UnsetCreate ensures that no value is present for Create, not even an explicit nil
func (o *UpdateAssetScriptsDto) UnsetCreate() {
	o.Create.Unset()
}

// GetUpdate returns the Update field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAssetScriptsDto) GetUpdate() string {
	if o == nil || isNil(o.Update.Get()) {
		var ret string
		return ret
	}
	return *o.Update.Get()
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAssetScriptsDto) GetUpdateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Update.Get(), o.Update.IsSet()
}

// HasUpdate returns a boolean if a field has been set.
func (o *UpdateAssetScriptsDto) HasUpdate() bool {
	if o != nil && o.Update.IsSet() {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given NullableString and assigns it to the Update field.
func (o *UpdateAssetScriptsDto) SetUpdate(v string) {
	o.Update.Set(&v)
}
// SetUpdateNil sets the value for Update to be an explicit nil
func (o *UpdateAssetScriptsDto) SetUpdateNil() {
	o.Update.Set(nil)
}

// UnsetUpdate ensures that no value is present for Update, not even an explicit nil
func (o *UpdateAssetScriptsDto) UnsetUpdate() {
	o.Update.Unset()
}

// GetAnnotate returns the Annotate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAssetScriptsDto) GetAnnotate() string {
	if o == nil || isNil(o.Annotate.Get()) {
		var ret string
		return ret
	}
	return *o.Annotate.Get()
}

// GetAnnotateOk returns a tuple with the Annotate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAssetScriptsDto) GetAnnotateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Annotate.Get(), o.Annotate.IsSet()
}

// HasAnnotate returns a boolean if a field has been set.
func (o *UpdateAssetScriptsDto) HasAnnotate() bool {
	if o != nil && o.Annotate.IsSet() {
		return true
	}

	return false
}

// SetAnnotate gets a reference to the given NullableString and assigns it to the Annotate field.
func (o *UpdateAssetScriptsDto) SetAnnotate(v string) {
	o.Annotate.Set(&v)
}
// SetAnnotateNil sets the value for Annotate to be an explicit nil
func (o *UpdateAssetScriptsDto) SetAnnotateNil() {
	o.Annotate.Set(nil)
}

// UnsetAnnotate ensures that no value is present for Annotate, not even an explicit nil
func (o *UpdateAssetScriptsDto) UnsetAnnotate() {
	o.Annotate.Unset()
}

// GetMove returns the Move field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAssetScriptsDto) GetMove() string {
	if o == nil || isNil(o.Move.Get()) {
		var ret string
		return ret
	}
	return *o.Move.Get()
}

// GetMoveOk returns a tuple with the Move field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAssetScriptsDto) GetMoveOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Move.Get(), o.Move.IsSet()
}

// HasMove returns a boolean if a field has been set.
func (o *UpdateAssetScriptsDto) HasMove() bool {
	if o != nil && o.Move.IsSet() {
		return true
	}

	return false
}

// SetMove gets a reference to the given NullableString and assigns it to the Move field.
func (o *UpdateAssetScriptsDto) SetMove(v string) {
	o.Move.Set(&v)
}
// SetMoveNil sets the value for Move to be an explicit nil
func (o *UpdateAssetScriptsDto) SetMoveNil() {
	o.Move.Set(nil)
}

// UnsetMove ensures that no value is present for Move, not even an explicit nil
func (o *UpdateAssetScriptsDto) UnsetMove() {
	o.Move.Unset()
}

// GetDelete returns the Delete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAssetScriptsDto) GetDelete() string {
	if o == nil || isNil(o.Delete.Get()) {
		var ret string
		return ret
	}
	return *o.Delete.Get()
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAssetScriptsDto) GetDeleteOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Delete.Get(), o.Delete.IsSet()
}

// HasDelete returns a boolean if a field has been set.
func (o *UpdateAssetScriptsDto) HasDelete() bool {
	if o != nil && o.Delete.IsSet() {
		return true
	}

	return false
}

// SetDelete gets a reference to the given NullableString and assigns it to the Delete field.
func (o *UpdateAssetScriptsDto) SetDelete(v string) {
	o.Delete.Set(&v)
}
// SetDeleteNil sets the value for Delete to be an explicit nil
func (o *UpdateAssetScriptsDto) SetDeleteNil() {
	o.Delete.Set(nil)
}

// UnsetDelete ensures that no value is present for Delete, not even an explicit nil
func (o *UpdateAssetScriptsDto) UnsetDelete() {
	o.Delete.Unset()
}

func (o UpdateAssetScriptsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Create.IsSet() {
		toSerialize["create"] = o.Create.Get()
	}
	if o.Update.IsSet() {
		toSerialize["update"] = o.Update.Get()
	}
	if o.Annotate.IsSet() {
		toSerialize["annotate"] = o.Annotate.Get()
	}
	if o.Move.IsSet() {
		toSerialize["move"] = o.Move.Get()
	}
	if o.Delete.IsSet() {
		toSerialize["delete"] = o.Delete.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAssetScriptsDto struct {
	value *UpdateAssetScriptsDto
	isSet bool
}

func (v NullableUpdateAssetScriptsDto) Get() *UpdateAssetScriptsDto {
	return v.value
}

func (v *NullableUpdateAssetScriptsDto) Set(val *UpdateAssetScriptsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAssetScriptsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAssetScriptsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAssetScriptsDto(val *UpdateAssetScriptsDto) *NullableUpdateAssetScriptsDto {
	return &NullableUpdateAssetScriptsDto{value: val, isSet: true}
}

func (v NullableUpdateAssetScriptsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAssetScriptsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


