/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScriptRuleActionDto struct for ScriptRuleActionDto
type ScriptRuleActionDto struct {
	RuleAction
	// The script to render.
	Script string `json:"script"`
}

// NewScriptRuleActionDto instantiates a new ScriptRuleActionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptRuleActionDto(script string, actionType NullableString) *ScriptRuleActionDto {
	this := ScriptRuleActionDto{}
	this.ActionType = actionType
	this.Script = script
	return &this
}

// NewScriptRuleActionDtoWithDefaults instantiates a new ScriptRuleActionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptRuleActionDtoWithDefaults() *ScriptRuleActionDto {
	this := ScriptRuleActionDto{}
	return &this
}

// GetScript returns the Script field value
func (o *ScriptRuleActionDto) GetScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Script
}

// GetScriptOk returns a tuple with the Script field value
// and a boolean to check if the value has been set.
func (o *ScriptRuleActionDto) GetScriptOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Script, true
}

// SetScript sets field value
func (o *ScriptRuleActionDto) SetScript(v string) {
	o.Script = v
}

func (o ScriptRuleActionDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedRuleAction, errRuleAction := json.Marshal(o.RuleAction)
	if errRuleAction != nil {
		return []byte{}, errRuleAction
	}
	errRuleAction = json.Unmarshal([]byte(serializedRuleAction), &toSerialize)
	if errRuleAction != nil {
		return []byte{}, errRuleAction
	}
	if true {
		toSerialize["script"] = o.Script
	}
	return json.Marshal(toSerialize)
}

type NullableScriptRuleActionDto struct {
	value *ScriptRuleActionDto
	isSet bool
}

func (v NullableScriptRuleActionDto) Get() *ScriptRuleActionDto {
	return v.value
}

func (v *NullableScriptRuleActionDto) Set(val *ScriptRuleActionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptRuleActionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptRuleActionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptRuleActionDto(val *ScriptRuleActionDto) *NullableScriptRuleActionDto {
	return &NullableScriptRuleActionDto{value: val, isSet: true}
}

func (v NullableScriptRuleActionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptRuleActionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


