/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateUserDto struct for CreateUserDto
type CreateUserDto struct {
	// The email of the user. Unique value.
	Email string `json:"email"`
	// The display name (usually first name and last name) of the user.
	DisplayName string `json:"displayName"`
	// The password of the user.
	Password string `json:"password"`
	// Additional permissions for the user.
	Permissions []string `json:"permissions"`
}

// NewCreateUserDto instantiates a new CreateUserDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserDto(email string, displayName string, password string, permissions []string) *CreateUserDto {
	this := CreateUserDto{}
	this.Email = email
	this.DisplayName = displayName
	this.Password = password
	this.Permissions = permissions
	return &this
}

// NewCreateUserDtoWithDefaults instantiates a new CreateUserDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserDtoWithDefaults() *CreateUserDto {
	this := CreateUserDto{}
	return &this
}

// GetEmail returns the Email field value
func (o *CreateUserDto) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateUserDto) GetEmailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateUserDto) SetEmail(v string) {
	o.Email = v
}

// GetDisplayName returns the DisplayName field value
func (o *CreateUserDto) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CreateUserDto) GetDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CreateUserDto) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetPassword returns the Password field value
func (o *CreateUserDto) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateUserDto) GetPasswordOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateUserDto) SetPassword(v string) {
	o.Password = v
}

// GetPermissions returns the Permissions field value
func (o *CreateUserDto) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *CreateUserDto) GetPermissionsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *CreateUserDto) SetPermissions(v []string) {
	o.Permissions = v
}

func (o CreateUserDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUserDto struct {
	value *CreateUserDto
	isSet bool
}

func (v NullableCreateUserDto) Get() *CreateUserDto {
	return v.value
}

func (v *NullableCreateUserDto) Set(val *CreateUserDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserDto(val *CreateUserDto) *NullableCreateUserDto {
	return &NullableCreateUserDto{value: val, isSet: true}
}

func (v NullableCreateUserDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


