/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContentsDto struct for ContentsDto
type ContentsDto struct {
	// The links.
	Links map[string]ResourceLink `json:"_links"`
	// The total number of content items.
	Total *int64 `json:"total,omitempty"`
	// The content items.
	Items []ContentDto `json:"items"`
	// The possible statuses.
	Statuses []StatusInfoDto `json:"statuses"`
}

// NewContentsDto instantiates a new ContentsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentsDto(links map[string]ResourceLink, items []ContentDto, statuses []StatusInfoDto) *ContentsDto {
	this := ContentsDto{}
	this.Links = links
	this.Items = items
	this.Statuses = statuses
	return &this
}

// NewContentsDtoWithDefaults instantiates a new ContentsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentsDtoWithDefaults() *ContentsDto {
	this := ContentsDto{}
	return &this
}

// GetLinks returns the Links field value
func (o *ContentsDto) GetLinks() map[string]ResourceLink {
	if o == nil {
		var ret map[string]ResourceLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ContentsDto) GetLinksOk() (*map[string]ResourceLink, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *ContentsDto) SetLinks(v map[string]ResourceLink) {
	o.Links = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ContentsDto) GetTotal() int64 {
	if o == nil || isNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentsDto) GetTotalOk() (*int64, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ContentsDto) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *ContentsDto) SetTotal(v int64) {
	o.Total = &v
}

// GetItems returns the Items field value
func (o *ContentsDto) GetItems() []ContentDto {
	if o == nil {
		var ret []ContentDto
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ContentsDto) GetItemsOk() ([]ContentDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ContentsDto) SetItems(v []ContentDto) {
	o.Items = v
}

// GetStatuses returns the Statuses field value
func (o *ContentsDto) GetStatuses() []StatusInfoDto {
	if o == nil {
		var ret []StatusInfoDto
		return ret
	}

	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value
// and a boolean to check if the value has been set.
func (o *ContentsDto) GetStatusesOk() ([]StatusInfoDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Statuses, true
}

// SetStatuses sets field value
func (o *ContentsDto) SetStatuses(v []StatusInfoDto) {
	o.Statuses = v
}

func (o ContentsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_links"] = o.Links
	}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["statuses"] = o.Statuses
	}
	return json.Marshal(toSerialize)
}

type NullableContentsDto struct {
	value *ContentsDto
	isSet bool
}

func (v NullableContentsDto) Get() *ContentsDto {
	return v.value
}

func (v *NullableContentsDto) Set(val *ContentsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableContentsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableContentsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentsDto(val *ContentsDto) *NullableContentsDto {
	return &NullableContentsDto{value: val, isSet: true}
}

func (v NullableContentsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


