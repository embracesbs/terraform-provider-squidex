/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// StringContentType 
type StringContentType string

// List of StringContentType
const (
	UNSPECIFIED StringContentType = "Unspecified"
	HTML StringContentType = "Html"
	MARKDOWN StringContentType = "Markdown"
)

// All allowed values of StringContentType enum
var AllowedStringContentTypeEnumValues = []StringContentType{
	"Unspecified",
	"Html",
	"Markdown",
}

func (v *StringContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StringContentType(value)
	for _, existing := range AllowedStringContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StringContentType", value)
}

// NewStringContentTypeFromValue returns a pointer to a valid StringContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStringContentTypeFromValue(v string) (*StringContentType, error) {
	ev := StringContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StringContentType: valid values are %v", v, AllowedStringContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StringContentType) IsValid() bool {
	for _, existing := range AllowedStringContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StringContentType value
func (v StringContentType) Ptr() *StringContentType {
	return &v
}

type NullableStringContentType struct {
	value *StringContentType
	isSet bool
}

func (v NullableStringContentType) Get() *StringContentType {
	return v.value
}

func (v *NullableStringContentType) Set(val *StringContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableStringContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableStringContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringContentType(val *StringContentType) *NullableStringContentType {
	return &NullableStringContentType{value: val, isSet: true}
}

func (v NullableStringContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

