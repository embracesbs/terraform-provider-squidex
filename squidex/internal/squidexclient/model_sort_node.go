/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SortNode struct for SortNode
type SortNode struct {
	Path []string `json:"path,omitempty"`
	Order *SortOrder `json:"order,omitempty"`
}

// NewSortNode instantiates a new SortNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSortNode() *SortNode {
	this := SortNode{}
	return &this
}

// NewSortNodeWithDefaults instantiates a new SortNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortNodeWithDefaults() *SortNode {
	this := SortNode{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *SortNode) GetPath() []string {
	if o == nil || isNil(o.Path) {
		var ret []string
		return ret
	}
	return o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortNode) GetPathOk() ([]string, bool) {
	if o == nil || isNil(o.Path) {
    return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *SortNode) HasPath() bool {
	if o != nil && !isNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given []string and assigns it to the Path field.
func (o *SortNode) SetPath(v []string) {
	o.Path = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *SortNode) GetOrder() SortOrder {
	if o == nil || isNil(o.Order) {
		var ret SortOrder
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortNode) GetOrderOk() (*SortOrder, bool) {
	if o == nil || isNil(o.Order) {
    return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *SortNode) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given SortOrder and assigns it to the Order field.
func (o *SortNode) SetOrder(v SortOrder) {
	o.Order = &v
}

func (o SortNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return json.Marshal(toSerialize)
}

type NullableSortNode struct {
	value *SortNode
	isSet bool
}

func (v NullableSortNode) Get() *SortNode {
	return v.value
}

func (v *NullableSortNode) Set(val *SortNode) {
	v.value = val
	v.isSet = true
}

func (v NullableSortNode) IsSet() bool {
	return v.isSet
}

func (v *NullableSortNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortNode(val *SortNode) *NullableSortNode {
	return &NullableSortNode{value: val, isSet: true}
}

func (v NullableSortNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


