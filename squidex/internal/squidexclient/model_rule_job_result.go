/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RuleJobResult 
type RuleJobResult string

// List of RuleJobResult
const (
	PENDING RuleJobResult = "Pending"
	SUCCESS RuleJobResult = "Success"
	RETRY RuleJobResult = "Retry"
	FAILED RuleJobResult = "Failed"
	CANCELLED RuleJobResult = "Cancelled"
)

// All allowed values of RuleJobResult enum
var AllowedRuleJobResultEnumValues = []RuleJobResult{
	"Pending",
	"Success",
	"Retry",
	"Failed",
	"Cancelled",
}

func (v *RuleJobResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleJobResult(value)
	for _, existing := range AllowedRuleJobResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleJobResult", value)
}

// NewRuleJobResultFromValue returns a pointer to a valid RuleJobResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleJobResultFromValue(v string) (*RuleJobResult, error) {
	ev := RuleJobResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleJobResult: valid values are %v", v, AllowedRuleJobResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleJobResult) IsValid() bool {
	for _, existing := range AllowedRuleJobResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleJobResult value
func (v RuleJobResult) Ptr() *RuleJobResult {
	return &v
}

type NullableRuleJobResult struct {
	value *RuleJobResult
	isSet bool
}

func (v NullableRuleJobResult) Get() *RuleJobResult {
	return v.value
}

func (v *NullableRuleJobResult) Set(val *RuleJobResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleJobResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleJobResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleJobResult(val *RuleJobResult) *NullableRuleJobResult {
	return &NullableRuleJobResult{value: val, isSet: true}
}

func (v NullableRuleJobResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleJobResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

