/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SearchResultType 
type SearchResultType string

// List of SearchResultType
const (
	ASSET SearchResultType = "Asset"
	CONTENT SearchResultType = "Content"
	DASHBOARD SearchResultType = "Dashboard"
	SETTING SearchResultType = "Setting"
	RULE SearchResultType = "Rule"
	SCHEMA SearchResultType = "Schema"
)

// All allowed values of SearchResultType enum
var AllowedSearchResultTypeEnumValues = []SearchResultType{
	"Asset",
	"Content",
	"Dashboard",
	"Setting",
	"Rule",
	"Schema",
}

func (v *SearchResultType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchResultType(value)
	for _, existing := range AllowedSearchResultTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchResultType", value)
}

// NewSearchResultTypeFromValue returns a pointer to a valid SearchResultType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchResultTypeFromValue(v string) (*SearchResultType, error) {
	ev := SearchResultType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchResultType: valid values are %v", v, AllowedSearchResultTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchResultType) IsValid() bool {
	for _, existing := range AllowedSearchResultTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchResultType value
func (v SearchResultType) Ptr() *SearchResultType {
	return &v
}

type NullableSearchResultType struct {
	value *SearchResultType
	isSet bool
}

func (v NullableSearchResultType) Get() *SearchResultType {
	return v.value
}

func (v *NullableSearchResultType) Set(val *SearchResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultType(val *SearchResultType) *NullableSearchResultType {
	return &NullableSearchResultType{value: val, isSet: true}
}

func (v NullableSearchResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

