/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// SchemaDto struct for SchemaDto
type SchemaDto struct {
	// The links.
	Links map[string]ResourceLink `json:"_links"`
	// The id of the schema.
	Id *string `json:"id,omitempty"`
	// The user that has created the schema.
	CreatedBy string `json:"createdBy"`
	// The user that has updated the schema.
	LastModifiedBy string `json:"lastModifiedBy"`
	// The name of the schema. Unique within the app.
	Name string `json:"name"`
	Type *SchemaType `json:"type,omitempty"`
	// The name of the category.
	Category NullableString `json:"category,omitempty"`
	Properties SchemaPropertiesDto `json:"properties"`
	// Indicates if the schema is a singleton.
	// Deprecated
	IsSingleton *bool `json:"isSingleton,omitempty"`
	// Indicates if the schema is published.
	IsPublished *bool `json:"isPublished,omitempty"`
	// The date and time when the schema has been created.
	Created *time.Time `json:"created,omitempty"`
	// The date and time when the schema has been modified last.
	LastModified *time.Time `json:"lastModified,omitempty"`
	// The version of the schema.
	Version *int64 `json:"version,omitempty"`
	Scripts SchemaScriptsDto `json:"scripts"`
	// The preview Urls.
	PreviewUrls map[string]string `json:"previewUrls"`
	FieldsInLists []string `json:"fieldsInLists"`
	FieldsInReferences []string `json:"fieldsInReferences"`
	// The field rules.
	FieldRules []FieldRuleDto `json:"fieldRules,omitempty"`
	// The list of fields.
	Fields []FieldDto `json:"fields"`
}

// NewSchemaDto instantiates a new SchemaDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDto(links map[string]ResourceLink, createdBy string, lastModifiedBy string, name string, properties SchemaPropertiesDto, scripts SchemaScriptsDto, previewUrls map[string]string, fieldsInLists []string, fieldsInReferences []string, fields []FieldDto) *SchemaDto {
	this := SchemaDto{}
	this.Links = links
	this.CreatedBy = createdBy
	this.LastModifiedBy = lastModifiedBy
	this.Name = name
	this.Properties = properties
	this.Scripts = scripts
	this.PreviewUrls = previewUrls
	this.FieldsInLists = fieldsInLists
	this.FieldsInReferences = fieldsInReferences
	this.Fields = fields
	return &this
}

// NewSchemaDtoWithDefaults instantiates a new SchemaDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDtoWithDefaults() *SchemaDto {
	this := SchemaDto{}
	return &this
}

// GetLinks returns the Links field value
func (o *SchemaDto) GetLinks() map[string]ResourceLink {
	if o == nil {
		var ret map[string]ResourceLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetLinksOk() (*map[string]ResourceLink, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *SchemaDto) SetLinks(v map[string]ResourceLink) {
	o.Links = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaDto) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaDto) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaDto) SetId(v string) {
	o.Id = &v
}

// GetCreatedBy returns the CreatedBy field value
func (o *SchemaDto) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetCreatedByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *SchemaDto) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetLastModifiedBy returns the LastModifiedBy field value
func (o *SchemaDto) GetLastModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModifiedBy
}

// GetLastModifiedByOk returns a tuple with the LastModifiedBy field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetLastModifiedByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastModifiedBy, true
}

// SetLastModifiedBy sets field value
func (o *SchemaDto) SetLastModifiedBy(v string) {
	o.LastModifiedBy = v
}

// GetName returns the Name field value
func (o *SchemaDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SchemaDto) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SchemaDto) GetType() SchemaType {
	if o == nil || isNil(o.Type) {
		var ret SchemaType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetTypeOk() (*SchemaType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SchemaDto) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SchemaType and assigns it to the Type field.
func (o *SchemaDto) SetType(v SchemaType) {
	o.Type = &v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaDto) GetCategory() string {
	if o == nil || isNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaDto) GetCategoryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *SchemaDto) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *SchemaDto) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *SchemaDto) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *SchemaDto) UnsetCategory() {
	o.Category.Unset()
}

// GetProperties returns the Properties field value
func (o *SchemaDto) GetProperties() SchemaPropertiesDto {
	if o == nil {
		var ret SchemaPropertiesDto
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetPropertiesOk() (*SchemaPropertiesDto, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *SchemaDto) SetProperties(v SchemaPropertiesDto) {
	o.Properties = v
}

// GetIsSingleton returns the IsSingleton field value if set, zero value otherwise.
// Deprecated
func (o *SchemaDto) GetIsSingleton() bool {
	if o == nil || isNil(o.IsSingleton) {
		var ret bool
		return ret
	}
	return *o.IsSingleton
}

// GetIsSingletonOk returns a tuple with the IsSingleton field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SchemaDto) GetIsSingletonOk() (*bool, bool) {
	if o == nil || isNil(o.IsSingleton) {
    return nil, false
	}
	return o.IsSingleton, true
}

// HasIsSingleton returns a boolean if a field has been set.
func (o *SchemaDto) HasIsSingleton() bool {
	if o != nil && !isNil(o.IsSingleton) {
		return true
	}

	return false
}

// SetIsSingleton gets a reference to the given bool and assigns it to the IsSingleton field.
// Deprecated
func (o *SchemaDto) SetIsSingleton(v bool) {
	o.IsSingleton = &v
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *SchemaDto) GetIsPublished() bool {
	if o == nil || isNil(o.IsPublished) {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetIsPublishedOk() (*bool, bool) {
	if o == nil || isNil(o.IsPublished) {
    return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *SchemaDto) HasIsPublished() bool {
	if o != nil && !isNil(o.IsPublished) {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *SchemaDto) SetIsPublished(v bool) {
	o.IsPublished = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SchemaDto) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
    return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SchemaDto) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *SchemaDto) SetCreated(v time.Time) {
	o.Created = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *SchemaDto) GetLastModified() time.Time {
	if o == nil || isNil(o.LastModified) {
		var ret time.Time
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastModified) {
    return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *SchemaDto) HasLastModified() bool {
	if o != nil && !isNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given time.Time and assigns it to the LastModified field.
func (o *SchemaDto) SetLastModified(v time.Time) {
	o.LastModified = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SchemaDto) GetVersion() int64 {
	if o == nil || isNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetVersionOk() (*int64, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SchemaDto) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SchemaDto) SetVersion(v int64) {
	o.Version = &v
}

// GetScripts returns the Scripts field value
func (o *SchemaDto) GetScripts() SchemaScriptsDto {
	if o == nil {
		var ret SchemaScriptsDto
		return ret
	}

	return o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetScriptsOk() (*SchemaScriptsDto, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Scripts, true
}

// SetScripts sets field value
func (o *SchemaDto) SetScripts(v SchemaScriptsDto) {
	o.Scripts = v
}

// GetPreviewUrls returns the PreviewUrls field value
func (o *SchemaDto) GetPreviewUrls() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.PreviewUrls
}

// GetPreviewUrlsOk returns a tuple with the PreviewUrls field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetPreviewUrlsOk() (*map[string]string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PreviewUrls, true
}

// SetPreviewUrls sets field value
func (o *SchemaDto) SetPreviewUrls(v map[string]string) {
	o.PreviewUrls = v
}

// GetFieldsInLists returns the FieldsInLists field value
func (o *SchemaDto) GetFieldsInLists() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FieldsInLists
}

// GetFieldsInListsOk returns a tuple with the FieldsInLists field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetFieldsInListsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FieldsInLists, true
}

// SetFieldsInLists sets field value
func (o *SchemaDto) SetFieldsInLists(v []string) {
	o.FieldsInLists = v
}

// GetFieldsInReferences returns the FieldsInReferences field value
func (o *SchemaDto) GetFieldsInReferences() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FieldsInReferences
}

// GetFieldsInReferencesOk returns a tuple with the FieldsInReferences field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetFieldsInReferencesOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FieldsInReferences, true
}

// SetFieldsInReferences sets field value
func (o *SchemaDto) SetFieldsInReferences(v []string) {
	o.FieldsInReferences = v
}

// GetFieldRules returns the FieldRules field value if set, zero value otherwise.
func (o *SchemaDto) GetFieldRules() []FieldRuleDto {
	if o == nil || isNil(o.FieldRules) {
		var ret []FieldRuleDto
		return ret
	}
	return o.FieldRules
}

// GetFieldRulesOk returns a tuple with the FieldRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetFieldRulesOk() ([]FieldRuleDto, bool) {
	if o == nil || isNil(o.FieldRules) {
    return nil, false
	}
	return o.FieldRules, true
}

// HasFieldRules returns a boolean if a field has been set.
func (o *SchemaDto) HasFieldRules() bool {
	if o != nil && !isNil(o.FieldRules) {
		return true
	}

	return false
}

// SetFieldRules gets a reference to the given []FieldRuleDto and assigns it to the FieldRules field.
func (o *SchemaDto) SetFieldRules(v []FieldRuleDto) {
	o.FieldRules = v
}

// GetFields returns the Fields field value
func (o *SchemaDto) GetFields() []FieldDto {
	if o == nil {
		var ret []FieldDto
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *SchemaDto) GetFieldsOk() ([]FieldDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *SchemaDto) SetFields(v []FieldDto) {
	o.Fields = v
}

func (o SchemaDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_links"] = o.Links
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if true {
		toSerialize["lastModifiedBy"] = o.LastModifiedBy
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	if !isNil(o.IsSingleton) {
		toSerialize["isSingleton"] = o.IsSingleton
	}
	if !isNil(o.IsPublished) {
		toSerialize["isPublished"] = o.IsPublished
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["scripts"] = o.Scripts
	}
	if true {
		toSerialize["previewUrls"] = o.PreviewUrls
	}
	if true {
		toSerialize["fieldsInLists"] = o.FieldsInLists
	}
	if true {
		toSerialize["fieldsInReferences"] = o.FieldsInReferences
	}
	if !isNil(o.FieldRules) {
		toSerialize["fieldRules"] = o.FieldRules
	}
	if true {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaDto struct {
	value *SchemaDto
	isSet bool
}

func (v NullableSchemaDto) Get() *SchemaDto {
	return v.value
}

func (v *NullableSchemaDto) Set(val *SchemaDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDto(val *SchemaDto) *NullableSchemaDto {
	return &NullableSchemaDto{value: val, isSet: true}
}

func (v NullableSchemaDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


