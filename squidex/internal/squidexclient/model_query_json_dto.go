/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QueryJsonDto struct for QueryJsonDto
type QueryJsonDto struct {
	Filter interface{} `json:"filter,omitempty"`
	FullText NullableString `json:"fullText,omitempty"`
	Skip *int64 `json:"skip,omitempty"`
	Take *int64 `json:"take,omitempty"`
	Top *int64 `json:"top,omitempty"`
	Sort []SortNode `json:"sort,omitempty"`
}

// NewQueryJsonDto instantiates a new QueryJsonDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryJsonDto() *QueryJsonDto {
	this := QueryJsonDto{}
	return &this
}

// NewQueryJsonDtoWithDefaults instantiates a new QueryJsonDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryJsonDtoWithDefaults() *QueryJsonDto {
	this := QueryJsonDto{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryJsonDto) GetFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryJsonDto) GetFilterOk() (*interface{}, bool) {
	if o == nil || isNil(o.Filter) {
    return nil, false
	}
	return &o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *QueryJsonDto) HasFilter() bool {
	if o != nil && isNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given interface{} and assigns it to the Filter field.
func (o *QueryJsonDto) SetFilter(v interface{}) {
	o.Filter = v
}

// GetFullText returns the FullText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryJsonDto) GetFullText() string {
	if o == nil || isNil(o.FullText.Get()) {
		var ret string
		return ret
	}
	return *o.FullText.Get()
}

// GetFullTextOk returns a tuple with the FullText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryJsonDto) GetFullTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FullText.Get(), o.FullText.IsSet()
}

// HasFullText returns a boolean if a field has been set.
func (o *QueryJsonDto) HasFullText() bool {
	if o != nil && o.FullText.IsSet() {
		return true
	}

	return false
}

// SetFullText gets a reference to the given NullableString and assigns it to the FullText field.
func (o *QueryJsonDto) SetFullText(v string) {
	o.FullText.Set(&v)
}
// SetFullTextNil sets the value for FullText to be an explicit nil
func (o *QueryJsonDto) SetFullTextNil() {
	o.FullText.Set(nil)
}

// UnsetFullText ensures that no value is present for FullText, not even an explicit nil
func (o *QueryJsonDto) UnsetFullText() {
	o.FullText.Unset()
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *QueryJsonDto) GetSkip() int64 {
	if o == nil || isNil(o.Skip) {
		var ret int64
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJsonDto) GetSkipOk() (*int64, bool) {
	if o == nil || isNil(o.Skip) {
    return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *QueryJsonDto) HasSkip() bool {
	if o != nil && !isNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int64 and assigns it to the Skip field.
func (o *QueryJsonDto) SetSkip(v int64) {
	o.Skip = &v
}

// GetTake returns the Take field value if set, zero value otherwise.
func (o *QueryJsonDto) GetTake() int64 {
	if o == nil || isNil(o.Take) {
		var ret int64
		return ret
	}
	return *o.Take
}

// GetTakeOk returns a tuple with the Take field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJsonDto) GetTakeOk() (*int64, bool) {
	if o == nil || isNil(o.Take) {
    return nil, false
	}
	return o.Take, true
}

// HasTake returns a boolean if a field has been set.
func (o *QueryJsonDto) HasTake() bool {
	if o != nil && !isNil(o.Take) {
		return true
	}

	return false
}

// SetTake gets a reference to the given int64 and assigns it to the Take field.
func (o *QueryJsonDto) SetTake(v int64) {
	o.Take = &v
}

// GetTop returns the Top field value if set, zero value otherwise.
func (o *QueryJsonDto) GetTop() int64 {
	if o == nil || isNil(o.Top) {
		var ret int64
		return ret
	}
	return *o.Top
}

// GetTopOk returns a tuple with the Top field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJsonDto) GetTopOk() (*int64, bool) {
	if o == nil || isNil(o.Top) {
    return nil, false
	}
	return o.Top, true
}

// HasTop returns a boolean if a field has been set.
func (o *QueryJsonDto) HasTop() bool {
	if o != nil && !isNil(o.Top) {
		return true
	}

	return false
}

// SetTop gets a reference to the given int64 and assigns it to the Top field.
func (o *QueryJsonDto) SetTop(v int64) {
	o.Top = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *QueryJsonDto) GetSort() []SortNode {
	if o == nil || isNil(o.Sort) {
		var ret []SortNode
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryJsonDto) GetSortOk() ([]SortNode, bool) {
	if o == nil || isNil(o.Sort) {
    return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *QueryJsonDto) HasSort() bool {
	if o != nil && !isNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []SortNode and assigns it to the Sort field.
func (o *QueryJsonDto) SetSort(v []SortNode) {
	o.Sort = v
}

func (o QueryJsonDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.FullText.IsSet() {
		toSerialize["fullText"] = o.FullText.Get()
	}
	if !isNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	if !isNil(o.Take) {
		toSerialize["take"] = o.Take
	}
	if !isNil(o.Top) {
		toSerialize["top"] = o.Top
	}
	if !isNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	return json.Marshal(toSerialize)
}

type NullableQueryJsonDto struct {
	value *QueryJsonDto
	isSet bool
}

func (v NullableQueryJsonDto) Get() *QueryJsonDto {
	return v.value
}

func (v *NullableQueryJsonDto) Set(val *QueryJsonDto) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryJsonDto) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryJsonDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryJsonDto(val *QueryJsonDto) *NullableQueryJsonDto {
	return &NullableQueryJsonDto{value: val, isSet: true}
}

func (v NullableQueryJsonDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryJsonDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


