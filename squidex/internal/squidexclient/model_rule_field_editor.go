/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// RuleFieldEditor 
type RuleFieldEditor string

// List of RuleFieldEditor
const (
	RuleFieldEditorCHECKBOX RuleFieldEditor = "Checkbox"
	RuleFieldEditorDROPDOWN RuleFieldEditor = "Dropdown"
	RuleFieldEditorEMAIL RuleFieldEditor = "Email"
	RuleFieldEditorJAVASCRIPT RuleFieldEditor = "Javascript"
	RuleFieldEditorNUMBER RuleFieldEditor = "Number"
	RuleFieldEditorPASSWORD RuleFieldEditor = "Password"
	RuleFieldEditorTEXT RuleFieldEditor = "Text"
	RuleFieldEditorTEXT_AREA RuleFieldEditor = "TextArea"
	RuleFieldEditorURL RuleFieldEditor = "Url"
)

// All allowed values of RuleFieldEditor enum
var AllowedRuleFieldEditorEnumValues = []RuleFieldEditor{
	"Checkbox",
	"Dropdown",
	"Email",
	"Javascript",
	"Number",
	"Password",
	"Text",
	"TextArea",
	"Url",
}

func (v *RuleFieldEditor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleFieldEditor(value)
	for _, existing := range AllowedRuleFieldEditorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleFieldEditor", value)
}

// NewRuleFieldEditorFromValue returns a pointer to a valid RuleFieldEditor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleFieldEditorFromValue(v string) (*RuleFieldEditor, error) {
	ev := RuleFieldEditor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleFieldEditor: valid values are %v", v, AllowedRuleFieldEditorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleFieldEditor) IsValid() bool {
	for _, existing := range AllowedRuleFieldEditorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleFieldEditor value
func (v RuleFieldEditor) Ptr() *RuleFieldEditor {
	return &v
}

type NullableRuleFieldEditor struct {
	value *RuleFieldEditor
	isSet bool
}

func (v NullableRuleFieldEditor) Get() *RuleFieldEditor {
	return v.value
}

func (v *NullableRuleFieldEditor) Set(val *RuleFieldEditor) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleFieldEditor) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleFieldEditor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleFieldEditor(val *RuleFieldEditor) *NullableRuleFieldEditor {
	return &NullableRuleFieldEditor{value: val, isSet: true}
}

func (v NullableRuleFieldEditor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleFieldEditor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

