/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserDtoAllOf struct for UserDtoAllOf
type UserDtoAllOf struct {
	// The id of the user.
	Id string `json:"id"`
	// The email of the user. Unique value.
	Email string `json:"email"`
	// The display name (usually first name and last name) of the user.
	DisplayName string `json:"displayName"`
	// Determines if the user is locked.
	IsLocked bool `json:"isLocked"`
	// Additional permissions for the user.
	Permissions []string `json:"permissions"`
}

// NewUserDtoAllOf instantiates a new UserDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDtoAllOf(id string, email string, displayName string, isLocked bool, permissions []string) *UserDtoAllOf {
	this := UserDtoAllOf{}
	this.Id = id
	this.Email = email
	this.DisplayName = displayName
	this.IsLocked = isLocked
	this.Permissions = permissions
	return &this
}

// NewUserDtoAllOfWithDefaults instantiates a new UserDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDtoAllOfWithDefaults() *UserDtoAllOf {
	this := UserDtoAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *UserDtoAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserDtoAllOf) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserDtoAllOf) SetId(v string) {
	o.Id = v
}

// GetEmail returns the Email field value
func (o *UserDtoAllOf) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserDtoAllOf) GetEmailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserDtoAllOf) SetEmail(v string) {
	o.Email = v
}

// GetDisplayName returns the DisplayName field value
func (o *UserDtoAllOf) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *UserDtoAllOf) GetDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *UserDtoAllOf) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetIsLocked returns the IsLocked field value
func (o *UserDtoAllOf) GetIsLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value
// and a boolean to check if the value has been set.
func (o *UserDtoAllOf) GetIsLockedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsLocked, true
}

// SetIsLocked sets field value
func (o *UserDtoAllOf) SetIsLocked(v bool) {
	o.IsLocked = v
}

// GetPermissions returns the Permissions field value
func (o *UserDtoAllOf) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *UserDtoAllOf) GetPermissionsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *UserDtoAllOf) SetPermissions(v []string) {
	o.Permissions = v
}

func (o UserDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if true {
		toSerialize["isLocked"] = o.IsLocked
	}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableUserDtoAllOf struct {
	value *UserDtoAllOf
	isSet bool
}

func (v NullableUserDtoAllOf) Get() *UserDtoAllOf {
	return v.value
}

func (v *NullableUserDtoAllOf) Set(val *UserDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDtoAllOf(val *UserDtoAllOf) *NullableUserDtoAllOf {
	return &NullableUserDtoAllOf{value: val, isSet: true}
}

func (v NullableUserDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


