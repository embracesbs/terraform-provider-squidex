/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TranslateDto struct for TranslateDto
type TranslateDto struct {
	// The text to translate.
	Text string `json:"text"`
	// The target language.
	TargetLanguage string `json:"targetLanguage"`
	// The optional source language.
	SourceLanguage *string `json:"sourceLanguage,omitempty"`
}

// NewTranslateDto instantiates a new TranslateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateDto(text string, targetLanguage string) *TranslateDto {
	this := TranslateDto{}
	this.Text = text
	this.TargetLanguage = targetLanguage
	return &this
}

// NewTranslateDtoWithDefaults instantiates a new TranslateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateDtoWithDefaults() *TranslateDto {
	this := TranslateDto{}
	return &this
}

// GetText returns the Text field value
func (o *TranslateDto) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TranslateDto) GetTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TranslateDto) SetText(v string) {
	o.Text = v
}

// GetTargetLanguage returns the TargetLanguage field value
func (o *TranslateDto) GetTargetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetLanguage
}

// GetTargetLanguageOk returns a tuple with the TargetLanguage field value
// and a boolean to check if the value has been set.
func (o *TranslateDto) GetTargetLanguageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TargetLanguage, true
}

// SetTargetLanguage sets field value
func (o *TranslateDto) SetTargetLanguage(v string) {
	o.TargetLanguage = v
}

// GetSourceLanguage returns the SourceLanguage field value if set, zero value otherwise.
func (o *TranslateDto) GetSourceLanguage() string {
	if o == nil || isNil(o.SourceLanguage) {
		var ret string
		return ret
	}
	return *o.SourceLanguage
}

// GetSourceLanguageOk returns a tuple with the SourceLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDto) GetSourceLanguageOk() (*string, bool) {
	if o == nil || isNil(o.SourceLanguage) {
    return nil, false
	}
	return o.SourceLanguage, true
}

// HasSourceLanguage returns a boolean if a field has been set.
func (o *TranslateDto) HasSourceLanguage() bool {
	if o != nil && !isNil(o.SourceLanguage) {
		return true
	}

	return false
}

// SetSourceLanguage gets a reference to the given string and assigns it to the SourceLanguage field.
func (o *TranslateDto) SetSourceLanguage(v string) {
	o.SourceLanguage = &v
}

func (o TranslateDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["text"] = o.Text
	}
	if true {
		toSerialize["targetLanguage"] = o.TargetLanguage
	}
	if !isNil(o.SourceLanguage) {
		toSerialize["sourceLanguage"] = o.SourceLanguage
	}
	return json.Marshal(toSerialize)
}

type NullableTranslateDto struct {
	value *TranslateDto
	isSet bool
}

func (v NullableTranslateDto) Get() *TranslateDto {
	return v.value
}

func (v *NullableTranslateDto) Set(val *TranslateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateDto(val *TranslateDto) *NullableTranslateDto {
	return &NullableTranslateDto{value: val, isSet: true}
}

func (v NullableTranslateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


