/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CallsUsagePerDateDto struct for CallsUsagePerDateDto
type CallsUsagePerDateDto struct {
	// The date when the usage was tracked.
	Date *string `json:"date,omitempty"`
	// The total number of API calls.
	TotalCalls *int64 `json:"totalCalls,omitempty"`
	// The total number of bytes transferred.
	TotalBytes *int64 `json:"totalBytes,omitempty"`
	// The average duration in milliseconds.
	AverageElapsedMs *float64 `json:"averageElapsedMs,omitempty"`
}

// NewCallsUsagePerDateDto instantiates a new CallsUsagePerDateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallsUsagePerDateDto() *CallsUsagePerDateDto {
	this := CallsUsagePerDateDto{}
	return &this
}

// NewCallsUsagePerDateDtoWithDefaults instantiates a new CallsUsagePerDateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallsUsagePerDateDtoWithDefaults() *CallsUsagePerDateDto {
	this := CallsUsagePerDateDto{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *CallsUsagePerDateDto) GetDate() string {
	if o == nil || isNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsagePerDateDto) GetDateOk() (*string, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *CallsUsagePerDateDto) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *CallsUsagePerDateDto) SetDate(v string) {
	o.Date = &v
}

// GetTotalCalls returns the TotalCalls field value if set, zero value otherwise.
func (o *CallsUsagePerDateDto) GetTotalCalls() int64 {
	if o == nil || isNil(o.TotalCalls) {
		var ret int64
		return ret
	}
	return *o.TotalCalls
}

// GetTotalCallsOk returns a tuple with the TotalCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsagePerDateDto) GetTotalCallsOk() (*int64, bool) {
	if o == nil || isNil(o.TotalCalls) {
    return nil, false
	}
	return o.TotalCalls, true
}

// HasTotalCalls returns a boolean if a field has been set.
func (o *CallsUsagePerDateDto) HasTotalCalls() bool {
	if o != nil && !isNil(o.TotalCalls) {
		return true
	}

	return false
}

// SetTotalCalls gets a reference to the given int64 and assigns it to the TotalCalls field.
func (o *CallsUsagePerDateDto) SetTotalCalls(v int64) {
	o.TotalCalls = &v
}

// GetTotalBytes returns the TotalBytes field value if set, zero value otherwise.
func (o *CallsUsagePerDateDto) GetTotalBytes() int64 {
	if o == nil || isNil(o.TotalBytes) {
		var ret int64
		return ret
	}
	return *o.TotalBytes
}

// GetTotalBytesOk returns a tuple with the TotalBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsagePerDateDto) GetTotalBytesOk() (*int64, bool) {
	if o == nil || isNil(o.TotalBytes) {
    return nil, false
	}
	return o.TotalBytes, true
}

// HasTotalBytes returns a boolean if a field has been set.
func (o *CallsUsagePerDateDto) HasTotalBytes() bool {
	if o != nil && !isNil(o.TotalBytes) {
		return true
	}

	return false
}

// SetTotalBytes gets a reference to the given int64 and assigns it to the TotalBytes field.
func (o *CallsUsagePerDateDto) SetTotalBytes(v int64) {
	o.TotalBytes = &v
}

// GetAverageElapsedMs returns the AverageElapsedMs field value if set, zero value otherwise.
func (o *CallsUsagePerDateDto) GetAverageElapsedMs() float64 {
	if o == nil || isNil(o.AverageElapsedMs) {
		var ret float64
		return ret
	}
	return *o.AverageElapsedMs
}

// GetAverageElapsedMsOk returns a tuple with the AverageElapsedMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsagePerDateDto) GetAverageElapsedMsOk() (*float64, bool) {
	if o == nil || isNil(o.AverageElapsedMs) {
    return nil, false
	}
	return o.AverageElapsedMs, true
}

// HasAverageElapsedMs returns a boolean if a field has been set.
func (o *CallsUsagePerDateDto) HasAverageElapsedMs() bool {
	if o != nil && !isNil(o.AverageElapsedMs) {
		return true
	}

	return false
}

// SetAverageElapsedMs gets a reference to the given float64 and assigns it to the AverageElapsedMs field.
func (o *CallsUsagePerDateDto) SetAverageElapsedMs(v float64) {
	o.AverageElapsedMs = &v
}

func (o CallsUsagePerDateDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.TotalCalls) {
		toSerialize["totalCalls"] = o.TotalCalls
	}
	if !isNil(o.TotalBytes) {
		toSerialize["totalBytes"] = o.TotalBytes
	}
	if !isNil(o.AverageElapsedMs) {
		toSerialize["averageElapsedMs"] = o.AverageElapsedMs
	}
	return json.Marshal(toSerialize)
}

type NullableCallsUsagePerDateDto struct {
	value *CallsUsagePerDateDto
	isSet bool
}

func (v NullableCallsUsagePerDateDto) Get() *CallsUsagePerDateDto {
	return v.value
}

func (v *NullableCallsUsagePerDateDto) Set(val *CallsUsagePerDateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCallsUsagePerDateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCallsUsagePerDateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallsUsagePerDateDto(val *CallsUsagePerDateDto) *NullableCallsUsagePerDateDto {
	return &NullableCallsUsagePerDateDto{value: val, isSet: true}
}

func (v NullableCallsUsagePerDateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallsUsagePerDateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


