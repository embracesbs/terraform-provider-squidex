/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GeolocationFieldPropertiesDtoAllOf struct for GeolocationFieldPropertiesDtoAllOf
type GeolocationFieldPropertiesDtoAllOf struct {
	Editor *GeolocationFieldEditor `json:"editor,omitempty"`
}

// NewGeolocationFieldPropertiesDtoAllOf instantiates a new GeolocationFieldPropertiesDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeolocationFieldPropertiesDtoAllOf() *GeolocationFieldPropertiesDtoAllOf {
	this := GeolocationFieldPropertiesDtoAllOf{}
	return &this
}

// NewGeolocationFieldPropertiesDtoAllOfWithDefaults instantiates a new GeolocationFieldPropertiesDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeolocationFieldPropertiesDtoAllOfWithDefaults() *GeolocationFieldPropertiesDtoAllOf {
	this := GeolocationFieldPropertiesDtoAllOf{}
	return &this
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *GeolocationFieldPropertiesDtoAllOf) GetEditor() GeolocationFieldEditor {
	if o == nil || isNil(o.Editor) {
		var ret GeolocationFieldEditor
		return ret
	}
	return *o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeolocationFieldPropertiesDtoAllOf) GetEditorOk() (*GeolocationFieldEditor, bool) {
	if o == nil || isNil(o.Editor) {
    return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *GeolocationFieldPropertiesDtoAllOf) HasEditor() bool {
	if o != nil && !isNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given GeolocationFieldEditor and assigns it to the Editor field.
func (o *GeolocationFieldPropertiesDtoAllOf) SetEditor(v GeolocationFieldEditor) {
	o.Editor = &v
}

func (o GeolocationFieldPropertiesDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Editor) {
		toSerialize["editor"] = o.Editor
	}
	return json.Marshal(toSerialize)
}

type NullableGeolocationFieldPropertiesDtoAllOf struct {
	value *GeolocationFieldPropertiesDtoAllOf
	isSet bool
}

func (v NullableGeolocationFieldPropertiesDtoAllOf) Get() *GeolocationFieldPropertiesDtoAllOf {
	return v.value
}

func (v *NullableGeolocationFieldPropertiesDtoAllOf) Set(val *GeolocationFieldPropertiesDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGeolocationFieldPropertiesDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGeolocationFieldPropertiesDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeolocationFieldPropertiesDtoAllOf(val *GeolocationFieldPropertiesDtoAllOf) *NullableGeolocationFieldPropertiesDtoAllOf {
	return &NullableGeolocationFieldPropertiesDtoAllOf{value: val, isSet: true}
}

func (v NullableGeolocationFieldPropertiesDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeolocationFieldPropertiesDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


