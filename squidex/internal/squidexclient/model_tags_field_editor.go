/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TagsFieldEditor 
type TagsFieldEditor string

// List of TagsFieldEditor
const (
	TAGS TagsFieldEditor = "Tags"
	CHECKBOXES TagsFieldEditor = "Checkboxes"
	DROPDOWN TagsFieldEditor = "Dropdown"
)

// All allowed values of TagsFieldEditor enum
var AllowedTagsFieldEditorEnumValues = []TagsFieldEditor{
	"Tags",
	"Checkboxes",
	"Dropdown",
}

func (v *TagsFieldEditor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TagsFieldEditor(value)
	for _, existing := range AllowedTagsFieldEditorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TagsFieldEditor", value)
}

// NewTagsFieldEditorFromValue returns a pointer to a valid TagsFieldEditor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTagsFieldEditorFromValue(v string) (*TagsFieldEditor, error) {
	ev := TagsFieldEditor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TagsFieldEditor: valid values are %v", v, AllowedTagsFieldEditorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TagsFieldEditor) IsValid() bool {
	for _, existing := range AllowedTagsFieldEditorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TagsFieldEditor value
func (v TagsFieldEditor) Ptr() *TagsFieldEditor {
	return &v
}

type NullableTagsFieldEditor struct {
	value *TagsFieldEditor
	isSet bool
}

func (v NullableTagsFieldEditor) Get() *TagsFieldEditor {
	return v.value
}

func (v *NullableTagsFieldEditor) Set(val *TagsFieldEditor) {
	v.value = val
	v.isSet = true
}

func (v NullableTagsFieldEditor) IsSet() bool {
	return v.isSet
}

func (v *NullableTagsFieldEditor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagsFieldEditor(val *TagsFieldEditor) *NullableTagsFieldEditor {
	return &NullableTagsFieldEditor{value: val, isSet: true}
}

func (v NullableTagsFieldEditor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagsFieldEditor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

