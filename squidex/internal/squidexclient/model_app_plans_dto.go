/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AppPlansDto struct for AppPlansDto
type AppPlansDto struct {
	// The available plans.
	Plans []PlanDto `json:"plans"`
	// The current plan id.
	CurrentPlanId NullableString `json:"currentPlanId,omitempty"`
	// The plan owner.
	PlanOwner NullableString `json:"planOwner,omitempty"`
	// Indicates if there is a billing portal.
	HasPortal *bool `json:"hasPortal,omitempty"`
}

// NewAppPlansDto instantiates a new AppPlansDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppPlansDto(plans []PlanDto) *AppPlansDto {
	this := AppPlansDto{}
	this.Plans = plans
	return &this
}

// NewAppPlansDtoWithDefaults instantiates a new AppPlansDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppPlansDtoWithDefaults() *AppPlansDto {
	this := AppPlansDto{}
	return &this
}

// GetPlans returns the Plans field value
func (o *AppPlansDto) GetPlans() []PlanDto {
	if o == nil {
		var ret []PlanDto
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *AppPlansDto) GetPlansOk() ([]PlanDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Plans, true
}

// SetPlans sets field value
func (o *AppPlansDto) SetPlans(v []PlanDto) {
	o.Plans = v
}

// GetCurrentPlanId returns the CurrentPlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppPlansDto) GetCurrentPlanId() string {
	if o == nil || isNil(o.CurrentPlanId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentPlanId.Get()
}

// GetCurrentPlanIdOk returns a tuple with the CurrentPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppPlansDto) GetCurrentPlanIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.CurrentPlanId.Get(), o.CurrentPlanId.IsSet()
}

// HasCurrentPlanId returns a boolean if a field has been set.
func (o *AppPlansDto) HasCurrentPlanId() bool {
	if o != nil && o.CurrentPlanId.IsSet() {
		return true
	}

	return false
}

// SetCurrentPlanId gets a reference to the given NullableString and assigns it to the CurrentPlanId field.
func (o *AppPlansDto) SetCurrentPlanId(v string) {
	o.CurrentPlanId.Set(&v)
}
// SetCurrentPlanIdNil sets the value for CurrentPlanId to be an explicit nil
func (o *AppPlansDto) SetCurrentPlanIdNil() {
	o.CurrentPlanId.Set(nil)
}

// UnsetCurrentPlanId ensures that no value is present for CurrentPlanId, not even an explicit nil
func (o *AppPlansDto) UnsetCurrentPlanId() {
	o.CurrentPlanId.Unset()
}

// GetPlanOwner returns the PlanOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppPlansDto) GetPlanOwner() string {
	if o == nil || isNil(o.PlanOwner.Get()) {
		var ret string
		return ret
	}
	return *o.PlanOwner.Get()
}

// GetPlanOwnerOk returns a tuple with the PlanOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppPlansDto) GetPlanOwnerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.PlanOwner.Get(), o.PlanOwner.IsSet()
}

// HasPlanOwner returns a boolean if a field has been set.
func (o *AppPlansDto) HasPlanOwner() bool {
	if o != nil && o.PlanOwner.IsSet() {
		return true
	}

	return false
}

// SetPlanOwner gets a reference to the given NullableString and assigns it to the PlanOwner field.
func (o *AppPlansDto) SetPlanOwner(v string) {
	o.PlanOwner.Set(&v)
}
// SetPlanOwnerNil sets the value for PlanOwner to be an explicit nil
func (o *AppPlansDto) SetPlanOwnerNil() {
	o.PlanOwner.Set(nil)
}

// UnsetPlanOwner ensures that no value is present for PlanOwner, not even an explicit nil
func (o *AppPlansDto) UnsetPlanOwner() {
	o.PlanOwner.Unset()
}

// GetHasPortal returns the HasPortal field value if set, zero value otherwise.
func (o *AppPlansDto) GetHasPortal() bool {
	if o == nil || isNil(o.HasPortal) {
		var ret bool
		return ret
	}
	return *o.HasPortal
}

// GetHasPortalOk returns a tuple with the HasPortal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPlansDto) GetHasPortalOk() (*bool, bool) {
	if o == nil || isNil(o.HasPortal) {
    return nil, false
	}
	return o.HasPortal, true
}

// HasHasPortal returns a boolean if a field has been set.
func (o *AppPlansDto) HasHasPortal() bool {
	if o != nil && !isNil(o.HasPortal) {
		return true
	}

	return false
}

// SetHasPortal gets a reference to the given bool and assigns it to the HasPortal field.
func (o *AppPlansDto) SetHasPortal(v bool) {
	o.HasPortal = &v
}

func (o AppPlansDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["plans"] = o.Plans
	}
	if o.CurrentPlanId.IsSet() {
		toSerialize["currentPlanId"] = o.CurrentPlanId.Get()
	}
	if o.PlanOwner.IsSet() {
		toSerialize["planOwner"] = o.PlanOwner.Get()
	}
	if !isNil(o.HasPortal) {
		toSerialize["hasPortal"] = o.HasPortal
	}
	return json.Marshal(toSerialize)
}

type NullableAppPlansDto struct {
	value *AppPlansDto
	isSet bool
}

func (v NullableAppPlansDto) Get() *AppPlansDto {
	return v.value
}

func (v *NullableAppPlansDto) Set(val *AppPlansDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPlansDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPlansDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPlansDto(val *AppPlansDto) *NullableAppPlansDto {
	return &NullableAppPlansDto{value: val, isSet: true}
}

func (v NullableAppPlansDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPlansDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


