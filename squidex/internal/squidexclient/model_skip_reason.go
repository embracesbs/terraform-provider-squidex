/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// SkipReason 
type SkipReason string

// List of SkipReason
const (
	SkipReasonNONE SkipReason = "None"
	SkipReasonCONDITION_DOES_NOT_MATCH SkipReason = "ConditionDoesNotMatch"
	SkipReasonCONDITION_PRECHECK_DOES_NOT_MATCH SkipReason = "ConditionPrecheckDoesNotMatch"
	SkipReasonDISABLED SkipReason = "Disabled"
	SkipReasonFAILED SkipReason = "Failed"
	SkipReasonFROM_RULE SkipReason = "FromRule"
	SkipReasonNO_ACTION SkipReason = "NoAction"
	SkipReasonNO_TRIGGER SkipReason = "NoTrigger"
	SkipReasonTOO_OLD SkipReason = "TooOld"
	SkipReasonWRONG_EVENT SkipReason = "WrongEvent"
	SkipReasonWRONG_EVENT_FOR_TRIGGER SkipReason = "WrongEventForTrigger"
)

// All allowed values of SkipReason enum
var AllowedSkipReasonEnumValues = []SkipReason{
	"None",
	"ConditionDoesNotMatch",
	"ConditionPrecheckDoesNotMatch",
	"Disabled",
	"Failed",
	"FromRule",
	"NoAction",
	"NoTrigger",
	"TooOld",
	"WrongEvent",
	"WrongEventForTrigger",
}

func (v *SkipReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkipReason(value)
	for _, existing := range AllowedSkipReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkipReason", value)
}

// NewSkipReasonFromValue returns a pointer to a valid SkipReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkipReasonFromValue(v string) (*SkipReason, error) {
	ev := SkipReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkipReason: valid values are %v", v, AllowedSkipReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkipReason) IsValid() bool {
	for _, existing := range AllowedSkipReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkipReason value
func (v SkipReason) Ptr() *SkipReason {
	return &v
}

type NullableSkipReason struct {
	value *SkipReason
	isSet bool
}

func (v NullableSkipReason) Get() *SkipReason {
	return v.value
}

func (v *NullableSkipReason) Set(val *SkipReason) {
	v.value = val
	v.isSet = true
}

func (v NullableSkipReason) IsSet() bool {
	return v.isSet
}

func (v *NullableSkipReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkipReason(val *SkipReason) *NullableSkipReason {
	return &NullableSkipReason{value: val, isSet: true}
}

func (v NullableSkipReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkipReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

