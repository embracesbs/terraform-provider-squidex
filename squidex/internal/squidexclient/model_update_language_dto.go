/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// UpdateLanguageDto struct for UpdateLanguageDto
type UpdateLanguageDto struct {
	// Set the value to true to make the language the master.
	IsMaster NullableBool `json:"isMaster,omitempty"`
	// Set the value to true to make the language optional.
	IsOptional *bool `json:"isOptional,omitempty"`
	// Optional fallback languages.
	Fallback []string `json:"fallback,omitempty"`
}

// NewUpdateLanguageDto instantiates a new UpdateLanguageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLanguageDto() *UpdateLanguageDto {
	this := UpdateLanguageDto{}
	return &this
}

// NewUpdateLanguageDtoWithDefaults instantiates a new UpdateLanguageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLanguageDtoWithDefaults() *UpdateLanguageDto {
	this := UpdateLanguageDto{}
	return &this
}

// GetIsMaster returns the IsMaster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateLanguageDto) GetIsMaster() bool {
	if o == nil || isNil(o.IsMaster.Get()) {
		var ret bool
		return ret
	}
	return *o.IsMaster.Get()
}

// GetIsMasterOk returns a tuple with the IsMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateLanguageDto) GetIsMasterOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IsMaster.Get(), o.IsMaster.IsSet()
}

// HasIsMaster returns a boolean if a field has been set.
func (o *UpdateLanguageDto) HasIsMaster() bool {
	if o != nil && o.IsMaster.IsSet() {
		return true
	}

	return false
}

// SetIsMaster gets a reference to the given NullableBool and assigns it to the IsMaster field.
func (o *UpdateLanguageDto) SetIsMaster(v bool) {
	o.IsMaster.Set(&v)
}
// SetIsMasterNil sets the value for IsMaster to be an explicit nil
func (o *UpdateLanguageDto) SetIsMasterNil() {
	o.IsMaster.Set(nil)
}

// UnsetIsMaster ensures that no value is present for IsMaster, not even an explicit nil
func (o *UpdateLanguageDto) UnsetIsMaster() {
	o.IsMaster.Unset()
}

// GetIsOptional returns the IsOptional field value if set, zero value otherwise.
func (o *UpdateLanguageDto) GetIsOptional() bool {
	if o == nil || isNil(o.IsOptional) {
		var ret bool
		return ret
	}
	return *o.IsOptional
}

// GetIsOptionalOk returns a tuple with the IsOptional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLanguageDto) GetIsOptionalOk() (*bool, bool) {
	if o == nil || isNil(o.IsOptional) {
    return nil, false
	}
	return o.IsOptional, true
}

// HasIsOptional returns a boolean if a field has been set.
func (o *UpdateLanguageDto) HasIsOptional() bool {
	if o != nil && !isNil(o.IsOptional) {
		return true
	}

	return false
}

// SetIsOptional gets a reference to the given bool and assigns it to the IsOptional field.
func (o *UpdateLanguageDto) SetIsOptional(v bool) {
	o.IsOptional = &v
}

// GetFallback returns the Fallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateLanguageDto) GetFallback() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Fallback
}

// GetFallbackOk returns a tuple with the Fallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateLanguageDto) GetFallbackOk() ([]string, bool) {
	if o == nil || isNil(o.Fallback) {
    return nil, false
	}
	return o.Fallback, true
}

// HasFallback returns a boolean if a field has been set.
func (o *UpdateLanguageDto) HasFallback() bool {
	if o != nil && isNil(o.Fallback) {
		return true
	}

	return false
}

// SetFallback gets a reference to the given []string and assigns it to the Fallback field.
func (o *UpdateLanguageDto) SetFallback(v []string) {
	o.Fallback = v
}

func (o UpdateLanguageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsMaster.IsSet() {
		toSerialize["isMaster"] = o.IsMaster.Get()
	}
	if !isNil(o.IsOptional) {
		toSerialize["isOptional"] = o.IsOptional
	}
	if o.Fallback != nil {
		toSerialize["fallback"] = o.Fallback
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateLanguageDto struct {
	value *UpdateLanguageDto
	isSet bool
}

func (v NullableUpdateLanguageDto) Get() *UpdateLanguageDto {
	return v.value
}

func (v *NullableUpdateLanguageDto) Set(val *UpdateLanguageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLanguageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLanguageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLanguageDto(val *UpdateLanguageDto) *NullableUpdateLanguageDto {
	return &NullableUpdateLanguageDto{value: val, isSet: true}
}

func (v NullableUpdateLanguageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLanguageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


