/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LanguageDto struct for LanguageDto
type LanguageDto struct {
	// The iso code of the language.
	Iso2Code string `json:"iso2Code"`
	// The english name of the language.
	EnglishName string `json:"englishName"`
	// The native name of the language.
	NativeName string `json:"nativeName"`
}

// NewLanguageDto instantiates a new LanguageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageDto(iso2Code string, englishName string, nativeName string) *LanguageDto {
	this := LanguageDto{}
	this.Iso2Code = iso2Code
	this.EnglishName = englishName
	this.NativeName = nativeName
	return &this
}

// NewLanguageDtoWithDefaults instantiates a new LanguageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageDtoWithDefaults() *LanguageDto {
	this := LanguageDto{}
	return &this
}

// GetIso2Code returns the Iso2Code field value
func (o *LanguageDto) GetIso2Code() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iso2Code
}

// GetIso2CodeOk returns a tuple with the Iso2Code field value
// and a boolean to check if the value has been set.
func (o *LanguageDto) GetIso2CodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Iso2Code, true
}

// SetIso2Code sets field value
func (o *LanguageDto) SetIso2Code(v string) {
	o.Iso2Code = v
}

// GetEnglishName returns the EnglishName field value
func (o *LanguageDto) GetEnglishName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnglishName
}

// GetEnglishNameOk returns a tuple with the EnglishName field value
// and a boolean to check if the value has been set.
func (o *LanguageDto) GetEnglishNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EnglishName, true
}

// SetEnglishName sets field value
func (o *LanguageDto) SetEnglishName(v string) {
	o.EnglishName = v
}

// GetNativeName returns the NativeName field value
func (o *LanguageDto) GetNativeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NativeName
}

// GetNativeNameOk returns a tuple with the NativeName field value
// and a boolean to check if the value has been set.
func (o *LanguageDto) GetNativeNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NativeName, true
}

// SetNativeName sets field value
func (o *LanguageDto) SetNativeName(v string) {
	o.NativeName = v
}

func (o LanguageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["iso2Code"] = o.Iso2Code
	}
	if true {
		toSerialize["englishName"] = o.EnglishName
	}
	if true {
		toSerialize["nativeName"] = o.NativeName
	}
	return json.Marshal(toSerialize)
}

type NullableLanguageDto struct {
	value *LanguageDto
	isSet bool
}

func (v NullableLanguageDto) Get() *LanguageDto {
	return v.value
}

func (v *NullableLanguageDto) Set(val *LanguageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageDto(val *LanguageDto) *NullableLanguageDto {
	return &NullableLanguageDto{value: val, isSet: true}
}

func (v NullableLanguageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


