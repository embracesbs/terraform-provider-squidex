/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ContentsDtoAllOf struct for ContentsDtoAllOf
type ContentsDtoAllOf struct {
	// The total number of content items.
	Total *int64 `json:"total,omitempty"`
	// The content items.
	Items []ContentDto `json:"items"`
	// The possible statuses.
	Statuses []StatusInfoDto `json:"statuses"`
}

// NewContentsDtoAllOf instantiates a new ContentsDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentsDtoAllOf(items []ContentDto, statuses []StatusInfoDto) *ContentsDtoAllOf {
	this := ContentsDtoAllOf{}
	this.Items = items
	this.Statuses = statuses
	return &this
}

// NewContentsDtoAllOfWithDefaults instantiates a new ContentsDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentsDtoAllOfWithDefaults() *ContentsDtoAllOf {
	this := ContentsDtoAllOf{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ContentsDtoAllOf) GetTotal() int64 {
	if o == nil || isNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentsDtoAllOf) GetTotalOk() (*int64, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ContentsDtoAllOf) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *ContentsDtoAllOf) SetTotal(v int64) {
	o.Total = &v
}

// GetItems returns the Items field value
func (o *ContentsDtoAllOf) GetItems() []ContentDto {
	if o == nil {
		var ret []ContentDto
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ContentsDtoAllOf) GetItemsOk() ([]ContentDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ContentsDtoAllOf) SetItems(v []ContentDto) {
	o.Items = v
}

// GetStatuses returns the Statuses field value
func (o *ContentsDtoAllOf) GetStatuses() []StatusInfoDto {
	if o == nil {
		var ret []StatusInfoDto
		return ret
	}

	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value
// and a boolean to check if the value has been set.
func (o *ContentsDtoAllOf) GetStatusesOk() ([]StatusInfoDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Statuses, true
}

// SetStatuses sets field value
func (o *ContentsDtoAllOf) SetStatuses(v []StatusInfoDto) {
	o.Statuses = v
}

func (o ContentsDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["statuses"] = o.Statuses
	}
	return json.Marshal(toSerialize)
}

type NullableContentsDtoAllOf struct {
	value *ContentsDtoAllOf
	isSet bool
}

func (v NullableContentsDtoAllOf) Get() *ContentsDtoAllOf {
	return v.value
}

func (v *NullableContentsDtoAllOf) Set(val *ContentsDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableContentsDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableContentsDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentsDtoAllOf(val *ContentsDtoAllOf) *NullableContentsDtoAllOf {
	return &NullableContentsDtoAllOf{value: val, isSet: true}
}

func (v NullableContentsDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentsDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


