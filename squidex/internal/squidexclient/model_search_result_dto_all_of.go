/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// SearchResultDtoAllOf struct for SearchResultDtoAllOf
type SearchResultDtoAllOf struct {
	// The name of the search result.
	Name string `json:"name"`
	Type SearchResultType `json:"type"`
	// An optional label.
	Label NullableString `json:"label,omitempty"`
}

// NewSearchResultDtoAllOf instantiates a new SearchResultDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResultDtoAllOf(name string, type_ SearchResultType) *SearchResultDtoAllOf {
	this := SearchResultDtoAllOf{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewSearchResultDtoAllOfWithDefaults instantiates a new SearchResultDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultDtoAllOfWithDefaults() *SearchResultDtoAllOf {
	this := SearchResultDtoAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *SearchResultDtoAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SearchResultDtoAllOf) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SearchResultDtoAllOf) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *SearchResultDtoAllOf) GetType() SearchResultType {
	if o == nil {
		var ret SearchResultType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SearchResultDtoAllOf) GetTypeOk() (*SearchResultType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SearchResultDtoAllOf) SetType(v SearchResultType) {
	o.Type = v
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchResultDtoAllOf) GetLabel() string {
	if o == nil || isNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchResultDtoAllOf) GetLabelOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *SearchResultDtoAllOf) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *SearchResultDtoAllOf) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *SearchResultDtoAllOf) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *SearchResultDtoAllOf) UnsetLabel() {
	o.Label.Unset()
}

func (o SearchResultDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSearchResultDtoAllOf struct {
	value *SearchResultDtoAllOf
	isSet bool
}

func (v NullableSearchResultDtoAllOf) Get() *SearchResultDtoAllOf {
	return v.value
}

func (v *NullableSearchResultDtoAllOf) Set(val *SearchResultDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultDtoAllOf(val *SearchResultDtoAllOf) *NullableSearchResultDtoAllOf {
	return &NullableSearchResultDtoAllOf{value: val, isSet: true}
}

func (v NullableSearchResultDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


