/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlanDto struct for PlanDto
type PlanDto struct {
	// The id of the plan.
	Id string `json:"id"`
	// The name of the plan.
	Name string `json:"name"`
	// The monthly costs of the plan.
	Costs string `json:"costs"`
	// An optional confirm text for the monthly subscription.
	ConfirmText NullableString `json:"confirmText,omitempty"`
	// An optional confirm text for the yearly subscription.
	YearlyConfirmText NullableString `json:"yearlyConfirmText,omitempty"`
	// The yearly costs of the plan.
	YearlyCosts NullableString `json:"yearlyCosts,omitempty"`
	// The yearly id of the plan.
	YearlyId NullableString `json:"yearlyId,omitempty"`
	// The maximum number of API traffic.
	MaxApiBytes *int64 `json:"maxApiBytes,omitempty"`
	// The maximum number of API calls.
	MaxApiCalls *int64 `json:"maxApiCalls,omitempty"`
	// The maximum allowed asset size.
	MaxAssetSize *int64 `json:"maxAssetSize,omitempty"`
	// The maximum number of contributors.
	MaxContributors *int32 `json:"maxContributors,omitempty"`
}

// NewPlanDto instantiates a new PlanDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanDto(id string, name string, costs string) *PlanDto {
	this := PlanDto{}
	this.Id = id
	this.Name = name
	this.Costs = costs
	return &this
}

// NewPlanDtoWithDefaults instantiates a new PlanDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanDtoWithDefaults() *PlanDto {
	this := PlanDto{}
	return &this
}

// GetId returns the Id field value
func (o *PlanDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlanDto) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlanDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *PlanDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PlanDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PlanDto) SetName(v string) {
	o.Name = v
}

// GetCosts returns the Costs field value
func (o *PlanDto) GetCosts() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Costs
}

// GetCostsOk returns a tuple with the Costs field value
// and a boolean to check if the value has been set.
func (o *PlanDto) GetCostsOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Costs, true
}

// SetCosts sets field value
func (o *PlanDto) SetCosts(v string) {
	o.Costs = v
}

// GetConfirmText returns the ConfirmText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanDto) GetConfirmText() string {
	if o == nil || isNil(o.ConfirmText.Get()) {
		var ret string
		return ret
	}
	return *o.ConfirmText.Get()
}

// GetConfirmTextOk returns a tuple with the ConfirmText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanDto) GetConfirmTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ConfirmText.Get(), o.ConfirmText.IsSet()
}

// HasConfirmText returns a boolean if a field has been set.
func (o *PlanDto) HasConfirmText() bool {
	if o != nil && o.ConfirmText.IsSet() {
		return true
	}

	return false
}

// SetConfirmText gets a reference to the given NullableString and assigns it to the ConfirmText field.
func (o *PlanDto) SetConfirmText(v string) {
	o.ConfirmText.Set(&v)
}
// SetConfirmTextNil sets the value for ConfirmText to be an explicit nil
func (o *PlanDto) SetConfirmTextNil() {
	o.ConfirmText.Set(nil)
}

// UnsetConfirmText ensures that no value is present for ConfirmText, not even an explicit nil
func (o *PlanDto) UnsetConfirmText() {
	o.ConfirmText.Unset()
}

// GetYearlyConfirmText returns the YearlyConfirmText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanDto) GetYearlyConfirmText() string {
	if o == nil || isNil(o.YearlyConfirmText.Get()) {
		var ret string
		return ret
	}
	return *o.YearlyConfirmText.Get()
}

// GetYearlyConfirmTextOk returns a tuple with the YearlyConfirmText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanDto) GetYearlyConfirmTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.YearlyConfirmText.Get(), o.YearlyConfirmText.IsSet()
}

// HasYearlyConfirmText returns a boolean if a field has been set.
func (o *PlanDto) HasYearlyConfirmText() bool {
	if o != nil && o.YearlyConfirmText.IsSet() {
		return true
	}

	return false
}

// SetYearlyConfirmText gets a reference to the given NullableString and assigns it to the YearlyConfirmText field.
func (o *PlanDto) SetYearlyConfirmText(v string) {
	o.YearlyConfirmText.Set(&v)
}
// SetYearlyConfirmTextNil sets the value for YearlyConfirmText to be an explicit nil
func (o *PlanDto) SetYearlyConfirmTextNil() {
	o.YearlyConfirmText.Set(nil)
}

// UnsetYearlyConfirmText ensures that no value is present for YearlyConfirmText, not even an explicit nil
func (o *PlanDto) UnsetYearlyConfirmText() {
	o.YearlyConfirmText.Unset()
}

// GetYearlyCosts returns the YearlyCosts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanDto) GetYearlyCosts() string {
	if o == nil || isNil(o.YearlyCosts.Get()) {
		var ret string
		return ret
	}
	return *o.YearlyCosts.Get()
}

// GetYearlyCostsOk returns a tuple with the YearlyCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanDto) GetYearlyCostsOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.YearlyCosts.Get(), o.YearlyCosts.IsSet()
}

// HasYearlyCosts returns a boolean if a field has been set.
func (o *PlanDto) HasYearlyCosts() bool {
	if o != nil && o.YearlyCosts.IsSet() {
		return true
	}

	return false
}

// SetYearlyCosts gets a reference to the given NullableString and assigns it to the YearlyCosts field.
func (o *PlanDto) SetYearlyCosts(v string) {
	o.YearlyCosts.Set(&v)
}
// SetYearlyCostsNil sets the value for YearlyCosts to be an explicit nil
func (o *PlanDto) SetYearlyCostsNil() {
	o.YearlyCosts.Set(nil)
}

// UnsetYearlyCosts ensures that no value is present for YearlyCosts, not even an explicit nil
func (o *PlanDto) UnsetYearlyCosts() {
	o.YearlyCosts.Unset()
}

// GetYearlyId returns the YearlyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanDto) GetYearlyId() string {
	if o == nil || isNil(o.YearlyId.Get()) {
		var ret string
		return ret
	}
	return *o.YearlyId.Get()
}

// GetYearlyIdOk returns a tuple with the YearlyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanDto) GetYearlyIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.YearlyId.Get(), o.YearlyId.IsSet()
}

// HasYearlyId returns a boolean if a field has been set.
func (o *PlanDto) HasYearlyId() bool {
	if o != nil && o.YearlyId.IsSet() {
		return true
	}

	return false
}

// SetYearlyId gets a reference to the given NullableString and assigns it to the YearlyId field.
func (o *PlanDto) SetYearlyId(v string) {
	o.YearlyId.Set(&v)
}
// SetYearlyIdNil sets the value for YearlyId to be an explicit nil
func (o *PlanDto) SetYearlyIdNil() {
	o.YearlyId.Set(nil)
}

// UnsetYearlyId ensures that no value is present for YearlyId, not even an explicit nil
func (o *PlanDto) UnsetYearlyId() {
	o.YearlyId.Unset()
}

// GetMaxApiBytes returns the MaxApiBytes field value if set, zero value otherwise.
func (o *PlanDto) GetMaxApiBytes() int64 {
	if o == nil || isNil(o.MaxApiBytes) {
		var ret int64
		return ret
	}
	return *o.MaxApiBytes
}

// GetMaxApiBytesOk returns a tuple with the MaxApiBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDto) GetMaxApiBytesOk() (*int64, bool) {
	if o == nil || isNil(o.MaxApiBytes) {
    return nil, false
	}
	return o.MaxApiBytes, true
}

// HasMaxApiBytes returns a boolean if a field has been set.
func (o *PlanDto) HasMaxApiBytes() bool {
	if o != nil && !isNil(o.MaxApiBytes) {
		return true
	}

	return false
}

// SetMaxApiBytes gets a reference to the given int64 and assigns it to the MaxApiBytes field.
func (o *PlanDto) SetMaxApiBytes(v int64) {
	o.MaxApiBytes = &v
}

// GetMaxApiCalls returns the MaxApiCalls field value if set, zero value otherwise.
func (o *PlanDto) GetMaxApiCalls() int64 {
	if o == nil || isNil(o.MaxApiCalls) {
		var ret int64
		return ret
	}
	return *o.MaxApiCalls
}

// GetMaxApiCallsOk returns a tuple with the MaxApiCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDto) GetMaxApiCallsOk() (*int64, bool) {
	if o == nil || isNil(o.MaxApiCalls) {
    return nil, false
	}
	return o.MaxApiCalls, true
}

// HasMaxApiCalls returns a boolean if a field has been set.
func (o *PlanDto) HasMaxApiCalls() bool {
	if o != nil && !isNil(o.MaxApiCalls) {
		return true
	}

	return false
}

// SetMaxApiCalls gets a reference to the given int64 and assigns it to the MaxApiCalls field.
func (o *PlanDto) SetMaxApiCalls(v int64) {
	o.MaxApiCalls = &v
}

// GetMaxAssetSize returns the MaxAssetSize field value if set, zero value otherwise.
func (o *PlanDto) GetMaxAssetSize() int64 {
	if o == nil || isNil(o.MaxAssetSize) {
		var ret int64
		return ret
	}
	return *o.MaxAssetSize
}

// GetMaxAssetSizeOk returns a tuple with the MaxAssetSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDto) GetMaxAssetSizeOk() (*int64, bool) {
	if o == nil || isNil(o.MaxAssetSize) {
    return nil, false
	}
	return o.MaxAssetSize, true
}

// HasMaxAssetSize returns a boolean if a field has been set.
func (o *PlanDto) HasMaxAssetSize() bool {
	if o != nil && !isNil(o.MaxAssetSize) {
		return true
	}

	return false
}

// SetMaxAssetSize gets a reference to the given int64 and assigns it to the MaxAssetSize field.
func (o *PlanDto) SetMaxAssetSize(v int64) {
	o.MaxAssetSize = &v
}

// GetMaxContributors returns the MaxContributors field value if set, zero value otherwise.
func (o *PlanDto) GetMaxContributors() int32 {
	if o == nil || isNil(o.MaxContributors) {
		var ret int32
		return ret
	}
	return *o.MaxContributors
}

// GetMaxContributorsOk returns a tuple with the MaxContributors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDto) GetMaxContributorsOk() (*int32, bool) {
	if o == nil || isNil(o.MaxContributors) {
    return nil, false
	}
	return o.MaxContributors, true
}

// HasMaxContributors returns a boolean if a field has been set.
func (o *PlanDto) HasMaxContributors() bool {
	if o != nil && !isNil(o.MaxContributors) {
		return true
	}

	return false
}

// SetMaxContributors gets a reference to the given int32 and assigns it to the MaxContributors field.
func (o *PlanDto) SetMaxContributors(v int32) {
	o.MaxContributors = &v
}

func (o PlanDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["costs"] = o.Costs
	}
	if o.ConfirmText.IsSet() {
		toSerialize["confirmText"] = o.ConfirmText.Get()
	}
	if o.YearlyConfirmText.IsSet() {
		toSerialize["yearlyConfirmText"] = o.YearlyConfirmText.Get()
	}
	if o.YearlyCosts.IsSet() {
		toSerialize["yearlyCosts"] = o.YearlyCosts.Get()
	}
	if o.YearlyId.IsSet() {
		toSerialize["yearlyId"] = o.YearlyId.Get()
	}
	if !isNil(o.MaxApiBytes) {
		toSerialize["maxApiBytes"] = o.MaxApiBytes
	}
	if !isNil(o.MaxApiCalls) {
		toSerialize["maxApiCalls"] = o.MaxApiCalls
	}
	if !isNil(o.MaxAssetSize) {
		toSerialize["maxAssetSize"] = o.MaxAssetSize
	}
	if !isNil(o.MaxContributors) {
		toSerialize["maxContributors"] = o.MaxContributors
	}
	return json.Marshal(toSerialize)
}

type NullablePlanDto struct {
	value *PlanDto
	isSet bool
}

func (v NullablePlanDto) Get() *PlanDto {
	return v.value
}

func (v *NullablePlanDto) Set(val *PlanDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDto(val *PlanDto) *NullablePlanDto {
	return &NullablePlanDto{value: val, isSet: true}
}

func (v NullablePlanDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


