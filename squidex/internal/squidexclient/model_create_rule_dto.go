/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateRuleDto struct for CreateRuleDto
type CreateRuleDto struct {
	Trigger RuleTriggerDto `json:"trigger"`
	Action RuleAction `json:"action"`
}

// NewCreateRuleDto instantiates a new CreateRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRuleDto(trigger RuleTriggerDto, action RuleAction) *CreateRuleDto {
	this := CreateRuleDto{}
	this.Trigger = trigger
	this.Action = action
	return &this
}

// NewCreateRuleDtoWithDefaults instantiates a new CreateRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRuleDtoWithDefaults() *CreateRuleDto {
	this := CreateRuleDto{}
	return &this
}

// GetTrigger returns the Trigger field value
func (o *CreateRuleDto) GetTrigger() RuleTriggerDto {
	if o == nil {
		var ret RuleTriggerDto
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *CreateRuleDto) GetTriggerOk() (*RuleTriggerDto, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value
func (o *CreateRuleDto) SetTrigger(v RuleTriggerDto) {
	o.Trigger = v
}

// GetAction returns the Action field value
func (o *CreateRuleDto) GetAction() RuleAction {
	if o == nil {
		var ret RuleAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *CreateRuleDto) GetActionOk() (*RuleAction, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *CreateRuleDto) SetAction(v RuleAction) {
	o.Action = v
}

func (o CreateRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["trigger"] = o.Trigger
	}
	if true {
		toSerialize["action"] = o.Action
	}
	return json.Marshal(toSerialize)
}

type NullableCreateRuleDto struct {
	value *CreateRuleDto
	isSet bool
}

func (v NullableCreateRuleDto) Get() *CreateRuleDto {
	return v.value
}

func (v *NullableCreateRuleDto) Set(val *CreateRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRuleDto(val *CreateRuleDto) *NullableCreateRuleDto {
	return &NullableCreateRuleDto{value: val, isSet: true}
}

func (v NullableCreateRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


