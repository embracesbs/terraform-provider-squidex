/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RuleElementDto struct for RuleElementDto
type RuleElementDto struct {
	// Describes the action or trigger type.
	Description string `json:"description"`
	// The label for the action or trigger type.
	Display string `json:"display"`
	// Optional title.
	Title NullableString `json:"title,omitempty"`
	// The color for the icon.
	IconColor NullableString `json:"iconColor,omitempty"`
	// The image for the icon.
	IconImage NullableString `json:"iconImage,omitempty"`
	// The optional link to the product that is integrated.
	ReadMore NullableString `json:"readMore,omitempty"`
	// The properties.
	Properties []RuleElementPropertyDto `json:"properties"`
}

// NewRuleElementDto instantiates a new RuleElementDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleElementDto(description string, display string, properties []RuleElementPropertyDto) *RuleElementDto {
	this := RuleElementDto{}
	this.Description = description
	this.Display = display
	this.Properties = properties
	return &this
}

// NewRuleElementDtoWithDefaults instantiates a new RuleElementDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleElementDtoWithDefaults() *RuleElementDto {
	this := RuleElementDto{}
	return &this
}

// GetDescription returns the Description field value
func (o *RuleElementDto) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RuleElementDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RuleElementDto) SetDescription(v string) {
	o.Description = v
}

// GetDisplay returns the Display field value
func (o *RuleElementDto) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *RuleElementDto) GetDisplayOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *RuleElementDto) SetDisplay(v string) {
	o.Display = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleElementDto) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleElementDto) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *RuleElementDto) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *RuleElementDto) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *RuleElementDto) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *RuleElementDto) UnsetTitle() {
	o.Title.Unset()
}

// GetIconColor returns the IconColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleElementDto) GetIconColor() string {
	if o == nil || isNil(o.IconColor.Get()) {
		var ret string
		return ret
	}
	return *o.IconColor.Get()
}

// GetIconColorOk returns a tuple with the IconColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleElementDto) GetIconColorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.IconColor.Get(), o.IconColor.IsSet()
}

// HasIconColor returns a boolean if a field has been set.
func (o *RuleElementDto) HasIconColor() bool {
	if o != nil && o.IconColor.IsSet() {
		return true
	}

	return false
}

// SetIconColor gets a reference to the given NullableString and assigns it to the IconColor field.
func (o *RuleElementDto) SetIconColor(v string) {
	o.IconColor.Set(&v)
}
// SetIconColorNil sets the value for IconColor to be an explicit nil
func (o *RuleElementDto) SetIconColorNil() {
	o.IconColor.Set(nil)
}

// UnsetIconColor ensures that no value is present for IconColor, not even an explicit nil
func (o *RuleElementDto) UnsetIconColor() {
	o.IconColor.Unset()
}

// GetIconImage returns the IconImage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleElementDto) GetIconImage() string {
	if o == nil || isNil(o.IconImage.Get()) {
		var ret string
		return ret
	}
	return *o.IconImage.Get()
}

// GetIconImageOk returns a tuple with the IconImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleElementDto) GetIconImageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.IconImage.Get(), o.IconImage.IsSet()
}

// HasIconImage returns a boolean if a field has been set.
func (o *RuleElementDto) HasIconImage() bool {
	if o != nil && o.IconImage.IsSet() {
		return true
	}

	return false
}

// SetIconImage gets a reference to the given NullableString and assigns it to the IconImage field.
func (o *RuleElementDto) SetIconImage(v string) {
	o.IconImage.Set(&v)
}
// SetIconImageNil sets the value for IconImage to be an explicit nil
func (o *RuleElementDto) SetIconImageNil() {
	o.IconImage.Set(nil)
}

// UnsetIconImage ensures that no value is present for IconImage, not even an explicit nil
func (o *RuleElementDto) UnsetIconImage() {
	o.IconImage.Unset()
}

// GetReadMore returns the ReadMore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleElementDto) GetReadMore() string {
	if o == nil || isNil(o.ReadMore.Get()) {
		var ret string
		return ret
	}
	return *o.ReadMore.Get()
}

// GetReadMoreOk returns a tuple with the ReadMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleElementDto) GetReadMoreOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ReadMore.Get(), o.ReadMore.IsSet()
}

// HasReadMore returns a boolean if a field has been set.
func (o *RuleElementDto) HasReadMore() bool {
	if o != nil && o.ReadMore.IsSet() {
		return true
	}

	return false
}

// SetReadMore gets a reference to the given NullableString and assigns it to the ReadMore field.
func (o *RuleElementDto) SetReadMore(v string) {
	o.ReadMore.Set(&v)
}
// SetReadMoreNil sets the value for ReadMore to be an explicit nil
func (o *RuleElementDto) SetReadMoreNil() {
	o.ReadMore.Set(nil)
}

// UnsetReadMore ensures that no value is present for ReadMore, not even an explicit nil
func (o *RuleElementDto) UnsetReadMore() {
	o.ReadMore.Unset()
}

// GetProperties returns the Properties field value
func (o *RuleElementDto) GetProperties() []RuleElementPropertyDto {
	if o == nil {
		var ret []RuleElementPropertyDto
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *RuleElementDto) GetPropertiesOk() ([]RuleElementPropertyDto, bool) {
	if o == nil {
    return nil, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *RuleElementDto) SetProperties(v []RuleElementPropertyDto) {
	o.Properties = v
}

func (o RuleElementDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["display"] = o.Display
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.IconColor.IsSet() {
		toSerialize["iconColor"] = o.IconColor.Get()
	}
	if o.IconImage.IsSet() {
		toSerialize["iconImage"] = o.IconImage.Get()
	}
	if o.ReadMore.IsSet() {
		toSerialize["readMore"] = o.ReadMore.Get()
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableRuleElementDto struct {
	value *RuleElementDto
	isSet bool
}

func (v NullableRuleElementDto) Get() *RuleElementDto {
	return v.value
}

func (v *NullableRuleElementDto) Set(val *RuleElementDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleElementDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleElementDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleElementDto(val *RuleElementDto) *NullableRuleElementDto {
	return &NullableRuleElementDto{value: val, isSet: true}
}

func (v NullableRuleElementDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleElementDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


