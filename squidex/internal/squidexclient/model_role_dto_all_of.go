/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RoleDtoAllOf struct for RoleDtoAllOf
type RoleDtoAllOf struct {
	// The role name.
	Name string `json:"name"`
	// The number of clients with this role.
	NumClients *int32 `json:"numClients,omitempty"`
	// The number of contributors with this role.
	NumContributors *int32 `json:"numContributors,omitempty"`
	// Indicates if the role is an builtin default role.
	IsDefaultRole *bool `json:"isDefaultRole,omitempty"`
	// Associated list of permissions.
	Permissions []string `json:"permissions"`
	// Associated list of UI properties.
	Properties map[string]interface{} `json:"properties"`
}

// NewRoleDtoAllOf instantiates a new RoleDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleDtoAllOf(name string, permissions []string, properties map[string]interface{}) *RoleDtoAllOf {
	this := RoleDtoAllOf{}
	this.Name = name
	this.Permissions = permissions
	this.Properties = properties
	return &this
}

// NewRoleDtoAllOfWithDefaults instantiates a new RoleDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleDtoAllOfWithDefaults() *RoleDtoAllOf {
	this := RoleDtoAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *RoleDtoAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoleDtoAllOf) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoleDtoAllOf) SetName(v string) {
	o.Name = v
}

// GetNumClients returns the NumClients field value if set, zero value otherwise.
func (o *RoleDtoAllOf) GetNumClients() int32 {
	if o == nil || isNil(o.NumClients) {
		var ret int32
		return ret
	}
	return *o.NumClients
}

// GetNumClientsOk returns a tuple with the NumClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDtoAllOf) GetNumClientsOk() (*int32, bool) {
	if o == nil || isNil(o.NumClients) {
    return nil, false
	}
	return o.NumClients, true
}

// HasNumClients returns a boolean if a field has been set.
func (o *RoleDtoAllOf) HasNumClients() bool {
	if o != nil && !isNil(o.NumClients) {
		return true
	}

	return false
}

// SetNumClients gets a reference to the given int32 and assigns it to the NumClients field.
func (o *RoleDtoAllOf) SetNumClients(v int32) {
	o.NumClients = &v
}

// GetNumContributors returns the NumContributors field value if set, zero value otherwise.
func (o *RoleDtoAllOf) GetNumContributors() int32 {
	if o == nil || isNil(o.NumContributors) {
		var ret int32
		return ret
	}
	return *o.NumContributors
}

// GetNumContributorsOk returns a tuple with the NumContributors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDtoAllOf) GetNumContributorsOk() (*int32, bool) {
	if o == nil || isNil(o.NumContributors) {
    return nil, false
	}
	return o.NumContributors, true
}

// HasNumContributors returns a boolean if a field has been set.
func (o *RoleDtoAllOf) HasNumContributors() bool {
	if o != nil && !isNil(o.NumContributors) {
		return true
	}

	return false
}

// SetNumContributors gets a reference to the given int32 and assigns it to the NumContributors field.
func (o *RoleDtoAllOf) SetNumContributors(v int32) {
	o.NumContributors = &v
}

// GetIsDefaultRole returns the IsDefaultRole field value if set, zero value otherwise.
func (o *RoleDtoAllOf) GetIsDefaultRole() bool {
	if o == nil || isNil(o.IsDefaultRole) {
		var ret bool
		return ret
	}
	return *o.IsDefaultRole
}

// GetIsDefaultRoleOk returns a tuple with the IsDefaultRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDtoAllOf) GetIsDefaultRoleOk() (*bool, bool) {
	if o == nil || isNil(o.IsDefaultRole) {
    return nil, false
	}
	return o.IsDefaultRole, true
}

// HasIsDefaultRole returns a boolean if a field has been set.
func (o *RoleDtoAllOf) HasIsDefaultRole() bool {
	if o != nil && !isNil(o.IsDefaultRole) {
		return true
	}

	return false
}

// SetIsDefaultRole gets a reference to the given bool and assigns it to the IsDefaultRole field.
func (o *RoleDtoAllOf) SetIsDefaultRole(v bool) {
	o.IsDefaultRole = &v
}

// GetPermissions returns the Permissions field value
func (o *RoleDtoAllOf) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *RoleDtoAllOf) GetPermissionsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *RoleDtoAllOf) SetPermissions(v []string) {
	o.Permissions = v
}

// GetProperties returns the Properties field value
func (o *RoleDtoAllOf) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *RoleDtoAllOf) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *RoleDtoAllOf) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

func (o RoleDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.NumClients) {
		toSerialize["numClients"] = o.NumClients
	}
	if !isNil(o.NumContributors) {
		toSerialize["numContributors"] = o.NumContributors
	}
	if !isNil(o.IsDefaultRole) {
		toSerialize["isDefaultRole"] = o.IsDefaultRole
	}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableRoleDtoAllOf struct {
	value *RoleDtoAllOf
	isSet bool
}

func (v NullableRoleDtoAllOf) Get() *RoleDtoAllOf {
	return v.value
}

func (v *NullableRoleDtoAllOf) Set(val *RoleDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleDtoAllOf(val *RoleDtoAllOf) *NullableRoleDtoAllOf {
	return &NullableRoleDtoAllOf{value: val, isSet: true}
}

func (v NullableRoleDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


