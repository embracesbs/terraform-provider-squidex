/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StringFieldPropertiesDto struct for StringFieldPropertiesDto
type StringFieldPropertiesDto struct {
	FieldPropertiesDto
	DefaultValues *map[string]string `json:"defaultValues,omitempty"`
	// The default value for the field value.
	DefaultValue NullableString `json:"defaultValue,omitempty"`
	// The pattern to enforce a specific format for the field value.
	Pattern NullableString `json:"pattern,omitempty"`
	// The validation message for the pattern.
	PatternMessage NullableString `json:"patternMessage,omitempty"`
	// The initial id to the folder when the control supports file uploads.
	FolderId NullableString `json:"folderId,omitempty"`
	// The minimum allowed length for the field value.
	MinLength NullableInt32 `json:"minLength,omitempty"`
	// The maximum allowed length for the field value.
	MaxLength NullableInt32 `json:"maxLength,omitempty"`
	// The minimum allowed of normal characters for the field value.
	MinCharacters NullableInt32 `json:"minCharacters,omitempty"`
	// The maximum allowed of normal characters for the field value.
	MaxCharacters NullableInt32 `json:"maxCharacters,omitempty"`
	// The minimum allowed number of words for the field value.
	MinWords NullableInt32 `json:"minWords,omitempty"`
	// The maximum allowed number of words for the field value.
	MaxWords NullableInt32 `json:"maxWords,omitempty"`
	// The allowed values for the field value.
	AllowedValues []string `json:"allowedValues,omitempty"`
	// The allowed schema ids that can be embedded.
	SchemaIds []string `json:"schemaIds,omitempty"`
	// Indicates if the field value must be unique. Ignored for nested fields and localized fields.
	IsUnique *bool `json:"isUnique,omitempty"`
	// Indicates that other content items or references are embedded.
	IsEmbeddable *bool `json:"isEmbeddable,omitempty"`
	// Indicates that the inline editor is enabled for this field.
	InlineEditable *bool `json:"inlineEditable,omitempty"`
	// Indicates whether GraphQL Enum should be created.
	CreateEnum *bool `json:"createEnum,omitempty"`
	ContentType *StringContentType `json:"contentType,omitempty"`
	Editor *StringFieldEditor `json:"editor,omitempty"`
}

// NewStringFieldPropertiesDto instantiates a new StringFieldPropertiesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStringFieldPropertiesDto(fieldType string) *StringFieldPropertiesDto {
	this := StringFieldPropertiesDto{}
	this.FieldType = fieldType
	return &this
}

// NewStringFieldPropertiesDtoWithDefaults instantiates a new StringFieldPropertiesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStringFieldPropertiesDtoWithDefaults() *StringFieldPropertiesDto {
	this := StringFieldPropertiesDto{}
	return &this
}

// GetDefaultValues returns the DefaultValues field value if set, zero value otherwise.
func (o *StringFieldPropertiesDto) GetDefaultValues() map[string]string {
	if o == nil || isNil(o.DefaultValues) {
		var ret map[string]string
		return ret
	}
	return *o.DefaultValues
}

// GetDefaultValuesOk returns a tuple with the DefaultValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringFieldPropertiesDto) GetDefaultValuesOk() (*map[string]string, bool) {
	if o == nil || isNil(o.DefaultValues) {
    return nil, false
	}
	return o.DefaultValues, true
}

// HasDefaultValues returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasDefaultValues() bool {
	if o != nil && !isNil(o.DefaultValues) {
		return true
	}

	return false
}

// SetDefaultValues gets a reference to the given map[string]string and assigns it to the DefaultValues field.
func (o *StringFieldPropertiesDto) SetDefaultValues(v map[string]string) {
	o.DefaultValues = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetDefaultValue() string {
	if o == nil || isNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetDefaultValueOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *StringFieldPropertiesDto) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *StringFieldPropertiesDto) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetPattern returns the Pattern field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetPattern() string {
	if o == nil || isNil(o.Pattern.Get()) {
		var ret string
		return ret
	}
	return *o.Pattern.Get()
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetPatternOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Pattern.Get(), o.Pattern.IsSet()
}

// HasPattern returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasPattern() bool {
	if o != nil && o.Pattern.IsSet() {
		return true
	}

	return false
}

// SetPattern gets a reference to the given NullableString and assigns it to the Pattern field.
func (o *StringFieldPropertiesDto) SetPattern(v string) {
	o.Pattern.Set(&v)
}
// SetPatternNil sets the value for Pattern to be an explicit nil
func (o *StringFieldPropertiesDto) SetPatternNil() {
	o.Pattern.Set(nil)
}

// UnsetPattern ensures that no value is present for Pattern, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetPattern() {
	o.Pattern.Unset()
}

// GetPatternMessage returns the PatternMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetPatternMessage() string {
	if o == nil || isNil(o.PatternMessage.Get()) {
		var ret string
		return ret
	}
	return *o.PatternMessage.Get()
}

// GetPatternMessageOk returns a tuple with the PatternMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetPatternMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.PatternMessage.Get(), o.PatternMessage.IsSet()
}

// HasPatternMessage returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasPatternMessage() bool {
	if o != nil && o.PatternMessage.IsSet() {
		return true
	}

	return false
}

// SetPatternMessage gets a reference to the given NullableString and assigns it to the PatternMessage field.
func (o *StringFieldPropertiesDto) SetPatternMessage(v string) {
	o.PatternMessage.Set(&v)
}
// SetPatternMessageNil sets the value for PatternMessage to be an explicit nil
func (o *StringFieldPropertiesDto) SetPatternMessageNil() {
	o.PatternMessage.Set(nil)
}

// UnsetPatternMessage ensures that no value is present for PatternMessage, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetPatternMessage() {
	o.PatternMessage.Unset()
}

// GetFolderId returns the FolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetFolderId() string {
	if o == nil || isNil(o.FolderId.Get()) {
		var ret string
		return ret
	}
	return *o.FolderId.Get()
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetFolderIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FolderId.Get(), o.FolderId.IsSet()
}

// HasFolderId returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasFolderId() bool {
	if o != nil && o.FolderId.IsSet() {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given NullableString and assigns it to the FolderId field.
func (o *StringFieldPropertiesDto) SetFolderId(v string) {
	o.FolderId.Set(&v)
}
// SetFolderIdNil sets the value for FolderId to be an explicit nil
func (o *StringFieldPropertiesDto) SetFolderIdNil() {
	o.FolderId.Set(nil)
}

// UnsetFolderId ensures that no value is present for FolderId, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetFolderId() {
	o.FolderId.Unset()
}

// GetMinLength returns the MinLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetMinLength() int32 {
	if o == nil || isNil(o.MinLength.Get()) {
		var ret int32
		return ret
	}
	return *o.MinLength.Get()
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetMinLengthOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MinLength.Get(), o.MinLength.IsSet()
}

// HasMinLength returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasMinLength() bool {
	if o != nil && o.MinLength.IsSet() {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given NullableInt32 and assigns it to the MinLength field.
func (o *StringFieldPropertiesDto) SetMinLength(v int32) {
	o.MinLength.Set(&v)
}
// SetMinLengthNil sets the value for MinLength to be an explicit nil
func (o *StringFieldPropertiesDto) SetMinLengthNil() {
	o.MinLength.Set(nil)
}

// UnsetMinLength ensures that no value is present for MinLength, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetMinLength() {
	o.MinLength.Unset()
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetMaxLength() int32 {
	if o == nil || isNil(o.MaxLength.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxLength.Get()
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetMaxLengthOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxLength.Get(), o.MaxLength.IsSet()
}

// HasMaxLength returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasMaxLength() bool {
	if o != nil && o.MaxLength.IsSet() {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given NullableInt32 and assigns it to the MaxLength field.
func (o *StringFieldPropertiesDto) SetMaxLength(v int32) {
	o.MaxLength.Set(&v)
}
// SetMaxLengthNil sets the value for MaxLength to be an explicit nil
func (o *StringFieldPropertiesDto) SetMaxLengthNil() {
	o.MaxLength.Set(nil)
}

// UnsetMaxLength ensures that no value is present for MaxLength, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetMaxLength() {
	o.MaxLength.Unset()
}

// GetMinCharacters returns the MinCharacters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetMinCharacters() int32 {
	if o == nil || isNil(o.MinCharacters.Get()) {
		var ret int32
		return ret
	}
	return *o.MinCharacters.Get()
}

// GetMinCharactersOk returns a tuple with the MinCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetMinCharactersOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MinCharacters.Get(), o.MinCharacters.IsSet()
}

// HasMinCharacters returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasMinCharacters() bool {
	if o != nil && o.MinCharacters.IsSet() {
		return true
	}

	return false
}

// SetMinCharacters gets a reference to the given NullableInt32 and assigns it to the MinCharacters field.
func (o *StringFieldPropertiesDto) SetMinCharacters(v int32) {
	o.MinCharacters.Set(&v)
}
// SetMinCharactersNil sets the value for MinCharacters to be an explicit nil
func (o *StringFieldPropertiesDto) SetMinCharactersNil() {
	o.MinCharacters.Set(nil)
}

// UnsetMinCharacters ensures that no value is present for MinCharacters, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetMinCharacters() {
	o.MinCharacters.Unset()
}

// GetMaxCharacters returns the MaxCharacters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetMaxCharacters() int32 {
	if o == nil || isNil(o.MaxCharacters.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxCharacters.Get()
}

// GetMaxCharactersOk returns a tuple with the MaxCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetMaxCharactersOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxCharacters.Get(), o.MaxCharacters.IsSet()
}

// HasMaxCharacters returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasMaxCharacters() bool {
	if o != nil && o.MaxCharacters.IsSet() {
		return true
	}

	return false
}

// SetMaxCharacters gets a reference to the given NullableInt32 and assigns it to the MaxCharacters field.
func (o *StringFieldPropertiesDto) SetMaxCharacters(v int32) {
	o.MaxCharacters.Set(&v)
}
// SetMaxCharactersNil sets the value for MaxCharacters to be an explicit nil
func (o *StringFieldPropertiesDto) SetMaxCharactersNil() {
	o.MaxCharacters.Set(nil)
}

// UnsetMaxCharacters ensures that no value is present for MaxCharacters, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetMaxCharacters() {
	o.MaxCharacters.Unset()
}

// GetMinWords returns the MinWords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetMinWords() int32 {
	if o == nil || isNil(o.MinWords.Get()) {
		var ret int32
		return ret
	}
	return *o.MinWords.Get()
}

// GetMinWordsOk returns a tuple with the MinWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetMinWordsOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MinWords.Get(), o.MinWords.IsSet()
}

// HasMinWords returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasMinWords() bool {
	if o != nil && o.MinWords.IsSet() {
		return true
	}

	return false
}

// SetMinWords gets a reference to the given NullableInt32 and assigns it to the MinWords field.
func (o *StringFieldPropertiesDto) SetMinWords(v int32) {
	o.MinWords.Set(&v)
}
// SetMinWordsNil sets the value for MinWords to be an explicit nil
func (o *StringFieldPropertiesDto) SetMinWordsNil() {
	o.MinWords.Set(nil)
}

// UnsetMinWords ensures that no value is present for MinWords, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetMinWords() {
	o.MinWords.Unset()
}

// GetMaxWords returns the MaxWords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetMaxWords() int32 {
	if o == nil || isNil(o.MaxWords.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxWords.Get()
}

// GetMaxWordsOk returns a tuple with the MaxWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetMaxWordsOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxWords.Get(), o.MaxWords.IsSet()
}

// HasMaxWords returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasMaxWords() bool {
	if o != nil && o.MaxWords.IsSet() {
		return true
	}

	return false
}

// SetMaxWords gets a reference to the given NullableInt32 and assigns it to the MaxWords field.
func (o *StringFieldPropertiesDto) SetMaxWords(v int32) {
	o.MaxWords.Set(&v)
}
// SetMaxWordsNil sets the value for MaxWords to be an explicit nil
func (o *StringFieldPropertiesDto) SetMaxWordsNil() {
	o.MaxWords.Set(nil)
}

// UnsetMaxWords ensures that no value is present for MaxWords, not even an explicit nil
func (o *StringFieldPropertiesDto) UnsetMaxWords() {
	o.MaxWords.Unset()
}

// GetAllowedValues returns the AllowedValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetAllowedValues() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedValues
}

// GetAllowedValuesOk returns a tuple with the AllowedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetAllowedValuesOk() ([]string, bool) {
	if o == nil || isNil(o.AllowedValues) {
    return nil, false
	}
	return o.AllowedValues, true
}

// HasAllowedValues returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasAllowedValues() bool {
	if o != nil && isNil(o.AllowedValues) {
		return true
	}

	return false
}

// SetAllowedValues gets a reference to the given []string and assigns it to the AllowedValues field.
func (o *StringFieldPropertiesDto) SetAllowedValues(v []string) {
	o.AllowedValues = v
}

// GetSchemaIds returns the SchemaIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringFieldPropertiesDto) GetSchemaIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SchemaIds
}

// GetSchemaIdsOk returns a tuple with the SchemaIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringFieldPropertiesDto) GetSchemaIdsOk() ([]string, bool) {
	if o == nil || isNil(o.SchemaIds) {
    return nil, false
	}
	return o.SchemaIds, true
}

// HasSchemaIds returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasSchemaIds() bool {
	if o != nil && isNil(o.SchemaIds) {
		return true
	}

	return false
}

// SetSchemaIds gets a reference to the given []string and assigns it to the SchemaIds field.
func (o *StringFieldPropertiesDto) SetSchemaIds(v []string) {
	o.SchemaIds = v
}

// GetIsUnique returns the IsUnique field value if set, zero value otherwise.
func (o *StringFieldPropertiesDto) GetIsUnique() bool {
	if o == nil || isNil(o.IsUnique) {
		var ret bool
		return ret
	}
	return *o.IsUnique
}

// GetIsUniqueOk returns a tuple with the IsUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringFieldPropertiesDto) GetIsUniqueOk() (*bool, bool) {
	if o == nil || isNil(o.IsUnique) {
    return nil, false
	}
	return o.IsUnique, true
}

// HasIsUnique returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasIsUnique() bool {
	if o != nil && !isNil(o.IsUnique) {
		return true
	}

	return false
}

// SetIsUnique gets a reference to the given bool and assigns it to the IsUnique field.
func (o *StringFieldPropertiesDto) SetIsUnique(v bool) {
	o.IsUnique = &v
}

// GetIsEmbeddable returns the IsEmbeddable field value if set, zero value otherwise.
func (o *StringFieldPropertiesDto) GetIsEmbeddable() bool {
	if o == nil || isNil(o.IsEmbeddable) {
		var ret bool
		return ret
	}
	return *o.IsEmbeddable
}

// GetIsEmbeddableOk returns a tuple with the IsEmbeddable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringFieldPropertiesDto) GetIsEmbeddableOk() (*bool, bool) {
	if o == nil || isNil(o.IsEmbeddable) {
    return nil, false
	}
	return o.IsEmbeddable, true
}

// HasIsEmbeddable returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasIsEmbeddable() bool {
	if o != nil && !isNil(o.IsEmbeddable) {
		return true
	}

	return false
}

// SetIsEmbeddable gets a reference to the given bool and assigns it to the IsEmbeddable field.
func (o *StringFieldPropertiesDto) SetIsEmbeddable(v bool) {
	o.IsEmbeddable = &v
}

// GetInlineEditable returns the InlineEditable field value if set, zero value otherwise.
func (o *StringFieldPropertiesDto) GetInlineEditable() bool {
	if o == nil || isNil(o.InlineEditable) {
		var ret bool
		return ret
	}
	return *o.InlineEditable
}

// GetInlineEditableOk returns a tuple with the InlineEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringFieldPropertiesDto) GetInlineEditableOk() (*bool, bool) {
	if o == nil || isNil(o.InlineEditable) {
    return nil, false
	}
	return o.InlineEditable, true
}

// HasInlineEditable returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasInlineEditable() bool {
	if o != nil && !isNil(o.InlineEditable) {
		return true
	}

	return false
}

// SetInlineEditable gets a reference to the given bool and assigns it to the InlineEditable field.
func (o *StringFieldPropertiesDto) SetInlineEditable(v bool) {
	o.InlineEditable = &v
}

// GetCreateEnum returns the CreateEnum field value if set, zero value otherwise.
func (o *StringFieldPropertiesDto) GetCreateEnum() bool {
	if o == nil || isNil(o.CreateEnum) {
		var ret bool
		return ret
	}
	return *o.CreateEnum
}

// GetCreateEnumOk returns a tuple with the CreateEnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringFieldPropertiesDto) GetCreateEnumOk() (*bool, bool) {
	if o == nil || isNil(o.CreateEnum) {
    return nil, false
	}
	return o.CreateEnum, true
}

// HasCreateEnum returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasCreateEnum() bool {
	if o != nil && !isNil(o.CreateEnum) {
		return true
	}

	return false
}

// SetCreateEnum gets a reference to the given bool and assigns it to the CreateEnum field.
func (o *StringFieldPropertiesDto) SetCreateEnum(v bool) {
	o.CreateEnum = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *StringFieldPropertiesDto) GetContentType() StringContentType {
	if o == nil || isNil(o.ContentType) {
		var ret StringContentType
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringFieldPropertiesDto) GetContentTypeOk() (*StringContentType, bool) {
	if o == nil || isNil(o.ContentType) {
    return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasContentType() bool {
	if o != nil && !isNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given StringContentType and assigns it to the ContentType field.
func (o *StringFieldPropertiesDto) SetContentType(v StringContentType) {
	o.ContentType = &v
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *StringFieldPropertiesDto) GetEditor() StringFieldEditor {
	if o == nil || isNil(o.Editor) {
		var ret StringFieldEditor
		return ret
	}
	return *o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringFieldPropertiesDto) GetEditorOk() (*StringFieldEditor, bool) {
	if o == nil || isNil(o.Editor) {
    return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *StringFieldPropertiesDto) HasEditor() bool {
	if o != nil && !isNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given StringFieldEditor and assigns it to the Editor field.
func (o *StringFieldPropertiesDto) SetEditor(v StringFieldEditor) {
	o.Editor = &v
}

func (o StringFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedFieldPropertiesDto, errFieldPropertiesDto := json.Marshal(o.FieldPropertiesDto)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	errFieldPropertiesDto = json.Unmarshal([]byte(serializedFieldPropertiesDto), &toSerialize)
	if errFieldPropertiesDto != nil {
		return []byte{}, errFieldPropertiesDto
	}
	if !isNil(o.DefaultValues) {
		toSerialize["defaultValues"] = o.DefaultValues
	}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if o.Pattern.IsSet() {
		toSerialize["pattern"] = o.Pattern.Get()
	}
	if o.PatternMessage.IsSet() {
		toSerialize["patternMessage"] = o.PatternMessage.Get()
	}
	if o.FolderId.IsSet() {
		toSerialize["folderId"] = o.FolderId.Get()
	}
	if o.MinLength.IsSet() {
		toSerialize["minLength"] = o.MinLength.Get()
	}
	if o.MaxLength.IsSet() {
		toSerialize["maxLength"] = o.MaxLength.Get()
	}
	if o.MinCharacters.IsSet() {
		toSerialize["minCharacters"] = o.MinCharacters.Get()
	}
	if o.MaxCharacters.IsSet() {
		toSerialize["maxCharacters"] = o.MaxCharacters.Get()
	}
	if o.MinWords.IsSet() {
		toSerialize["minWords"] = o.MinWords.Get()
	}
	if o.MaxWords.IsSet() {
		toSerialize["maxWords"] = o.MaxWords.Get()
	}
	if o.AllowedValues != nil {
		toSerialize["allowedValues"] = o.AllowedValues
	}
	if o.SchemaIds != nil {
		toSerialize["schemaIds"] = o.SchemaIds
	}
	if !isNil(o.IsUnique) {
		toSerialize["isUnique"] = o.IsUnique
	}
	if !isNil(o.IsEmbeddable) {
		toSerialize["isEmbeddable"] = o.IsEmbeddable
	}
	if !isNil(o.InlineEditable) {
		toSerialize["inlineEditable"] = o.InlineEditable
	}
	if !isNil(o.CreateEnum) {
		toSerialize["createEnum"] = o.CreateEnum
	}
	if !isNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !isNil(o.Editor) {
		toSerialize["editor"] = o.Editor
	}
	return json.Marshal(toSerialize)
}

type NullableStringFieldPropertiesDto struct {
	value *StringFieldPropertiesDto
	isSet bool
}

func (v NullableStringFieldPropertiesDto) Get() *StringFieldPropertiesDto {
	return v.value
}

func (v *NullableStringFieldPropertiesDto) Set(val *StringFieldPropertiesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStringFieldPropertiesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStringFieldPropertiesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringFieldPropertiesDto(val *StringFieldPropertiesDto) *NullableStringFieldPropertiesDto {
	return &NullableStringFieldPropertiesDto{value: val, isSet: true}
}

func (v NullableStringFieldPropertiesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringFieldPropertiesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


