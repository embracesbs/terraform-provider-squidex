/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContentDto struct for ContentDto
type ContentDto struct {
	// The links.
	Links map[string]ResourceLink `json:"_links"`
	// The if of the content item.
	Id *string `json:"id,omitempty"`
	// The user that has created the content item.
	CreatedBy string `json:"createdBy"`
	// The user that has updated the content item.
	LastModifiedBy string `json:"lastModifiedBy"`
	// The data of the content item.
	Data interface{} `json:"data"`
	ReferenceData *map[string]map[string]interface{} `json:"referenceData,omitempty"`
	// The date and time when the content item has been created.
	Created *time.Time `json:"created,omitempty"`
	// The date and time when the content item has been modified last.
	LastModified *time.Time `json:"lastModified,omitempty"`
	// The status of the content.
	Status *string `json:"status,omitempty"`
	// The new status of the content.
	NewStatus NullableString `json:"newStatus,omitempty"`
	// The color of the status.
	StatusColor *string `json:"statusColor,omitempty"`
	// The color of the new status.
	NewStatusColor NullableString `json:"newStatusColor,omitempty"`
	// The UI token.
	EditToken NullableString `json:"editToken,omitempty"`
	ScheduleJob *ScheduleJobDto `json:"scheduleJob,omitempty"`
	// The id of the schema.
	SchemaId *string `json:"schemaId,omitempty"`
	// The name of the schema.
	SchemaName NullableString `json:"schemaName,omitempty"`
	// The display name of the schema.
	SchemaDisplayName NullableString `json:"schemaDisplayName,omitempty"`
	// The reference fields.
	ReferenceFields []FieldDto `json:"referenceFields,omitempty"`
	// Indicates whether the content is deleted.
	IsDeleted *bool `json:"isDeleted,omitempty"`
	// The version of the content.
	Version *int64 `json:"version,omitempty"`
}

// NewContentDto instantiates a new ContentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentDto(links map[string]ResourceLink, createdBy string, lastModifiedBy string, data interface{}) *ContentDto {
	this := ContentDto{}
	this.Links = links
	this.CreatedBy = createdBy
	this.LastModifiedBy = lastModifiedBy
	this.Data = data
	return &this
}

// NewContentDtoWithDefaults instantiates a new ContentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentDtoWithDefaults() *ContentDto {
	this := ContentDto{}
	return &this
}

// GetLinks returns the Links field value
func (o *ContentDto) GetLinks() map[string]ResourceLink {
	if o == nil {
		var ret map[string]ResourceLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ContentDto) GetLinksOk() (*map[string]ResourceLink, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *ContentDto) SetLinks(v map[string]ResourceLink) {
	o.Links = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContentDto) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContentDto) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContentDto) SetId(v string) {
	o.Id = &v
}

// GetCreatedBy returns the CreatedBy field value
func (o *ContentDto) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *ContentDto) GetCreatedByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *ContentDto) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetLastModifiedBy returns the LastModifiedBy field value
func (o *ContentDto) GetLastModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModifiedBy
}

// GetLastModifiedByOk returns a tuple with the LastModifiedBy field value
// and a boolean to check if the value has been set.
func (o *ContentDto) GetLastModifiedByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastModifiedBy, true
}

// SetLastModifiedBy sets field value
func (o *ContentDto) SetLastModifiedBy(v string) {
	o.LastModifiedBy = v
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ContentDto) GetData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentDto) GetDataOk() (*interface{}, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ContentDto) SetData(v interface{}) {
	o.Data = v
}

// GetReferenceData returns the ReferenceData field value if set, zero value otherwise.
func (o *ContentDto) GetReferenceData() map[string]map[string]interface{} {
	if o == nil || isNil(o.ReferenceData) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.ReferenceData
}

// GetReferenceDataOk returns a tuple with the ReferenceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetReferenceDataOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.ReferenceData) {
    return nil, false
	}
	return o.ReferenceData, true
}

// HasReferenceData returns a boolean if a field has been set.
func (o *ContentDto) HasReferenceData() bool {
	if o != nil && !isNil(o.ReferenceData) {
		return true
	}

	return false
}

// SetReferenceData gets a reference to the given map[string]map[string]interface{} and assigns it to the ReferenceData field.
func (o *ContentDto) SetReferenceData(v map[string]map[string]interface{}) {
	o.ReferenceData = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ContentDto) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
    return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ContentDto) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ContentDto) SetCreated(v time.Time) {
	o.Created = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *ContentDto) GetLastModified() time.Time {
	if o == nil || isNil(o.LastModified) {
		var ret time.Time
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastModified) {
    return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *ContentDto) HasLastModified() bool {
	if o != nil && !isNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given time.Time and assigns it to the LastModified field.
func (o *ContentDto) SetLastModified(v time.Time) {
	o.LastModified = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContentDto) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContentDto) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ContentDto) SetStatus(v string) {
	o.Status = &v
}

// GetNewStatus returns the NewStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentDto) GetNewStatus() string {
	if o == nil || isNil(o.NewStatus.Get()) {
		var ret string
		return ret
	}
	return *o.NewStatus.Get()
}

// GetNewStatusOk returns a tuple with the NewStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentDto) GetNewStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.NewStatus.Get(), o.NewStatus.IsSet()
}

// HasNewStatus returns a boolean if a field has been set.
func (o *ContentDto) HasNewStatus() bool {
	if o != nil && o.NewStatus.IsSet() {
		return true
	}

	return false
}

// SetNewStatus gets a reference to the given NullableString and assigns it to the NewStatus field.
func (o *ContentDto) SetNewStatus(v string) {
	o.NewStatus.Set(&v)
}
// SetNewStatusNil sets the value for NewStatus to be an explicit nil
func (o *ContentDto) SetNewStatusNil() {
	o.NewStatus.Set(nil)
}

// UnsetNewStatus ensures that no value is present for NewStatus, not even an explicit nil
func (o *ContentDto) UnsetNewStatus() {
	o.NewStatus.Unset()
}

// GetStatusColor returns the StatusColor field value if set, zero value otherwise.
func (o *ContentDto) GetStatusColor() string {
	if o == nil || isNil(o.StatusColor) {
		var ret string
		return ret
	}
	return *o.StatusColor
}

// GetStatusColorOk returns a tuple with the StatusColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetStatusColorOk() (*string, bool) {
	if o == nil || isNil(o.StatusColor) {
    return nil, false
	}
	return o.StatusColor, true
}

// HasStatusColor returns a boolean if a field has been set.
func (o *ContentDto) HasStatusColor() bool {
	if o != nil && !isNil(o.StatusColor) {
		return true
	}

	return false
}

// SetStatusColor gets a reference to the given string and assigns it to the StatusColor field.
func (o *ContentDto) SetStatusColor(v string) {
	o.StatusColor = &v
}

// GetNewStatusColor returns the NewStatusColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentDto) GetNewStatusColor() string {
	if o == nil || isNil(o.NewStatusColor.Get()) {
		var ret string
		return ret
	}
	return *o.NewStatusColor.Get()
}

// GetNewStatusColorOk returns a tuple with the NewStatusColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentDto) GetNewStatusColorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.NewStatusColor.Get(), o.NewStatusColor.IsSet()
}

// HasNewStatusColor returns a boolean if a field has been set.
func (o *ContentDto) HasNewStatusColor() bool {
	if o != nil && o.NewStatusColor.IsSet() {
		return true
	}

	return false
}

// SetNewStatusColor gets a reference to the given NullableString and assigns it to the NewStatusColor field.
func (o *ContentDto) SetNewStatusColor(v string) {
	o.NewStatusColor.Set(&v)
}
// SetNewStatusColorNil sets the value for NewStatusColor to be an explicit nil
func (o *ContentDto) SetNewStatusColorNil() {
	o.NewStatusColor.Set(nil)
}

// UnsetNewStatusColor ensures that no value is present for NewStatusColor, not even an explicit nil
func (o *ContentDto) UnsetNewStatusColor() {
	o.NewStatusColor.Unset()
}

// GetEditToken returns the EditToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentDto) GetEditToken() string {
	if o == nil || isNil(o.EditToken.Get()) {
		var ret string
		return ret
	}
	return *o.EditToken.Get()
}

// GetEditTokenOk returns a tuple with the EditToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentDto) GetEditTokenOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.EditToken.Get(), o.EditToken.IsSet()
}

// HasEditToken returns a boolean if a field has been set.
func (o *ContentDto) HasEditToken() bool {
	if o != nil && o.EditToken.IsSet() {
		return true
	}

	return false
}

// SetEditToken gets a reference to the given NullableString and assigns it to the EditToken field.
func (o *ContentDto) SetEditToken(v string) {
	o.EditToken.Set(&v)
}
// SetEditTokenNil sets the value for EditToken to be an explicit nil
func (o *ContentDto) SetEditTokenNil() {
	o.EditToken.Set(nil)
}

// UnsetEditToken ensures that no value is present for EditToken, not even an explicit nil
func (o *ContentDto) UnsetEditToken() {
	o.EditToken.Unset()
}

// GetScheduleJob returns the ScheduleJob field value if set, zero value otherwise.
func (o *ContentDto) GetScheduleJob() ScheduleJobDto {
	if o == nil || isNil(o.ScheduleJob) {
		var ret ScheduleJobDto
		return ret
	}
	return *o.ScheduleJob
}

// GetScheduleJobOk returns a tuple with the ScheduleJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetScheduleJobOk() (*ScheduleJobDto, bool) {
	if o == nil || isNil(o.ScheduleJob) {
    return nil, false
	}
	return o.ScheduleJob, true
}

// HasScheduleJob returns a boolean if a field has been set.
func (o *ContentDto) HasScheduleJob() bool {
	if o != nil && !isNil(o.ScheduleJob) {
		return true
	}

	return false
}

// SetScheduleJob gets a reference to the given ScheduleJobDto and assigns it to the ScheduleJob field.
func (o *ContentDto) SetScheduleJob(v ScheduleJobDto) {
	o.ScheduleJob = &v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *ContentDto) GetSchemaId() string {
	if o == nil || isNil(o.SchemaId) {
		var ret string
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetSchemaIdOk() (*string, bool) {
	if o == nil || isNil(o.SchemaId) {
    return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *ContentDto) HasSchemaId() bool {
	if o != nil && !isNil(o.SchemaId) {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given string and assigns it to the SchemaId field.
func (o *ContentDto) SetSchemaId(v string) {
	o.SchemaId = &v
}

// GetSchemaName returns the SchemaName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentDto) GetSchemaName() string {
	if o == nil || isNil(o.SchemaName.Get()) {
		var ret string
		return ret
	}
	return *o.SchemaName.Get()
}

// GetSchemaNameOk returns a tuple with the SchemaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentDto) GetSchemaNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SchemaName.Get(), o.SchemaName.IsSet()
}

// HasSchemaName returns a boolean if a field has been set.
func (o *ContentDto) HasSchemaName() bool {
	if o != nil && o.SchemaName.IsSet() {
		return true
	}

	return false
}

// SetSchemaName gets a reference to the given NullableString and assigns it to the SchemaName field.
func (o *ContentDto) SetSchemaName(v string) {
	o.SchemaName.Set(&v)
}
// SetSchemaNameNil sets the value for SchemaName to be an explicit nil
func (o *ContentDto) SetSchemaNameNil() {
	o.SchemaName.Set(nil)
}

// UnsetSchemaName ensures that no value is present for SchemaName, not even an explicit nil
func (o *ContentDto) UnsetSchemaName() {
	o.SchemaName.Unset()
}

// GetSchemaDisplayName returns the SchemaDisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentDto) GetSchemaDisplayName() string {
	if o == nil || isNil(o.SchemaDisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.SchemaDisplayName.Get()
}

// GetSchemaDisplayNameOk returns a tuple with the SchemaDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentDto) GetSchemaDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SchemaDisplayName.Get(), o.SchemaDisplayName.IsSet()
}

// HasSchemaDisplayName returns a boolean if a field has been set.
func (o *ContentDto) HasSchemaDisplayName() bool {
	if o != nil && o.SchemaDisplayName.IsSet() {
		return true
	}

	return false
}

// SetSchemaDisplayName gets a reference to the given NullableString and assigns it to the SchemaDisplayName field.
func (o *ContentDto) SetSchemaDisplayName(v string) {
	o.SchemaDisplayName.Set(&v)
}
// SetSchemaDisplayNameNil sets the value for SchemaDisplayName to be an explicit nil
func (o *ContentDto) SetSchemaDisplayNameNil() {
	o.SchemaDisplayName.Set(nil)
}

// UnsetSchemaDisplayName ensures that no value is present for SchemaDisplayName, not even an explicit nil
func (o *ContentDto) UnsetSchemaDisplayName() {
	o.SchemaDisplayName.Unset()
}

// GetReferenceFields returns the ReferenceFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentDto) GetReferenceFields() []FieldDto {
	if o == nil {
		var ret []FieldDto
		return ret
	}
	return o.ReferenceFields
}

// GetReferenceFieldsOk returns a tuple with the ReferenceFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentDto) GetReferenceFieldsOk() ([]FieldDto, bool) {
	if o == nil || isNil(o.ReferenceFields) {
    return nil, false
	}
	return o.ReferenceFields, true
}

// HasReferenceFields returns a boolean if a field has been set.
func (o *ContentDto) HasReferenceFields() bool {
	if o != nil && isNil(o.ReferenceFields) {
		return true
	}

	return false
}

// SetReferenceFields gets a reference to the given []FieldDto and assigns it to the ReferenceFields field.
func (o *ContentDto) SetReferenceFields(v []FieldDto) {
	o.ReferenceFields = v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *ContentDto) GetIsDeleted() bool {
	if o == nil || isNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetIsDeletedOk() (*bool, bool) {
	if o == nil || isNil(o.IsDeleted) {
    return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *ContentDto) HasIsDeleted() bool {
	if o != nil && !isNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *ContentDto) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ContentDto) GetVersion() int64 {
	if o == nil || isNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDto) GetVersionOk() (*int64, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ContentDto) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *ContentDto) SetVersion(v int64) {
	o.Version = &v
}

func (o ContentDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_links"] = o.Links
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if true {
		toSerialize["lastModifiedBy"] = o.LastModifiedBy
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.ReferenceData) {
		toSerialize["referenceData"] = o.ReferenceData
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.NewStatus.IsSet() {
		toSerialize["newStatus"] = o.NewStatus.Get()
	}
	if !isNil(o.StatusColor) {
		toSerialize["statusColor"] = o.StatusColor
	}
	if o.NewStatusColor.IsSet() {
		toSerialize["newStatusColor"] = o.NewStatusColor.Get()
	}
	if o.EditToken.IsSet() {
		toSerialize["editToken"] = o.EditToken.Get()
	}
	if !isNil(o.ScheduleJob) {
		toSerialize["scheduleJob"] = o.ScheduleJob
	}
	if !isNil(o.SchemaId) {
		toSerialize["schemaId"] = o.SchemaId
	}
	if o.SchemaName.IsSet() {
		toSerialize["schemaName"] = o.SchemaName.Get()
	}
	if o.SchemaDisplayName.IsSet() {
		toSerialize["schemaDisplayName"] = o.SchemaDisplayName.Get()
	}
	if o.ReferenceFields != nil {
		toSerialize["referenceFields"] = o.ReferenceFields
	}
	if !isNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableContentDto struct {
	value *ContentDto
	isSet bool
}

func (v NullableContentDto) Get() *ContentDto {
	return v.value
}

func (v *NullableContentDto) Set(val *ContentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableContentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableContentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentDto(val *ContentDto) *NullableContentDto {
	return &NullableContentDto{value: val, isSet: true}
}

func (v NullableContentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


