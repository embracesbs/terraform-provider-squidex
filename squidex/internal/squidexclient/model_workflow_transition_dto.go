/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// WorkflowTransitionDto struct for WorkflowTransitionDto
type WorkflowTransitionDto struct {
	// The optional expression.
	Expression NullableString `json:"expression,omitempty"`
	// The optional restricted role.
	Roles []string `json:"roles,omitempty"`
}

// NewWorkflowTransitionDto instantiates a new WorkflowTransitionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowTransitionDto() *WorkflowTransitionDto {
	this := WorkflowTransitionDto{}
	return &this
}

// NewWorkflowTransitionDtoWithDefaults instantiates a new WorkflowTransitionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowTransitionDtoWithDefaults() *WorkflowTransitionDto {
	this := WorkflowTransitionDto{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowTransitionDto) GetExpression() string {
	if o == nil || isNil(o.Expression.Get()) {
		var ret string
		return ret
	}
	return *o.Expression.Get()
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowTransitionDto) GetExpressionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Expression.Get(), o.Expression.IsSet()
}

// HasExpression returns a boolean if a field has been set.
func (o *WorkflowTransitionDto) HasExpression() bool {
	if o != nil && o.Expression.IsSet() {
		return true
	}

	return false
}

// SetExpression gets a reference to the given NullableString and assigns it to the Expression field.
func (o *WorkflowTransitionDto) SetExpression(v string) {
	o.Expression.Set(&v)
}
// SetExpressionNil sets the value for Expression to be an explicit nil
func (o *WorkflowTransitionDto) SetExpressionNil() {
	o.Expression.Set(nil)
}

// UnsetExpression ensures that no value is present for Expression, not even an explicit nil
func (o *WorkflowTransitionDto) UnsetExpression() {
	o.Expression.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowTransitionDto) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowTransitionDto) GetRolesOk() ([]string, bool) {
	if o == nil || isNil(o.Roles) {
    return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *WorkflowTransitionDto) HasRoles() bool {
	if o != nil && isNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *WorkflowTransitionDto) SetRoles(v []string) {
	o.Roles = v
}

func (o WorkflowTransitionDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Expression.IsSet() {
		toSerialize["expression"] = o.Expression.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowTransitionDto struct {
	value *WorkflowTransitionDto
	isSet bool
}

func (v NullableWorkflowTransitionDto) Get() *WorkflowTransitionDto {
	return v.value
}

func (v *NullableWorkflowTransitionDto) Set(val *WorkflowTransitionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTransitionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTransitionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTransitionDto(val *WorkflowTransitionDto) *NullableWorkflowTransitionDto {
	return &NullableWorkflowTransitionDto{value: val, isSet: true}
}

func (v NullableWorkflowTransitionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTransitionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


