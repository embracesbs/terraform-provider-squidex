/*
Squidex API

Testing CommentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package squidexclient

import (
	openapiclient "./openapi"
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_CommentsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CommentsApiService CommentsDeleteComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var commentsId string
		var commentId string

		resp, httpRes, err := apiClient.CommentsApi.CommentsDeleteComment(context.Background(), app, commentsId, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentsApiService CommentsGetComments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var commentsId string

		resp, httpRes, err := apiClient.CommentsApi.CommentsGetComments(context.Background(), app, commentsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentsApiService CommentsGetWatchingUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var resource string

		resp, httpRes, err := apiClient.CommentsApi.CommentsGetWatchingUsers(context.Background(), app, resource).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentsApiService CommentsPostComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var commentsId string

		resp, httpRes, err := apiClient.CommentsApi.CommentsPostComment(context.Background(), app, commentsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommentsApiService CommentsPutComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var commentsId string
		var commentId string

		resp, httpRes, err := apiClient.CommentsApi.CommentsPutComment(context.Background(), app, commentsId, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
