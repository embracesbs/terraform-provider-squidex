/*
Squidex API

Testing AssetsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package squidexclient

import (
	"context"
	"testing"

	"github.com/embracesbs/terraform-provider-squidex/squidex/internal/squidexclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_AssetsApiService(t *testing.T) {

	configuration := squidexclient.NewConfiguration()
	apiClient := squidexclient.NewAPIClient(configuration)

	t.Run("Test AssetsApiService AssetContentGetAssetContent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AssetsApi.AssetContentGetAssetContent(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetContentGetAssetContentBySlug", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var idOrSlug string
		var more string

		resp, httpRes, err := apiClient.AssetsApi.AssetContentGetAssetContentBySlug(context.Background(), app, idOrSlug, more).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetFoldersDeleteAssetFolder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.AssetsApi.AssetFoldersDeleteAssetFolder(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetFoldersGetAssetFolders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.AssetsApi.AssetFoldersGetAssetFolders(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetFoldersPostAssetFolder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.AssetsApi.AssetFoldersPostAssetFolder(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetFoldersPutAssetFolder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.AssetsApi.AssetFoldersPutAssetFolder(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetFoldersPutAssetFolderParent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.AssetsApi.AssetFoldersPutAssetFolderParent(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsBulkUpdateAssets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.AssetsApi.AssetsBulkUpdateAssets(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsDeleteAsset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.AssetsApi.AssetsDeleteAsset(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsGetAsset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.AssetsApi.AssetsGetAsset(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsGetAssets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.AssetsApi.AssetsGetAssets(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsGetAssetsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.AssetsApi.AssetsGetAssetsPost(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsGetTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.AssetsApi.AssetsGetTags(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsPostAsset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.AssetsApi.AssetsPostAsset(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsPostUpsertAsset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.AssetsApi.AssetsPostUpsertAsset(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsPutAsset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.AssetsApi.AssetsPutAsset(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsPutAssetContent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.AssetsApi.AssetsPutAssetContent(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsPutAssetParent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.AssetsApi.AssetsPutAssetParent(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetsPutTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var name string

		resp, httpRes, err := apiClient.AssetsApi.AssetsPutTag(context.Background(), app, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
