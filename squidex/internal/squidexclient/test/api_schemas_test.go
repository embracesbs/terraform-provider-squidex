/*
Squidex API

Testing SchemasApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_SchemasApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test SchemasApiService SchemaFieldsDeleteField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsDeleteField(context.Background(), app, schema, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsDeleteNestedField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsDeleteNestedField(context.Background(), app, schema, parentId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsDisableField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsDisableField(context.Background(), app, schema, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsDisableNestedField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsDisableNestedField(context.Background(), app, schema, parentId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsEnableField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsEnableField(context.Background(), app, schema, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsEnableNestedField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsEnableNestedField(context.Background(), app, schema, parentId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsHideField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsHideField(context.Background(), app, schema, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsHideNestedField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsHideNestedField(context.Background(), app, schema, parentId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsLockField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsLockField(context.Background(), app, schema, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsLockNestedField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsLockNestedField(context.Background(), app, schema, parentId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsPostField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsPostField(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsPostNestedField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsPostNestedField(context.Background(), app, schema, parentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsPutField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsPutField(context.Background(), app, schema, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsPutNestedField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsPutNestedField(context.Background(), app, schema, parentId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsPutNestedFieldOrdering", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsPutNestedFieldOrdering(context.Background(), app, schema, parentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsPutSchemaFieldOrdering", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsPutSchemaFieldOrdering(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsPutSchemaUIFields", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsPutSchemaUIFields(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsShowField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsShowField(context.Background(), app, schema, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemaFieldsShowNestedField", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string
        var parentId int64
        var id int64

        resp, httpRes, err := apiClient.SchemasApi.SchemaFieldsShowNestedField(context.Background(), app, schema, parentId, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasDeleteSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasDeleteSchema(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasGetSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasGetSchema(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasGetSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string

        resp, httpRes, err := apiClient.SchemasApi.SchemasGetSchemas(context.Background(), app).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasPostSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string

        resp, httpRes, err := apiClient.SchemasApi.SchemasPostSchema(context.Background(), app).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasPublishSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasPublishSchema(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasPutCategory", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasPutCategory(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasPutPreviewUrls", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasPutPreviewUrls(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasPutRules", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasPutRules(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasPutSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasPutSchema(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasPutSchemaSync", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasPutSchemaSync(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasPutScripts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasPutScripts(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService SchemasUnpublishSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var app string
        var schema string

        resp, httpRes, err := apiClient.SchemasApi.SchemasUnpublishSchema(context.Background(), app, schema).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
