/*
Squidex API

Testing BackupsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package squidexclient

import (
	"context"
	"testing"

	"github.com/embracesbs/terraform-provider-squidex/squidex/internal/squidexclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_BackupsApiService(t *testing.T) {

	configuration := squidexclient.NewConfiguration()
	apiClient := squidexclient.NewAPIClient(configuration)

	t.Run("Test BackupsApiService BackupContentGetBackupContent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.BackupsApi.BackupContentGetBackupContent(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupsApiService BackupContentGetBackupContentV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.BackupsApi.BackupContentGetBackupContentV2(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupsApiService BackupsDeleteBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.BackupsApi.BackupsDeleteBackup(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupsApiService BackupsGetBackups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.BackupsApi.BackupsGetBackups(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupsApiService BackupsPostBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		httpRes, err := apiClient.BackupsApi.BackupsPostBackup(context.Background(), app).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupsApiService RestoreGetRestoreJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupsApi.RestoreGetRestoreJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupsApiService RestorePostRestoreJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BackupsApi.RestorePostRestoreJob(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
