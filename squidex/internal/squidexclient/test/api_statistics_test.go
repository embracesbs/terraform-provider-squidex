/*
Squidex API

Testing StatisticsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package squidexclient

import (
	openapiclient "./openapi"
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_StatisticsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StatisticsApiService UsagesGetCurrentStorageSize", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.StatisticsApi.UsagesGetCurrentStorageSize(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StatisticsApiService UsagesGetLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.StatisticsApi.UsagesGetLog(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StatisticsApiService UsagesGetStorageSizes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var fromDate string
		var toDate string

		resp, httpRes, err := apiClient.StatisticsApi.UsagesGetStorageSizes(context.Background(), app, fromDate, toDate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StatisticsApiService UsagesGetUsages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var fromDate string
		var toDate string

		resp, httpRes, err := apiClient.StatisticsApi.UsagesGetUsages(context.Background(), app, fromDate, toDate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
