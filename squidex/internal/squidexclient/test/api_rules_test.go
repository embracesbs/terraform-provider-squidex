/*
Squidex API

Testing RulesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package squidexclient

import (
	"context"
	"testing"

	"github.com/embracesbs/terraform-provider-squidex/squidex/internal/squidexclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_RulesApiService(t *testing.T) {

	configuration := squidexclient.NewConfiguration()
	apiClient := squidexclient.NewAPIClient(configuration)

	t.Run("Test RulesApiService RulesDeleteEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.RulesApi.RulesDeleteEvent(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesDeleteEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		httpRes, err := apiClient.RulesApi.RulesDeleteEvents(context.Background(), app).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesDeleteRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.RulesApi.RulesDeleteRule(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesDeleteRuleEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.RulesApi.RulesDeleteRuleEvents(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesDeleteRuleRun", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		httpRes, err := apiClient.RulesApi.RulesDeleteRuleRun(context.Background(), app).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesDisableRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.RulesApi.RulesDisableRule(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesEnableRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.RulesApi.RulesEnableRule(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesGetActions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RulesApi.RulesGetActions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesGetEventSchema", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.RulesApi.RulesGetEventSchema(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesGetEventTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RulesApi.RulesGetEventTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesGetEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.RulesApi.RulesGetEvents(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesGetRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.RulesApi.RulesGetRules(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesPostRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.RulesApi.RulesPostRule(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesPutEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.RulesApi.RulesPutEvent(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesPutRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.RulesApi.RulesPutRule(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesPutRuleRun", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.RulesApi.RulesPutRuleRun(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesSimulateGET", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		resp, httpRes, err := apiClient.RulesApi.RulesSimulateGET(context.Background(), app, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesSimulatePOST", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.RulesApi.RulesSimulatePOST(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesApiService RulesTriggerRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var id string

		httpRes, err := apiClient.RulesApi.RulesTriggerRule(context.Background(), app, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
