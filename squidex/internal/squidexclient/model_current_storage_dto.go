/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CurrentStorageDto struct for CurrentStorageDto
type CurrentStorageDto struct {
	// The size in bytes.
	Size *int64 `json:"size,omitempty"`
	// The maximum allowed asset size.
	MaxAllowed *int64 `json:"maxAllowed,omitempty"`
}

// NewCurrentStorageDto instantiates a new CurrentStorageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentStorageDto() *CurrentStorageDto {
	this := CurrentStorageDto{}
	return &this
}

// NewCurrentStorageDtoWithDefaults instantiates a new CurrentStorageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentStorageDtoWithDefaults() *CurrentStorageDto {
	this := CurrentStorageDto{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CurrentStorageDto) GetSize() int64 {
	if o == nil || isNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentStorageDto) GetSizeOk() (*int64, bool) {
	if o == nil || isNil(o.Size) {
    return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CurrentStorageDto) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *CurrentStorageDto) SetSize(v int64) {
	o.Size = &v
}

// GetMaxAllowed returns the MaxAllowed field value if set, zero value otherwise.
func (o *CurrentStorageDto) GetMaxAllowed() int64 {
	if o == nil || isNil(o.MaxAllowed) {
		var ret int64
		return ret
	}
	return *o.MaxAllowed
}

// GetMaxAllowedOk returns a tuple with the MaxAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentStorageDto) GetMaxAllowedOk() (*int64, bool) {
	if o == nil || isNil(o.MaxAllowed) {
    return nil, false
	}
	return o.MaxAllowed, true
}

// HasMaxAllowed returns a boolean if a field has been set.
func (o *CurrentStorageDto) HasMaxAllowed() bool {
	if o != nil && !isNil(o.MaxAllowed) {
		return true
	}

	return false
}

// SetMaxAllowed gets a reference to the given int64 and assigns it to the MaxAllowed field.
func (o *CurrentStorageDto) SetMaxAllowed(v int64) {
	o.MaxAllowed = &v
}

func (o CurrentStorageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !isNil(o.MaxAllowed) {
		toSerialize["maxAllowed"] = o.MaxAllowed
	}
	return json.Marshal(toSerialize)
}

type NullableCurrentStorageDto struct {
	value *CurrentStorageDto
	isSet bool
}

func (v NullableCurrentStorageDto) Get() *CurrentStorageDto {
	return v.value
}

func (v *NullableCurrentStorageDto) Set(val *CurrentStorageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentStorageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentStorageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentStorageDto(val *CurrentStorageDto) *NullableCurrentStorageDto {
	return &NullableCurrentStorageDto{value: val, isSet: true}
}

func (v NullableCurrentStorageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentStorageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


