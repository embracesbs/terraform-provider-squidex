/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenameTagDto struct for RenameTagDto
type RenameTagDto struct {
	// The new name for the tag.
	TagName string `json:"tagName"`
}

// NewRenameTagDto instantiates a new RenameTagDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameTagDto(tagName string) *RenameTagDto {
	this := RenameTagDto{}
	this.TagName = tagName
	return &this
}

// NewRenameTagDtoWithDefaults instantiates a new RenameTagDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameTagDtoWithDefaults() *RenameTagDto {
	this := RenameTagDto{}
	return &this
}

// GetTagName returns the TagName field value
func (o *RenameTagDto) GetTagName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value
// and a boolean to check if the value has been set.
func (o *RenameTagDto) GetTagNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TagName, true
}

// SetTagName sets field value
func (o *RenameTagDto) SetTagName(v string) {
	o.TagName = v
}

func (o RenameTagDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tagName"] = o.TagName
	}
	return json.Marshal(toSerialize)
}

type NullableRenameTagDto struct {
	value *RenameTagDto
	isSet bool
}

func (v NullableRenameTagDto) Get() *RenameTagDto {
	return v.value
}

func (v *NullableRenameTagDto) Set(val *RenameTagDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameTagDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameTagDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameTagDto(val *RenameTagDto) *NullableRenameTagDto {
	return &NullableRenameTagDto{value: val, isSet: true}
}

func (v NullableRenameTagDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameTagDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


