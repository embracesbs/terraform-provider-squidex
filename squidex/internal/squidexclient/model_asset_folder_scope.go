/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// AssetFolderScope 
type AssetFolderScope string

// List of AssetFolderScope
const (
	PATH_AND_ITEMS AssetFolderScope = "PathAndItems"
	PATH AssetFolderScope = "Path"
	ITEMS AssetFolderScope = "Items"
)

// All allowed values of AssetFolderScope enum
var AllowedAssetFolderScopeEnumValues = []AssetFolderScope{
	"PathAndItems",
	"Path",
	"Items",
}

func (v *AssetFolderScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetFolderScope(value)
	for _, existing := range AllowedAssetFolderScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetFolderScope", value)
}

// NewAssetFolderScopeFromValue returns a pointer to a valid AssetFolderScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetFolderScopeFromValue(v string) (*AssetFolderScope, error) {
	ev := AssetFolderScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetFolderScope: valid values are %v", v, AllowedAssetFolderScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetFolderScope) IsValid() bool {
	for _, existing := range AllowedAssetFolderScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetFolderScope value
func (v AssetFolderScope) Ptr() *AssetFolderScope {
	return &v
}

type NullableAssetFolderScope struct {
	value *AssetFolderScope
	isSet bool
}

func (v NullableAssetFolderScope) Get() *AssetFolderScope {
	return v.value
}

func (v *NullableAssetFolderScope) Set(val *AssetFolderScope) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetFolderScope) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetFolderScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetFolderScope(val *AssetFolderScope) *NullableAssetFolderScope {
	return &NullableAssetFolderScope{value: val, isSet: true}
}

func (v NullableAssetFolderScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetFolderScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

