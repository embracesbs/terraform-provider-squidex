/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ReorderFieldsDto struct for ReorderFieldsDto
type ReorderFieldsDto struct {
	// The field ids in the target order.
	FieldIds []int64 `json:"fieldIds"`
}

// NewReorderFieldsDto instantiates a new ReorderFieldsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReorderFieldsDto(fieldIds []int64) *ReorderFieldsDto {
	this := ReorderFieldsDto{}
	this.FieldIds = fieldIds
	return &this
}

// NewReorderFieldsDtoWithDefaults instantiates a new ReorderFieldsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReorderFieldsDtoWithDefaults() *ReorderFieldsDto {
	this := ReorderFieldsDto{}
	return &this
}

// GetFieldIds returns the FieldIds field value
func (o *ReorderFieldsDto) GetFieldIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.FieldIds
}

// GetFieldIdsOk returns a tuple with the FieldIds field value
// and a boolean to check if the value has been set.
func (o *ReorderFieldsDto) GetFieldIdsOk() ([]int64, bool) {
	if o == nil {
    return nil, false
	}
	return o.FieldIds, true
}

// SetFieldIds sets field value
func (o *ReorderFieldsDto) SetFieldIds(v []int64) {
	o.FieldIds = v
}

func (o ReorderFieldsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fieldIds"] = o.FieldIds
	}
	return json.Marshal(toSerialize)
}

type NullableReorderFieldsDto struct {
	value *ReorderFieldsDto
	isSet bool
}

func (v NullableReorderFieldsDto) Get() *ReorderFieldsDto {
	return v.value
}

func (v *NullableReorderFieldsDto) Set(val *ReorderFieldsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableReorderFieldsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableReorderFieldsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReorderFieldsDto(val *ReorderFieldsDto) *NullableReorderFieldsDto {
	return &NullableReorderFieldsDto{value: val, isSet: true}
}

func (v NullableReorderFieldsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReorderFieldsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


