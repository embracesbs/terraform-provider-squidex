/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FieldRuleAction 
type FieldRuleAction string

// List of FieldRuleAction
const (
	DISABLE FieldRuleAction = "Disable"
	HIDE FieldRuleAction = "Hide"
	REQUIRE FieldRuleAction = "Require"
)

// All allowed values of FieldRuleAction enum
var AllowedFieldRuleActionEnumValues = []FieldRuleAction{
	"Disable",
	"Hide",
	"Require",
}

func (v *FieldRuleAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldRuleAction(value)
	for _, existing := range AllowedFieldRuleActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldRuleAction", value)
}

// NewFieldRuleActionFromValue returns a pointer to a valid FieldRuleAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldRuleActionFromValue(v string) (*FieldRuleAction, error) {
	ev := FieldRuleAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldRuleAction: valid values are %v", v, AllowedFieldRuleActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldRuleAction) IsValid() bool {
	for _, existing := range AllowedFieldRuleActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FieldRuleAction value
func (v FieldRuleAction) Ptr() *FieldRuleAction {
	return &v
}

type NullableFieldRuleAction struct {
	value *FieldRuleAction
	isSet bool
}

func (v NullableFieldRuleAction) Get() *FieldRuleAction {
	return v.value
}

func (v *NullableFieldRuleAction) Set(val *FieldRuleAction) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldRuleAction) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldRuleAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldRuleAction(val *FieldRuleAction) *NullableFieldRuleAction {
	return &NullableFieldRuleAction{value: val, isSet: true}
}

func (v NullableFieldRuleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldRuleAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

