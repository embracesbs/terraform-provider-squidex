/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DateTimeFieldEditor 
type DateTimeFieldEditor string

// List of DateTimeFieldEditor
const (
	DATE DateTimeFieldEditor = "Date"
	DATE_TIME DateTimeFieldEditor = "DateTime"
)

// All allowed values of DateTimeFieldEditor enum
var AllowedDateTimeFieldEditorEnumValues = []DateTimeFieldEditor{
	"Date",
	"DateTime",
}

func (v *DateTimeFieldEditor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DateTimeFieldEditor(value)
	for _, existing := range AllowedDateTimeFieldEditorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DateTimeFieldEditor", value)
}

// NewDateTimeFieldEditorFromValue returns a pointer to a valid DateTimeFieldEditor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDateTimeFieldEditorFromValue(v string) (*DateTimeFieldEditor, error) {
	ev := DateTimeFieldEditor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DateTimeFieldEditor: valid values are %v", v, AllowedDateTimeFieldEditorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DateTimeFieldEditor) IsValid() bool {
	for _, existing := range AllowedDateTimeFieldEditorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DateTimeFieldEditor value
func (v DateTimeFieldEditor) Ptr() *DateTimeFieldEditor {
	return &v
}

type NullableDateTimeFieldEditor struct {
	value *DateTimeFieldEditor
	isSet bool
}

func (v NullableDateTimeFieldEditor) Get() *DateTimeFieldEditor {
	return v.value
}

func (v *NullableDateTimeFieldEditor) Set(val *DateTimeFieldEditor) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeFieldEditor) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeFieldEditor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeFieldEditor(val *DateTimeFieldEditor) *NullableDateTimeFieldEditor {
	return &NullableDateTimeFieldEditor{value: val, isSet: true}
}

func (v NullableDateTimeFieldEditor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeFieldEditor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

