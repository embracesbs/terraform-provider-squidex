/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UsageRuleTriggerDto struct for UsageRuleTriggerDto
type UsageRuleTriggerDto struct {
	RuleTriggerDto
	// The number of monthly api calls.
	Limit *int32 `json:"limit,omitempty"`
	// The number of days to check or null for the current month.
	NumDays NullableInt32 `json:"numDays,omitempty"`
}

// NewUsageRuleTriggerDto instantiates a new UsageRuleTriggerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageRuleTriggerDto(triggerType string) *UsageRuleTriggerDto {
	this := UsageRuleTriggerDto{}
	this.TriggerType = triggerType
	return &this
}

// NewUsageRuleTriggerDtoWithDefaults instantiates a new UsageRuleTriggerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageRuleTriggerDtoWithDefaults() *UsageRuleTriggerDto {
	this := UsageRuleTriggerDto{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *UsageRuleTriggerDto) GetLimit() int32 {
	if o == nil || isNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageRuleTriggerDto) GetLimitOk() (*int32, bool) {
	if o == nil || isNil(o.Limit) {
    return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *UsageRuleTriggerDto) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *UsageRuleTriggerDto) SetLimit(v int32) {
	o.Limit = &v
}

// GetNumDays returns the NumDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageRuleTriggerDto) GetNumDays() int32 {
	if o == nil || isNil(o.NumDays.Get()) {
		var ret int32
		return ret
	}
	return *o.NumDays.Get()
}

// GetNumDaysOk returns a tuple with the NumDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageRuleTriggerDto) GetNumDaysOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.NumDays.Get(), o.NumDays.IsSet()
}

// HasNumDays returns a boolean if a field has been set.
func (o *UsageRuleTriggerDto) HasNumDays() bool {
	if o != nil && o.NumDays.IsSet() {
		return true
	}

	return false
}

// SetNumDays gets a reference to the given NullableInt32 and assigns it to the NumDays field.
func (o *UsageRuleTriggerDto) SetNumDays(v int32) {
	o.NumDays.Set(&v)
}
// SetNumDaysNil sets the value for NumDays to be an explicit nil
func (o *UsageRuleTriggerDto) SetNumDaysNil() {
	o.NumDays.Set(nil)
}

// UnsetNumDays ensures that no value is present for NumDays, not even an explicit nil
func (o *UsageRuleTriggerDto) UnsetNumDays() {
	o.NumDays.Unset()
}

func (o UsageRuleTriggerDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedRuleTriggerDto, errRuleTriggerDto := json.Marshal(o.RuleTriggerDto)
	if errRuleTriggerDto != nil {
		return []byte{}, errRuleTriggerDto
	}
	errRuleTriggerDto = json.Unmarshal([]byte(serializedRuleTriggerDto), &toSerialize)
	if errRuleTriggerDto != nil {
		return []byte{}, errRuleTriggerDto
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if o.NumDays.IsSet() {
		toSerialize["numDays"] = o.NumDays.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUsageRuleTriggerDto struct {
	value *UsageRuleTriggerDto
	isSet bool
}

func (v NullableUsageRuleTriggerDto) Get() *UsageRuleTriggerDto {
	return v.value
}

func (v *NullableUsageRuleTriggerDto) Set(val *UsageRuleTriggerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageRuleTriggerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageRuleTriggerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageRuleTriggerDto(val *UsageRuleTriggerDto) *NullableUsageRuleTriggerDto {
	return &NullableUsageRuleTriggerDto{value: val, isSet: true}
}

func (v NullableUsageRuleTriggerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageRuleTriggerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


