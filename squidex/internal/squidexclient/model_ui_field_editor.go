/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// UIFieldEditor 
type UIFieldEditor string

// List of UIFieldEditor
const (
	SEPARATOR UIFieldEditor = "Separator"
)

// All allowed values of UIFieldEditor enum
var AllowedUIFieldEditorEnumValues = []UIFieldEditor{
	"Separator",
}

func (v *UIFieldEditor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UIFieldEditor(value)
	for _, existing := range AllowedUIFieldEditorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UIFieldEditor", value)
}

// NewUIFieldEditorFromValue returns a pointer to a valid UIFieldEditor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUIFieldEditorFromValue(v string) (*UIFieldEditor, error) {
	ev := UIFieldEditor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UIFieldEditor: valid values are %v", v, AllowedUIFieldEditorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UIFieldEditor) IsValid() bool {
	for _, existing := range AllowedUIFieldEditorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UIFieldEditor value
func (v UIFieldEditor) Ptr() *UIFieldEditor {
	return &v
}

type NullableUIFieldEditor struct {
	value *UIFieldEditor
	isSet bool
}

func (v NullableUIFieldEditor) Get() *UIFieldEditor {
	return v.value
}

func (v *NullableUIFieldEditor) Set(val *UIFieldEditor) {
	v.value = val
	v.isSet = true
}

func (v NullableUIFieldEditor) IsSet() bool {
	return v.isSet
}

func (v *NullableUIFieldEditor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUIFieldEditor(val *UIFieldEditor) *NullableUIFieldEditor {
	return &NullableUIFieldEditor{value: val, isSet: true}
}

func (v NullableUIFieldEditor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUIFieldEditor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

