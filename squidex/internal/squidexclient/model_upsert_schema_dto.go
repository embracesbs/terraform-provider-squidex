/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpsertSchemaDto struct for UpsertSchemaDto
type UpsertSchemaDto struct {
	Properties *SchemaPropertiesDto `json:"properties,omitempty"`
	Scripts *SchemaScriptsDto `json:"scripts,omitempty"`
	FieldsInReferences []string `json:"fieldsInReferences,omitempty"`
	FieldsInLists []string `json:"fieldsInLists,omitempty"`
	// Optional fields.
	Fields []UpsertSchemaFieldDto `json:"fields,omitempty"`
	// The optional preview urls.
	PreviewUrls map[string]string `json:"previewUrls,omitempty"`
	// The optional field Rules.
	FieldRules []FieldRuleDto `json:"fieldRules,omitempty"`
	// The category.
	Category NullableString `json:"category,omitempty"`
	// Set it to true to autopublish the schema.
	IsPublished *bool `json:"isPublished,omitempty"`
}

// NewUpsertSchemaDto instantiates a new UpsertSchemaDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertSchemaDto() *UpsertSchemaDto {
	this := UpsertSchemaDto{}
	return &this
}

// NewUpsertSchemaDtoWithDefaults instantiates a new UpsertSchemaDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertSchemaDtoWithDefaults() *UpsertSchemaDto {
	this := UpsertSchemaDto{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *UpsertSchemaDto) GetProperties() SchemaPropertiesDto {
	if o == nil || isNil(o.Properties) {
		var ret SchemaPropertiesDto
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaDto) GetPropertiesOk() (*SchemaPropertiesDto, bool) {
	if o == nil || isNil(o.Properties) {
    return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given SchemaPropertiesDto and assigns it to the Properties field.
func (o *UpsertSchemaDto) SetProperties(v SchemaPropertiesDto) {
	o.Properties = &v
}

// GetScripts returns the Scripts field value if set, zero value otherwise.
func (o *UpsertSchemaDto) GetScripts() SchemaScriptsDto {
	if o == nil || isNil(o.Scripts) {
		var ret SchemaScriptsDto
		return ret
	}
	return *o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaDto) GetScriptsOk() (*SchemaScriptsDto, bool) {
	if o == nil || isNil(o.Scripts) {
    return nil, false
	}
	return o.Scripts, true
}

// HasScripts returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasScripts() bool {
	if o != nil && !isNil(o.Scripts) {
		return true
	}

	return false
}

// SetScripts gets a reference to the given SchemaScriptsDto and assigns it to the Scripts field.
func (o *UpsertSchemaDto) SetScripts(v SchemaScriptsDto) {
	o.Scripts = &v
}

// GetFieldsInReferences returns the FieldsInReferences field value if set, zero value otherwise.
func (o *UpsertSchemaDto) GetFieldsInReferences() []string {
	if o == nil || isNil(o.FieldsInReferences) {
		var ret []string
		return ret
	}
	return o.FieldsInReferences
}

// GetFieldsInReferencesOk returns a tuple with the FieldsInReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaDto) GetFieldsInReferencesOk() ([]string, bool) {
	if o == nil || isNil(o.FieldsInReferences) {
    return nil, false
	}
	return o.FieldsInReferences, true
}

// HasFieldsInReferences returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasFieldsInReferences() bool {
	if o != nil && !isNil(o.FieldsInReferences) {
		return true
	}

	return false
}

// SetFieldsInReferences gets a reference to the given []string and assigns it to the FieldsInReferences field.
func (o *UpsertSchemaDto) SetFieldsInReferences(v []string) {
	o.FieldsInReferences = v
}

// GetFieldsInLists returns the FieldsInLists field value if set, zero value otherwise.
func (o *UpsertSchemaDto) GetFieldsInLists() []string {
	if o == nil || isNil(o.FieldsInLists) {
		var ret []string
		return ret
	}
	return o.FieldsInLists
}

// GetFieldsInListsOk returns a tuple with the FieldsInLists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaDto) GetFieldsInListsOk() ([]string, bool) {
	if o == nil || isNil(o.FieldsInLists) {
    return nil, false
	}
	return o.FieldsInLists, true
}

// HasFieldsInLists returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasFieldsInLists() bool {
	if o != nil && !isNil(o.FieldsInLists) {
		return true
	}

	return false
}

// SetFieldsInLists gets a reference to the given []string and assigns it to the FieldsInLists field.
func (o *UpsertSchemaDto) SetFieldsInLists(v []string) {
	o.FieldsInLists = v
}

// GetFields returns the Fields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsertSchemaDto) GetFields() []UpsertSchemaFieldDto {
	if o == nil {
		var ret []UpsertSchemaFieldDto
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsertSchemaDto) GetFieldsOk() ([]UpsertSchemaFieldDto, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasFields() bool {
	if o != nil && isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []UpsertSchemaFieldDto and assigns it to the Fields field.
func (o *UpsertSchemaDto) SetFields(v []UpsertSchemaFieldDto) {
	o.Fields = v
}

// GetPreviewUrls returns the PreviewUrls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsertSchemaDto) GetPreviewUrls() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.PreviewUrls
}

// GetPreviewUrlsOk returns a tuple with the PreviewUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsertSchemaDto) GetPreviewUrlsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.PreviewUrls) {
    return nil, false
	}
	return &o.PreviewUrls, true
}

// HasPreviewUrls returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasPreviewUrls() bool {
	if o != nil && isNil(o.PreviewUrls) {
		return true
	}

	return false
}

// SetPreviewUrls gets a reference to the given map[string]string and assigns it to the PreviewUrls field.
func (o *UpsertSchemaDto) SetPreviewUrls(v map[string]string) {
	o.PreviewUrls = v
}

// GetFieldRules returns the FieldRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsertSchemaDto) GetFieldRules() []FieldRuleDto {
	if o == nil {
		var ret []FieldRuleDto
		return ret
	}
	return o.FieldRules
}

// GetFieldRulesOk returns a tuple with the FieldRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsertSchemaDto) GetFieldRulesOk() ([]FieldRuleDto, bool) {
	if o == nil || isNil(o.FieldRules) {
    return nil, false
	}
	return o.FieldRules, true
}

// HasFieldRules returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasFieldRules() bool {
	if o != nil && isNil(o.FieldRules) {
		return true
	}

	return false
}

// SetFieldRules gets a reference to the given []FieldRuleDto and assigns it to the FieldRules field.
func (o *UpsertSchemaDto) SetFieldRules(v []FieldRuleDto) {
	o.FieldRules = v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsertSchemaDto) GetCategory() string {
	if o == nil || isNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsertSchemaDto) GetCategoryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *UpsertSchemaDto) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *UpsertSchemaDto) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *UpsertSchemaDto) UnsetCategory() {
	o.Category.Unset()
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *UpsertSchemaDto) GetIsPublished() bool {
	if o == nil || isNil(o.IsPublished) {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaDto) GetIsPublishedOk() (*bool, bool) {
	if o == nil || isNil(o.IsPublished) {
    return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *UpsertSchemaDto) HasIsPublished() bool {
	if o != nil && !isNil(o.IsPublished) {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *UpsertSchemaDto) SetIsPublished(v bool) {
	o.IsPublished = &v
}

func (o UpsertSchemaDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !isNil(o.Scripts) {
		toSerialize["scripts"] = o.Scripts
	}
	if !isNil(o.FieldsInReferences) {
		toSerialize["fieldsInReferences"] = o.FieldsInReferences
	}
	if !isNil(o.FieldsInLists) {
		toSerialize["fieldsInLists"] = o.FieldsInLists
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.PreviewUrls != nil {
		toSerialize["previewUrls"] = o.PreviewUrls
	}
	if o.FieldRules != nil {
		toSerialize["fieldRules"] = o.FieldRules
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if !isNil(o.IsPublished) {
		toSerialize["isPublished"] = o.IsPublished
	}
	return json.Marshal(toSerialize)
}

type NullableUpsertSchemaDto struct {
	value *UpsertSchemaDto
	isSet bool
}

func (v NullableUpsertSchemaDto) Get() *UpsertSchemaDto {
	return v.value
}

func (v *NullableUpsertSchemaDto) Set(val *UpsertSchemaDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertSchemaDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertSchemaDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertSchemaDto(val *UpsertSchemaDto) *NullableUpsertSchemaDto {
	return &NullableUpsertSchemaDto{value: val, isSet: true}
}

func (v NullableUpsertSchemaDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertSchemaDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


