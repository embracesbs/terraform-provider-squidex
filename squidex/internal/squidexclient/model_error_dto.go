/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ErrorDto struct for ErrorDto
type ErrorDto struct {
	// Error message.
	Message string `json:"message"`
	// The error code.
	ErrorCode NullableString `json:"errorCode,omitempty"`
	// The optional trace id.
	TraceId NullableString `json:"traceId,omitempty"`
	// Link to the error details.
	Type NullableString `json:"type,omitempty"`
	// Detailed error messages.
	Details []string `json:"details,omitempty"`
	// Status code of the http response.
	StatusCode *int32 `json:"statusCode,omitempty"`
}

// NewErrorDto instantiates a new ErrorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorDto(message string) *ErrorDto {
	this := ErrorDto{}
	this.Message = message
	return &this
}

// NewErrorDtoWithDefaults instantiates a new ErrorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorDtoWithDefaults() *ErrorDto {
	this := ErrorDto{}
	return &this
}

// GetMessage returns the Message field value
func (o *ErrorDto) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorDto) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorDto) SetMessage(v string) {
	o.Message = v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorDto) GetErrorCode() string {
	if o == nil || isNil(o.ErrorCode.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorDto) GetErrorCodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ErrorDto) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableString and assigns it to the ErrorCode field.
func (o *ErrorDto) SetErrorCode(v string) {
	o.ErrorCode.Set(&v)
}
// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *ErrorDto) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *ErrorDto) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

// GetTraceId returns the TraceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorDto) GetTraceId() string {
	if o == nil || isNil(o.TraceId.Get()) {
		var ret string
		return ret
	}
	return *o.TraceId.Get()
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorDto) GetTraceIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TraceId.Get(), o.TraceId.IsSet()
}

// HasTraceId returns a boolean if a field has been set.
func (o *ErrorDto) HasTraceId() bool {
	if o != nil && o.TraceId.IsSet() {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given NullableString and assigns it to the TraceId field.
func (o *ErrorDto) SetTraceId(v string) {
	o.TraceId.Set(&v)
}
// SetTraceIdNil sets the value for TraceId to be an explicit nil
func (o *ErrorDto) SetTraceIdNil() {
	o.TraceId.Set(nil)
}

// UnsetTraceId ensures that no value is present for TraceId, not even an explicit nil
func (o *ErrorDto) UnsetTraceId() {
	o.TraceId.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorDto) GetType() string {
	if o == nil || isNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorDto) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ErrorDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ErrorDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ErrorDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ErrorDto) UnsetType() {
	o.Type.Unset()
}

// GetDetails returns the Details field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorDto) GetDetails() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorDto) GetDetailsOk() ([]string, bool) {
	if o == nil || isNil(o.Details) {
    return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ErrorDto) HasDetails() bool {
	if o != nil && isNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []string and assigns it to the Details field.
func (o *ErrorDto) SetDetails(v []string) {
	o.Details = v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ErrorDto) GetStatusCode() int32 {
	if o == nil || isNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDto) GetStatusCodeOk() (*int32, bool) {
	if o == nil || isNil(o.StatusCode) {
    return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ErrorDto) HasStatusCode() bool {
	if o != nil && !isNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *ErrorDto) SetStatusCode(v int32) {
	o.StatusCode = &v
}

func (o ErrorDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.ErrorCode.IsSet() {
		toSerialize["errorCode"] = o.ErrorCode.Get()
	}
	if o.TraceId.IsSet() {
		toSerialize["traceId"] = o.TraceId.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if !isNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return json.Marshal(toSerialize)
}

type NullableErrorDto struct {
	value *ErrorDto
	isSet bool
}

func (v NullableErrorDto) Get() *ErrorDto {
	return v.value
}

func (v *NullableErrorDto) Set(val *ErrorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorDto(val *ErrorDto) *NullableErrorDto {
	return &NullableErrorDto{value: val, isSet: true}
}

func (v NullableErrorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


