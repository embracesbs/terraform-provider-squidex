/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// CallsUsageDtoDto struct for CallsUsageDtoDto
type CallsUsageDtoDto struct {
	// The total number of API calls.
	TotalCalls *int64 `json:"totalCalls,omitempty"`
	// The total number of bytes transferred.
	TotalBytes *int64 `json:"totalBytes,omitempty"`
	// The total number of API calls this month.
	MonthCalls *int64 `json:"monthCalls,omitempty"`
	// The total number of bytes transferred this month.
	MonthBytes *int64 `json:"monthBytes,omitempty"`
	// The amount of calls that will block the app.
	BlockingApiCalls *int64 `json:"blockingApiCalls,omitempty"`
	// The included API traffic.
	AllowedBytes *int64 `json:"allowedBytes,omitempty"`
	// The included API calls.
	AllowedCalls *int64 `json:"allowedCalls,omitempty"`
	// The average duration in milliseconds.
	AverageElapsedMs *float64 `json:"averageElapsedMs,omitempty"`
	// The statistics by date and group.
	Details map[string][]CallsUsagePerDateDto `json:"details"`
}

// NewCallsUsageDtoDto instantiates a new CallsUsageDtoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallsUsageDtoDto(details map[string][]CallsUsagePerDateDto) *CallsUsageDtoDto {
	this := CallsUsageDtoDto{}
	this.Details = details
	return &this
}

// NewCallsUsageDtoDtoWithDefaults instantiates a new CallsUsageDtoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallsUsageDtoDtoWithDefaults() *CallsUsageDtoDto {
	this := CallsUsageDtoDto{}
	return &this
}

// GetTotalCalls returns the TotalCalls field value if set, zero value otherwise.
func (o *CallsUsageDtoDto) GetTotalCalls() int64 {
	if o == nil || isNil(o.TotalCalls) {
		var ret int64
		return ret
	}
	return *o.TotalCalls
}

// GetTotalCallsOk returns a tuple with the TotalCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetTotalCallsOk() (*int64, bool) {
	if o == nil || isNil(o.TotalCalls) {
    return nil, false
	}
	return o.TotalCalls, true
}

// HasTotalCalls returns a boolean if a field has been set.
func (o *CallsUsageDtoDto) HasTotalCalls() bool {
	if o != nil && !isNil(o.TotalCalls) {
		return true
	}

	return false
}

// SetTotalCalls gets a reference to the given int64 and assigns it to the TotalCalls field.
func (o *CallsUsageDtoDto) SetTotalCalls(v int64) {
	o.TotalCalls = &v
}

// GetTotalBytes returns the TotalBytes field value if set, zero value otherwise.
func (o *CallsUsageDtoDto) GetTotalBytes() int64 {
	if o == nil || isNil(o.TotalBytes) {
		var ret int64
		return ret
	}
	return *o.TotalBytes
}

// GetTotalBytesOk returns a tuple with the TotalBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetTotalBytesOk() (*int64, bool) {
	if o == nil || isNil(o.TotalBytes) {
    return nil, false
	}
	return o.TotalBytes, true
}

// HasTotalBytes returns a boolean if a field has been set.
func (o *CallsUsageDtoDto) HasTotalBytes() bool {
	if o != nil && !isNil(o.TotalBytes) {
		return true
	}

	return false
}

// SetTotalBytes gets a reference to the given int64 and assigns it to the TotalBytes field.
func (o *CallsUsageDtoDto) SetTotalBytes(v int64) {
	o.TotalBytes = &v
}

// GetMonthCalls returns the MonthCalls field value if set, zero value otherwise.
func (o *CallsUsageDtoDto) GetMonthCalls() int64 {
	if o == nil || isNil(o.MonthCalls) {
		var ret int64
		return ret
	}
	return *o.MonthCalls
}

// GetMonthCallsOk returns a tuple with the MonthCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetMonthCallsOk() (*int64, bool) {
	if o == nil || isNil(o.MonthCalls) {
    return nil, false
	}
	return o.MonthCalls, true
}

// HasMonthCalls returns a boolean if a field has been set.
func (o *CallsUsageDtoDto) HasMonthCalls() bool {
	if o != nil && !isNil(o.MonthCalls) {
		return true
	}

	return false
}

// SetMonthCalls gets a reference to the given int64 and assigns it to the MonthCalls field.
func (o *CallsUsageDtoDto) SetMonthCalls(v int64) {
	o.MonthCalls = &v
}

// GetMonthBytes returns the MonthBytes field value if set, zero value otherwise.
func (o *CallsUsageDtoDto) GetMonthBytes() int64 {
	if o == nil || isNil(o.MonthBytes) {
		var ret int64
		return ret
	}
	return *o.MonthBytes
}

// GetMonthBytesOk returns a tuple with the MonthBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetMonthBytesOk() (*int64, bool) {
	if o == nil || isNil(o.MonthBytes) {
    return nil, false
	}
	return o.MonthBytes, true
}

// HasMonthBytes returns a boolean if a field has been set.
func (o *CallsUsageDtoDto) HasMonthBytes() bool {
	if o != nil && !isNil(o.MonthBytes) {
		return true
	}

	return false
}

// SetMonthBytes gets a reference to the given int64 and assigns it to the MonthBytes field.
func (o *CallsUsageDtoDto) SetMonthBytes(v int64) {
	o.MonthBytes = &v
}

// GetBlockingApiCalls returns the BlockingApiCalls field value if set, zero value otherwise.
func (o *CallsUsageDtoDto) GetBlockingApiCalls() int64 {
	if o == nil || isNil(o.BlockingApiCalls) {
		var ret int64
		return ret
	}
	return *o.BlockingApiCalls
}

// GetBlockingApiCallsOk returns a tuple with the BlockingApiCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetBlockingApiCallsOk() (*int64, bool) {
	if o == nil || isNil(o.BlockingApiCalls) {
    return nil, false
	}
	return o.BlockingApiCalls, true
}

// HasBlockingApiCalls returns a boolean if a field has been set.
func (o *CallsUsageDtoDto) HasBlockingApiCalls() bool {
	if o != nil && !isNil(o.BlockingApiCalls) {
		return true
	}

	return false
}

// SetBlockingApiCalls gets a reference to the given int64 and assigns it to the BlockingApiCalls field.
func (o *CallsUsageDtoDto) SetBlockingApiCalls(v int64) {
	o.BlockingApiCalls = &v
}

// GetAllowedBytes returns the AllowedBytes field value if set, zero value otherwise.
func (o *CallsUsageDtoDto) GetAllowedBytes() int64 {
	if o == nil || isNil(o.AllowedBytes) {
		var ret int64
		return ret
	}
	return *o.AllowedBytes
}

// GetAllowedBytesOk returns a tuple with the AllowedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetAllowedBytesOk() (*int64, bool) {
	if o == nil || isNil(o.AllowedBytes) {
    return nil, false
	}
	return o.AllowedBytes, true
}

// HasAllowedBytes returns a boolean if a field has been set.
func (o *CallsUsageDtoDto) HasAllowedBytes() bool {
	if o != nil && !isNil(o.AllowedBytes) {
		return true
	}

	return false
}

// SetAllowedBytes gets a reference to the given int64 and assigns it to the AllowedBytes field.
func (o *CallsUsageDtoDto) SetAllowedBytes(v int64) {
	o.AllowedBytes = &v
}

// GetAllowedCalls returns the AllowedCalls field value if set, zero value otherwise.
func (o *CallsUsageDtoDto) GetAllowedCalls() int64 {
	if o == nil || isNil(o.AllowedCalls) {
		var ret int64
		return ret
	}
	return *o.AllowedCalls
}

// GetAllowedCallsOk returns a tuple with the AllowedCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetAllowedCallsOk() (*int64, bool) {
	if o == nil || isNil(o.AllowedCalls) {
    return nil, false
	}
	return o.AllowedCalls, true
}

// HasAllowedCalls returns a boolean if a field has been set.
func (o *CallsUsageDtoDto) HasAllowedCalls() bool {
	if o != nil && !isNil(o.AllowedCalls) {
		return true
	}

	return false
}

// SetAllowedCalls gets a reference to the given int64 and assigns it to the AllowedCalls field.
func (o *CallsUsageDtoDto) SetAllowedCalls(v int64) {
	o.AllowedCalls = &v
}

// GetAverageElapsedMs returns the AverageElapsedMs field value if set, zero value otherwise.
func (o *CallsUsageDtoDto) GetAverageElapsedMs() float64 {
	if o == nil || isNil(o.AverageElapsedMs) {
		var ret float64
		return ret
	}
	return *o.AverageElapsedMs
}

// GetAverageElapsedMsOk returns a tuple with the AverageElapsedMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetAverageElapsedMsOk() (*float64, bool) {
	if o == nil || isNil(o.AverageElapsedMs) {
    return nil, false
	}
	return o.AverageElapsedMs, true
}

// HasAverageElapsedMs returns a boolean if a field has been set.
func (o *CallsUsageDtoDto) HasAverageElapsedMs() bool {
	if o != nil && !isNil(o.AverageElapsedMs) {
		return true
	}

	return false
}

// SetAverageElapsedMs gets a reference to the given float64 and assigns it to the AverageElapsedMs field.
func (o *CallsUsageDtoDto) SetAverageElapsedMs(v float64) {
	o.AverageElapsedMs = &v
}

// GetDetails returns the Details field value
func (o *CallsUsageDtoDto) GetDetails() map[string][]CallsUsagePerDateDto {
	if o == nil {
		var ret map[string][]CallsUsagePerDateDto
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *CallsUsageDtoDto) GetDetailsOk() (*map[string][]CallsUsagePerDateDto, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *CallsUsageDtoDto) SetDetails(v map[string][]CallsUsagePerDateDto) {
	o.Details = v
}

func (o CallsUsageDtoDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TotalCalls) {
		toSerialize["totalCalls"] = o.TotalCalls
	}
	if !isNil(o.TotalBytes) {
		toSerialize["totalBytes"] = o.TotalBytes
	}
	if !isNil(o.MonthCalls) {
		toSerialize["monthCalls"] = o.MonthCalls
	}
	if !isNil(o.MonthBytes) {
		toSerialize["monthBytes"] = o.MonthBytes
	}
	if !isNil(o.BlockingApiCalls) {
		toSerialize["blockingApiCalls"] = o.BlockingApiCalls
	}
	if !isNil(o.AllowedBytes) {
		toSerialize["allowedBytes"] = o.AllowedBytes
	}
	if !isNil(o.AllowedCalls) {
		toSerialize["allowedCalls"] = o.AllowedCalls
	}
	if !isNil(o.AverageElapsedMs) {
		toSerialize["averageElapsedMs"] = o.AverageElapsedMs
	}
	if true {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableCallsUsageDtoDto struct {
	value *CallsUsageDtoDto
	isSet bool
}

func (v NullableCallsUsageDtoDto) Get() *CallsUsageDtoDto {
	return v.value
}

func (v *NullableCallsUsageDtoDto) Set(val *CallsUsageDtoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCallsUsageDtoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCallsUsageDtoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallsUsageDtoDto(val *CallsUsageDtoDto) *NullableCallsUsageDtoDto {
	return &NullableCallsUsageDtoDto{value: val, isSet: true}
}

func (v NullableCallsUsageDtoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallsUsageDtoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


