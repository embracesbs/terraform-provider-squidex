openapi: 3.0.0
info:
  title: Squidex API
  version: 7.0.0.0
  x-logo:
    url: http://squidex.localhost:8081/images/logo-white.png
    backgroundStyle: ""
    backgroundColor: '#3f83df'
externalDocs:
  url: https://docs.squidex.io
servers:
- url: http://squidex.localhost:8081
security:
- squidex-oauth-auth: []
paths:
  /api:
    get:
      operationId: Users_GetUserResources
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesDto'
          description: User resources returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get the user resources.
      tags:
      - Users
  /api/users:
    get:
      description: Search the user by query that contains the email address or the
        part of the email address.
      operationId: Users_GetUsers
      parameters:
      - description: The query to search the user by email address. Case invariant.
        explode: true
        in: query
        name: query
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserDto'
                type: array
          description: Users returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get users by query.
      tags:
      - Users
  /api/users/{id}:
    get:
      operationId: Users_GetUser
      parameters:
      - description: The id of the user (GUID).
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: User found.
        "404":
          description: User not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get user by id.
      tags:
      - Users
  /api/users/{id}/picture:
    get:
      operationId: Users_GetUserPicture
      parameters:
      - description: The id of the user (GUID).
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: User found and image or fallback returned.
        "404":
          description: User not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      summary: Get user picture by id.
      tags:
      - Users
  /api/apps/{app}/translations:
    post:
      operationId: Translations_PostTranslation
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslateDto'
        description: The translation request.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationDto'
          description: Text translated.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.translate"
      summary: Translate a text.
      tags:
      - Translations
  /api/templates:
    get:
      operationId: Templates_GetTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplatesDto'
          description: Templates returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get all templates.
      tags:
      - Templates
  /api/templates/{name}:
    get:
      operationId: Templates_GetTemplate
      parameters:
      - description: The name of the template.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateDetailsDto'
          description: Template returned.
        "404":
          description: Template not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get template details.
      tags:
      - Templates
  /api/apps/{app}/usages/log:
    get:
      operationId: Usages_GetLog
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogDownloadDto'
          description: Usage tracking results returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.usage"
      summary: Get api calls as log file.
      tags:
      - Statistics
  /api/apps/{app}/usages/calls/{fromDate}/{toDate}:
    get:
      operationId: Usages_GetUsages
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The from date.
        explode: false
        in: path
        name: fromDate
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The to date.
        explode: false
        in: path
        name: toDate
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallsUsageDtoDto'
          description: API call returned.
        "404":
          description: App not found.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Range between from date and to date is not valid or has more
            than 100 days.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.usage"
      summary: Get api calls in date range.
      tags:
      - Statistics
  /api/apps/{app}/usages/storage/today:
    get:
      operationId: Usages_GetCurrentStorageSize
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentStorageDto'
          description: Storage usage returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.usage"
      summary: Get total asset size.
      tags:
      - Statistics
  /api/apps/{app}/usages/storage/{fromDate}/{toDate}:
    get:
      operationId: Usages_GetStorageSizes
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The from date.
        explode: false
        in: path
        name: fromDate
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The to date.
        explode: false
        in: path
        name: toDate
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StorageUsagePerDateDto'
                type: array
          description: Storage usage returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Range between from date and to date is not valid or has more
            than 100 days.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.usage"
      summary: Get asset usage by date.
      tags:
      - Statistics
  /api/apps/{app}/search:
    get:
      operationId: Search_GetSearchResults
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The search query.
        explode: true
        in: query
        name: query
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SearchResultDto'
                type: array
          description: Search results returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.search"
      summary: Get search results.
      tags:
      - Search
  /api/apps/{app}/schemas/{schema}/fields:
    post:
      operationId: SchemaFields_PostField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFieldDto'
        description: The field object that needs to be added to the schema.
        required: true
        x-name: request
        x-position: 3
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field name already in use.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Add a schema field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested:
    post:
      operationId: SchemaFields_PostNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFieldDto'
        description: The field object that needs to be added to the schema.
        required: true
        x-name: request
        x-position: 4
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field name already in use.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Add a nested field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/ui:
    put:
      operationId: SchemaFields_PutSchemaUIFields
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigureUIFieldsDto'
        description: The request that contains the field names.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema UI fields defined.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Configure UI fields.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/ordering:
    put:
      operationId: SchemaFields_PutSchemaFieldOrdering
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderFieldsDto'
        description: The request that contains the field ids.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema fields reordered.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Reorder all fields.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/ordering:
    put:
      operationId: SchemaFields_PutNestedFieldOrdering
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderFieldsDto'
        description: The request that contains the field ids.
        required: true
        x-name: request
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema fields reordered.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Reorder all nested fields.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{id}:
    delete:
      operationId: SchemaFields_DeleteField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Delete a schema field.
      tags:
      - Schemas
    put:
      operationId: SchemaFields_PutField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldDto'
        description: The field object that needs to be added to the schema.
        required: true
        x-name: request
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Update a schema field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}:
    delete:
      operationId: SchemaFields_DeleteNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Delete a nested field.
      tags:
      - Schemas
    put:
      operationId: SchemaFields_PutNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldDto'
        description: The field object that needs to be added to the schema.
        required: true
        x-name: request
        x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Update a nested field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{id}/lock:
    put:
      description: A locked field cannot be updated or deleted.
      operationId: SchemaFields_LockField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to lock.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field shown.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Lock a schema field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/lock:
    put:
      description: A locked field cannot be edited or deleted.
      operationId: SchemaFields_LockNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to lock.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field hidden.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Field, schema, or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Lock a nested field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{id}/hide:
    put:
      description: "A hidden field is not part of the API response, but can still\
        \ be edited in the portal."
      operationId: SchemaFields_HideField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to hide.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field hidden.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Hide a schema field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/hide:
    put:
      description: "A hidden field is not part of the API response, but can still\
        \ be edited in the portal."
      operationId: SchemaFields_HideNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to hide.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field hidden.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Field, schema, or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Hide a nested field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{id}/show:
    put:
      description: "A hidden field is not part of the API response, but can still\
        \ be edited in the portal."
      operationId: SchemaFields_ShowField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to show.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field shown.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Show a schema field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/show:
    put:
      description: "A hidden field is not part of the API response, but can still\
        \ be edited in the portal."
      operationId: SchemaFields_ShowNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to show.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field shown.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Show a nested field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{id}/enable:
    put:
      description: "A disabled field cannot not be edited in the squidex portal anymore,\
        \ but will be part of the API response."
      operationId: SchemaFields_EnableField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to enable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field enabled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Enable a schema field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/enable:
    put:
      description: "A disabled field cannot not be edited in the squidex portal anymore,\
        \ but will be part of the API response."
      operationId: SchemaFields_EnableNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to enable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field enabled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Enable a nested field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{id}/disable:
    put:
      description: "A disabled field cannot not be edited in the squidex portal anymore,\
        \ but will be part of the API response."
      operationId: SchemaFields_DisableField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field disabled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Disable a schema field.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/disable:
    put:
      description: "A disabled field cannot not be edited in the squidex portal anymore,\
        \ but will be part of the API response."
      operationId: SchemaFields_DisableNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema field disabled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field request not valid or field locked.
        "404":
          description: "Schema, field or app not found."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Disable a nested field.
      tags:
      - Schemas
  /api/apps/{app}/schemas:
    get:
      operationId: Schemas_GetSchemas
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemasDto'
          description: Schemas returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.read"
      summary: Get schemas.
      tags:
      - Schemas
    post:
      operationId: Schemas_PostSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchemaDto'
        description: The schema object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema name already in use.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.create"
      summary: Create a new schema.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}:
    delete:
      operationId: Schemas_DeleteSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema to delete.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Schema deleted.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.delete"
      summary: Delete a schema.
      tags:
      - Schemas
    get:
      operationId: Schemas_GetSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema to retrieve.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema found.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.read"
      summary: Get a schema by name.
      tags:
      - Schemas
    put:
      operationId: Schemas_PutSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchemaDto'
        description: The schema object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Update a schema.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/sync:
    put:
      operationId: Schemas_PutSchemaSync
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynchronizeSchemaDto'
        description: The schema object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Synchronize a schema.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/category:
    put:
      operationId: Schemas_PutCategory
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeCategoryDto'
        description: The schema object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Update a schema category.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/preview-urls:
    put:
      operationId: Schemas_PutPreviewUrls
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurePreviewUrlsDto'
        description: The preview urls for the schema.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Update the preview urls.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/scripts:
    put:
      operationId: Schemas_PutScripts
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaScriptsDto'
        description: The schema scripts object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.scripts"
      summary: Update the scripts.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/rules:
    put:
      operationId: Schemas_PutRules
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigureFieldRulesDto'
        description: The schema rules object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema request not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.update"
      summary: Update the rules.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/publish:
    put:
      operationId: Schemas_PublishSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema to publish.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema published.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.publish"
      summary: Publish a schema.
      tags:
      - Schemas
  /api/apps/{app}/schemas/{schema}/unpublish:
    put:
      operationId: Schemas_UnpublishSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema to unpublish.
        explode: false
        in: path
        name: schema
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDto'
          description: Schema unpublished.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.schemas.{schema}.publish"
      summary: Unpublish a schema.
      tags:
      - Schemas
  /api/rules/actions:
    get:
      operationId: Rules_GetActions
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/RuleElementDto'
                type: object
          description: Rule actions returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get supported rule actions.
      tags:
      - Rules
  /api/apps/{app}/rules:
    get:
      operationId: Rules_GetRules
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesDto'
          description: Rules returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.read"
      summary: Get rules.
      tags:
      - Rules
    post:
      operationId: Rules_PostRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleDto'
        description: The rule object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
          description: Rule created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Rule request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.create"
      summary: Create a new rule.
      tags:
      - Rules
  /api/apps/{app}/rules/run:
    delete:
      operationId: Rules_DeleteRuleRun
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "204":
          description: Rule run cancelled.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.update"
      summary: Cancel the current run.
      tags:
      - Rules
  /api/apps/{app}/rules/{id}:
    delete:
      operationId: Rules_DeleteRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule deleted.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.delete"
      summary: Delete a rule.
      tags:
      - Rules
    put:
      operationId: Rules_PutRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRuleDto'
        description: The rule object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
          description: Rule updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Rule request not valid.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.update"
      summary: Update a rule.
      tags:
      - Rules
  /api/apps/{app}/rules/{id}/enable:
    put:
      operationId: Rules_EnableRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to enable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
          description: Rule enabled.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.disable"
      summary: Enable a rule.
      tags:
      - Rules
  /api/apps/{app}/rules/{id}/disable:
    put:
      operationId: Rules_DisableRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
          description: Rule disabled.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.disable"
      summary: Disable a rule.
      tags:
      - Rules
  /api/apps/{app}/rules/{id}/trigger:
    put:
      operationId: Rules_TriggerRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule triggered.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.run"
      summary: Trigger a rule.
      tags:
      - Rules
  /api/apps/{app}/rules/{id}/run:
    put:
      operationId: Rules_PutRuleRun
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to run.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: Runs the rule from snapeshots if possible.
        explode: true
        in: query
        name: fromSnapshots
        required: false
        schema:
          default: false
          type: boolean
        style: form
        x-position: 3
      responses:
        "204":
          description: Rule started.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.run"
      summary: Run a rule.
      tags:
      - Rules
  /api/apps/{app}/rules/{id}/events:
    delete:
      operationId: Rules_DeleteRuleEvents
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to cancel.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule events cancelled.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.delete"
      summary: Cancels all rule events.
      tags:
      - Rules
  /api/apps/{app}/rules/simulate:
    post:
      operationId: Rules_SimulatePOST
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleDto'
        description: The rule to simulate.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulatedRuleEventsDto'
          description: Rule simulated.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.read"
      summary: Simulate a rule.
      tags:
      - Rules
  /api/apps/{app}/rules/{id}/simulate:
    get:
      operationId: Rules_SimulateGET
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to simulate.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulatedRuleEventsDto'
          description: Rule simulated.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.read"
      summary: Simulate a rule.
      tags:
      - Rules
  /api/apps/{app}/rules/events:
    delete:
      operationId: Rules_DeleteEvents
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "204":
          description: Events cancelled.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.delete"
      summary: Cancels all events.
      tags:
      - Rules
    get:
      operationId: Rules_GetEvents
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The optional rule id to filter to events.
        explode: true
        in: query
        name: ruleId
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 2
      - description: The number of events to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
        x-position: 3
      - description: The number of events to take.
        explode: true
        in: query
        name: take
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleEventsDto'
          description: Rule events returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.read"
      summary: Get rule events.
      tags:
      - Rules
  /api/apps/{app}/rules/events/{id}:
    delete:
      operationId: Rules_DeleteEvent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The event to enqueue.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule deqeued.
        "404":
          description: App or rule event not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.delete"
      summary: Cancels an event.
      tags:
      - Rules
    put:
      operationId: Rules_PutEvent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The event to enqueue.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule enqueued.
        "404":
          description: App or rule event not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.rules.events.update"
      summary: Retry the event immediately.
      tags:
      - Rules
  /api/rules/eventtypes:
    get:
      operationId: Rules_GetEventTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Rule events returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      summary: Provide a list of all event types that are used in rules.
      tags:
      - Rules
  /api/rules/eventtypes/{type}:
    get:
      operationId: Rules_GetEventSchema
      parameters:
      - description: The type name of the event.
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Rule event type found.
        "404":
          description: Rule event not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      summary: Provide the json schema for the event with the specified name.
      tags:
      - Rules
  /api/apps/{app}/plans:
    get:
      operationId: AppPlans_GetPlans
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppPlansDto'
          description: App plan information returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.plans.read"
      summary: Get app plan information.
      tags:
      - Plans
  /api/apps/{app}/plan:
    put:
      operationId: AppPlans_PutPlan
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePlanDto'
        description: Plan object that needs to be changed.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanChangedDto'
          description: Plan changed or redirect url returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Plan not owned by user.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.plans.change"
      summary: Change the app plan.
      tags:
      - Plans
  /api/info:
    get:
      operationId: Ping_GetInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposedValues'
          description: Infos returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      summary: Get API information.
      tags:
      - Ping
  /api/ping:
    get:
      description: "Can be used to test, if the Squidex API is alive and responding."
      operationId: Ping_GetPing
      responses:
        "204":
          description: Service ping successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      summary: Get ping status of the API.
      tags:
      - Ping
  /api/ping/{app}:
    get:
      description: "Can be used to test, if the Squidex API is alive and responding."
      operationId: Ping_GetAppPing
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "204":
          description: Service ping successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.ping"
      summary: Get ping status.
      tags:
      - Ping
  /api/news/features:
    get:
      operationId: News_GetNews
      parameters:
      - description: The latest received version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesDto'
          description: Latest features returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get features since version.
      tags:
      - News
  /api/languages:
    get:
      description: "Provide a list of supported language codes, following the ISO2Code\
        \ standard."
      operationId: Languages_GetLanguages
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LanguageDto'
                type: array
          description: Supported language codes returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get supported languages.
      tags:
      - Languages
  /api/apps/{app}/history:
    get:
      operationId: History_GetHistory
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the channel.
        explode: true
        in: query
        name: channel
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HistoryEventDto'
                type: array
          description: Events returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.history"
      summary: Get historical events.
      tags:
      - History
  /api/diagnostics/dump:
    get:
      operationId: Diagnostics_GetDump
      responses:
        "204":
          description: Dump created successful.
        "501":
          description: Not configured.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - squidex.admin.*
      summary: Creates a dump and writes it into storage..
      tags:
      - Diagnostics
  /api/diagnostics/gcdump:
    get:
      operationId: Diagnostics_GetGCDump
      responses:
        "204":
          description: Dump created successful.
        "501":
          description: Not configured.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - squidex.admin.*
      summary: Creates a gc dump and writes it into storage.
      tags:
      - Diagnostics
  /api/apps/{app}/watching/{resource}:
    get:
      operationId: Comments_GetWatchingUsers
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The path to the resource.
        explode: false
        in: path
        name: resource
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Watching users returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get all watching users..
      tags:
      - Comments
  /api/apps/{app}/comments/{commentsId}:
    get:
      description: When passing in a version you can retrieve all updates since then.
      operationId: Comments_GetComments
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comments.
        explode: false
        in: path
        name: commentsId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The current version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          default: -2
          format: int64
          type: integer
        style: form
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsDto'
          description: Comments returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.comments.read"
      summary: Get all comments.
      tags:
      - Comments
    post:
      operationId: Comments_PostComment
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comments.
        explode: false
        in: path
        name: commentsId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCommentDto'
        description: The comment object that needs to created.
        required: true
        x-name: request
        x-position: 3
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
          description: Comment created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Comment request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.comments.create"
      summary: Create a new comment.
      tags:
      - Comments
  /api/apps/{app}/comments/{commentsId}/{commentId}:
    delete:
      operationId: Comments_DeleteComment
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comments.
        explode: false
        in: path
        name: commentsId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the comment.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      responses:
        "204":
          description: Comment deleted.
        "404":
          description: Comment or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.comments.delete"
      summary: Delete a comment.
      tags:
      - Comments
    put:
      operationId: Comments_PutComment
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comments.
        explode: false
        in: path
        name: commentsId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the comment.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCommentDto'
        description: The comment object that needs to updated.
        required: true
        x-name: request
        x-position: 4
      responses:
        "204":
          description: Comment updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Comment request not valid.
        "404":
          description: Comment or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.comments.update"
      summary: Update a comment.
      tags:
      - Comments
  /api/users/{userId}/notifications:
    get:
      description: When passing in a version you can retrieve all updates since then.
      operationId: UserNotifications_GetNotifications
      parameters:
      - description: The user id.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The current version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          default: -2
          format: int64
          type: integer
        style: form
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsDto'
          description: All comments returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get all notifications.
      tags:
      - Notifications
  /api/users/{userId}/notifications/{commentId}:
    delete:
      operationId: UserNotifications_DeleteComment
      parameters:
      - description: The user id.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comment.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Comment deleted.
        "404":
          description: Comment not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Delete a notification.
      tags:
      - Notifications
  /api/apps/{app}/backups/{id}:
    delete:
      operationId: Backups_DeleteBackup
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the backup to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Backup deleted.
        "404":
          description: Backup or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.backups.delete"
      summary: Delete a backup.
      tags:
      - Backups
    get:
      operationId: BackupContent_GetBackupContent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the backup.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Backup found and content returned.
        "404":
          description: Backup or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      summary: Get the backup content.
      tags:
      - Backups
  /api/apps/backups/{id}:
    get:
      operationId: BackupContent_GetBackupContentV2
      parameters:
      - description: The id of the backup.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the app.
        explode: true
        in: query
        name: appId
        required: false
        schema:
          type: string
        style: form
        x-position: 2
      - description: The name of the app.
        explode: true
        in: query
        name: app
        required: false
        schema:
          default: ""
          nullable: true
          type: string
        style: form
        x-position: 3
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Backup found and content returned.
        "404":
          description: Backup or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      summary: Get the backup content.
      tags:
      - Backups
  /api/apps/{app}/backups:
    get:
      operationId: Backups_GetBackups
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJobsDto'
          description: Backups returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.backups.read"
      summary: Get all backup jobs.
      tags:
      - Backups
    post:
      operationId: Backups_PostBackup
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "204":
          description: Backup started.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Backup contingent reached.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.backups.create"
      summary: Start a new backup.
      tags:
      - Backups
  /api/apps/restore:
    get:
      operationId: Restore_GetRestoreJob
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreJobDto'
          description: Status returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - squidex.admin.restore
      summary: Get current restore status.
      tags:
      - Backups
    post:
      operationId: Restore_PostRestoreJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreRequestDto'
        description: The backup to restore.
        required: true
        x-name: request
        x-position: 1
      responses:
        "204":
          description: Restore operation started.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - squidex.admin.restore
      summary: Restore a backup.
      tags:
      - Backups
  /api/assets/{app}/{idOrSlug}/{more}:
    get:
      operationId: AssetContent_GetAssetContentBySlug
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id or slug of the asset.
        explode: false
        in: path
        name: idOrSlug
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The optional version of the asset.
        explode: true
        in: query
        name: version
        required: false
        schema:
          format: int64
          type: integer
        style: form
        x-position: 3
      - description: The cache duration in seconds.
        explode: true
        in: query
        name: cache
        required: false
        schema:
          format: int64
          type: integer
        style: form
        x-position: 4
      - description: Set it to 0 to prevent download.
        explode: true
        in: query
        name: download
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-position: 5
      - description: "The target width of the asset, if it is an image."
        explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 6
      - description: "The target height of the asset, if it is an image."
        explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 7
      - description: "Optional image quality, it is is an jpeg image."
        explode: true
        in: query
        name: quality
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 8
      - description: The resize mode when the width and height is defined.
        explode: true
        in: query
        name: mode
        required: false
        schema:
          $ref: '#/components/schemas/ResizeMode'
        style: form
        x-position: 9
      - description: Optional background color.
        explode: true
        in: query
        name: bg
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 10
      - description: Override the y focus point.
        explode: true
        in: query
        name: focusX
        required: false
        schema:
          format: float
          nullable: true
          type: number
        style: form
        x-position: 11
      - description: Override the x focus point.
        explode: true
        in: query
        name: focusY
        required: false
        schema:
          format: float
          nullable: true
          type: number
        style: form
        x-position: 12
      - description: True to ignore the asset focus point if any.
        explode: true
        in: query
        name: nofocus
        required: false
        schema:
          type: boolean
        style: form
        x-position: 13
      - description: True to use auto format.
        explode: true
        in: query
        name: auto
        required: false
        schema:
          type: boolean
        style: form
        x-position: 14
      - description: True to force a new resize even if it already stored.
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
        x-position: 15
      - description: True to force a new resize even if it already stored.
        explode: true
        in: query
        name: format
        required: false
        schema:
          $ref: '#/components/schemas/ImageFormat'
        style: form
        x-position: 16
      - description: Optional suffix that can be used to seo-optimize the link to
          the image Has not effect.
        explode: false
        in: path
        name: more
        required: true
        schema:
          type: string
        style: simple
        x-position: 17
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Asset found and content or (resized) image returned.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get the asset content.
      tags:
      - Assets
  /api/assets/{id}:
    get:
      deprecated: true
      operationId: AssetContent_GetAssetContent
      parameters:
      - description: The id of the asset.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The optional version of the asset.
        explode: true
        in: query
        name: version
        required: false
        schema:
          format: int64
          type: integer
        style: form
        x-position: 2
      - description: The cache duration in seconds.
        explode: true
        in: query
        name: cache
        required: false
        schema:
          format: int64
          type: integer
        style: form
        x-position: 3
      - description: Set it to 0 to prevent download.
        explode: true
        in: query
        name: download
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-position: 4
      - description: "The target width of the asset, if it is an image."
        explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 5
      - description: "The target height of the asset, if it is an image."
        explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 6
      - description: "Optional image quality, it is is an jpeg image."
        explode: true
        in: query
        name: quality
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 7
      - description: The resize mode when the width and height is defined.
        explode: true
        in: query
        name: mode
        required: false
        schema:
          $ref: '#/components/schemas/ResizeMode'
        style: form
        x-position: 8
      - description: Optional background color.
        explode: true
        in: query
        name: bg
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 9
      - description: Override the y focus point.
        explode: true
        in: query
        name: focusX
        required: false
        schema:
          format: float
          nullable: true
          type: number
        style: form
        x-position: 10
      - description: Override the x focus point.
        explode: true
        in: query
        name: focusY
        required: false
        schema:
          format: float
          nullable: true
          type: number
        style: form
        x-position: 11
      - description: True to ignore the asset focus point if any.
        explode: true
        in: query
        name: nofocus
        required: false
        schema:
          type: boolean
        style: form
        x-position: 12
      - description: True to use auto format.
        explode: true
        in: query
        name: auto
        required: false
        schema:
          type: boolean
        style: form
        x-position: 13
      - description: True to force a new resize even if it already stored.
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
        x-position: 14
      - description: True to force a new resize even if it already stored.
        explode: true
        in: query
        name: format
        required: false
        schema:
          $ref: '#/components/schemas/ImageFormat'
        style: form
        x-position: 15
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Asset found and content or (resized) image returned.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get the asset content.
      tags:
      - Assets
  /api/apps/{app}/assets/folders:
    get:
      description: Get all asset folders for the app.
      operationId: AssetFolders_GetAssetFolders
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The optional parent folder id.
        explode: true
        in: query
        name: parentId
        required: false
        schema:
          type: string
        style: form
        x-position: 2
      - description: The scope of the query.
        explode: true
        in: query
        name: scope
        required: false
        schema:
          $ref: '#/components/schemas/AssetFolderScope'
        style: form
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetFoldersDto'
          description: Asset folders returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.read"
      summary: Get asset folders.
      tags:
      - Assets
    post:
      operationId: AssetFolders_PostAssetFolder
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetFolderDto'
        description: The asset folder object that needs to be added to the App.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetFolderDto'
          description: Asset folder created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset folder request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.update"
      summary: Create an asset folder.
      tags:
      - Assets
  /api/apps/{app}/assets/folders/{id}:
    delete:
      operationId: AssetFolders_DeleteAssetFolder
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset folder to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Asset folder deleted.
        "404":
          description: Asset folder or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.update"
      summary: Delete an asset folder.
      tags:
      - Assets
    put:
      operationId: AssetFolders_PutAssetFolder
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset folder.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameAssetFolderDto'
        description: The asset folder object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetFolderDto'
          description: Asset folder updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset folder request not valid.
        "404":
          description: Asset folder or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.update"
      summary: Update an asset folder.
      tags:
      - Assets
  /api/apps/{app}/assets/folders/{id}/parent:
    put:
      operationId: AssetFolders_PutAssetFolderParent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset folder.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveAssetFolderDto'
        description: The asset folder object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetFolderDto'
          description: Asset folder moved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset folder request not valid.
        "404":
          description: Asset folder or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.update"
      summary: Move an asset folder.
      tags:
      - Assets
  /api/apps/{app}/assets/tags:
    get:
      description: Get all tags for assets.
      operationId: Assets_GetTags
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: Assets tags returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.read"
      summary: Get assets tags.
      tags:
      - Assets
  /api/apps/{app}/assets/tags/{name}:
    put:
      operationId: Assets_PutTag
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The tag to return.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameTagDto'
        description: The required request object.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: Asset tag renamed and new tags returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.update"
      summary: Rename an asset tag.
      tags:
      - Assets
  /api/apps/{app}/assets:
    get:
      description: Get all assets for the app.
      operationId: Assets_GetAssets
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The optional parent folder id.
        explode: true
        in: query
        name: parentId
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 2
      - description: The optional asset ids.
        explode: true
        in: query
        name: ids
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 3
      - description: The optional json query.
        explode: true
        in: query
        name: q
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 4
      - description: Optional number of contents to take.
        explode: true
        in: query
        name: $top
        required: false
        schema:
          type: number
        style: form
      - description: Optional number of contents to skip.
        explode: true
        in: query
        name: $skip
        required: false
        schema:
          type: number
        style: form
      - description: Optional OData order definition.
        explode: true
        in: query
        name: $orderby
        required: false
        schema:
          type: string
        style: form
      - description: Optional OData filter.
        explode: true
        in: query
        name: $filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetsDto'
          description: Assets returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.read"
      summary: Get assets.
      tags:
      - Assets
    post:
      description: You can only upload one file at a time. The mime type of the file
        is not calculated by Squidex and is required correctly.
      operationId: Assets_PostAsset
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The optional parent folder id.
        explode: true
        in: query
        name: ParentId
        required: false
        schema:
          type: string
        style: form
        x-position: 2
      - description: The optional custom asset id.
        explode: true
        in: query
        name: Id
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 3
      - description: "True to duplicate the asset, event if the file has been uploaded."
        explode: true
        in: query
        name: Duplicate
        required: false
        schema:
          type: boolean
        style: form
        x-position: 4
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Assets_PostAsset_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset request not valid.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset exceeds the maximum upload size.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.create"
      summary: Upload a new asset.
      tags:
      - Assets
  /api/apps/{app}/assets/query:
    post:
      description: Get all assets for the app.
      operationId: Assets_GetAssetsPost
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDto'
        description: The required query object.
        required: true
        x-name: query
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetsDto'
          description: Assets returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.read"
      summary: Get assets.
      tags:
      - Assets
  /api/apps/{app}/assets/{id}:
    delete:
      operationId: Assets_DeleteAsset
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: True to check referrers of this asset.
        explode: true
        in: query
        name: CheckReferrers
        required: false
        schema:
          type: boolean
        style: form
        x-position: 3
      - description: True to delete the asset permanently.
        explode: true
        in: query
        name: Permanent
        required: false
        schema:
          type: boolean
        style: form
        x-position: 4
      responses:
        "204":
          description: Asset deleted.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.delete"
      summary: Delete an asset.
      tags:
      - Assets
    get:
      operationId: Assets_GetAsset
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset found.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.read"
      summary: Get an asset by id.
      tags:
      - Assets
    post:
      description: You can only upload one file at a time. The mime type of the file
        is not calculated by Squidex and is required correctly.
      operationId: Assets_PostUpsertAsset
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The optional custom asset id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The optional parent folder id.
        explode: true
        in: query
        name: ParentId
        required: false
        schema:
          type: string
        style: form
        x-position: 3
      - description: "True to duplicate the asset, event if the file has been uploaded."
        explode: true
        in: query
        name: Duplicate
        required: false
        schema:
          type: boolean
        style: form
        x-position: 4
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Assets_PostAsset_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset created or updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset request not valid.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset exceeds the maximum upload size.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.create"
      summary: Upsert an asset.
      tags:
      - Assets
    put:
      operationId: Assets_PutAsset
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotateAssetDto'
        description: The asset object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset request not valid.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.update"
      summary: Update an asset.
      tags:
      - Assets
  /api/apps/{app}/assets/bulk:
    post:
      operationId: Assets_BulkUpdateAssets
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateAssetsDto'
        description: The bulk update request.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BulkResultDto'
                type: array
          description: "Assets created, update or delete."
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Assets request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.read"
      summary: Bulk update assets.
      tags:
      - Assets
  /api/apps/{app}/assets/{id}/content:
    put:
      description: Use multipart request to upload an asset.
      operationId: Assets_PutAssetContent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Assets_PutAssetContent_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset request not valid.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset exceeds the maximum upload size.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.upload"
      summary: Replace asset content.
      tags:
      - Assets
  /api/apps/{app}/assets/{id}/parent:
    put:
      operationId: Assets_PutAssetParent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveAssetDto'
        description: The asset object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset moved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset request not valid.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.assets.update"
      summary: Moves the asset.
      tags:
      - Assets
  /api/apps/{app}/assets/scripts:
    get:
      operationId: AppAssets_GetAssetScripts
      parameters:
      - description: The name of the app to get the asset scripts for.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScriptsDto'
          description: Asset scripts returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.asset-scripts.read"
      summary: Get the app asset scripts.
      tags:
      - Apps
    put:
      operationId: AppAssets_PutAssetScripts
      parameters:
      - description: The name of the app to update.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetScriptsDto'
        description: The values to update.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScriptsDto'
          description: Asset scripts updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.asset-scripts.update"
      summary: Update the app asset scripts.
      tags:
      - Apps
  /api/apps/{app}/clients:
    get:
      description: Gets all configured clients for the app with the specified name.
      operationId: AppClients_GetClients
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsDto'
          description: Clients returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.clients.read"
      summary: Get app clients.
      tags:
      - Apps
    post:
      description: |-
        Create a new client for the app with the specified name.
        The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.
      operationId: AppClients_PostClient
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientDto'
        description: Client object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsDto'
          description: Client created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Client request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.clients.create"
      summary: Create a new app client.
      tags:
      - Apps
  /api/apps/{app}/clients/{id}:
    delete:
      description: The application that uses this client credentials cannot access
        the API after it has been revoked.
      operationId: AppClients_DeleteClient
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the client that must be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsDto'
          description: Client deleted.
        "404":
          description: Client or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.clients.delete"
      summary: Revoke an app client.
      tags:
      - Apps
    put:
      description: "Only the display name can be changed, create a new client if necessary."
      operationId: AppClients_PutClient
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the client that must be updated.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientDto'
        description: Client object that needs to be updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsDto'
          description: Client updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Client request not valid.
        "404":
          description: Client or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.clients.update"
      summary: Updates an app client.
      tags:
      - Apps
  /api/apps/{app}/contributors:
    get:
      operationId: AppContributors_GetContributors
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsDto'
          description: Contributors returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.contributors.read"
      summary: Get app contributors.
      tags:
      - Apps
    post:
      operationId: AppContributors_PostContributor
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignContributorDto'
        description: Contributor object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsDto'
          description: Contributor assigned to app.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Contributor request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.contributors.assign"
      summary: Assign contributor to app.
      tags:
      - Apps
  /api/apps/{app}/contributors/me:
    delete:
      operationId: AppContributors_DeleteMyself
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsDto'
          description: Contributor removed.
        "404":
          description: Contributor or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Remove yourself.
      tags:
      - Apps
  /api/apps/{app}/contributors/{id}:
    delete:
      operationId: AppContributors_DeleteContributor
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the contributor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsDto'
          description: Contributor removed.
        "404":
          description: Contributor or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.contributors.revoke"
      summary: Remove contributor.
      tags:
      - Apps
  /api/apps/{app}/image:
    delete:
      operationId: Apps_DeleteImage
      parameters:
      - description: The name of the app to update.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: App image removed.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.image"
      summary: Remove the app image.
      tags:
      - Apps
    get:
      operationId: AppImage_GetImage
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: App image found and content or (resized) image returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      summary: Get the app image.
      tags:
      - Apps
    post:
      operationId: Apps_UploadImage
      parameters:
      - description: The name of the app to update.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Assets_PutAssetContent_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: App image uploaded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: App request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.image"
      summary: Upload the app image.
      tags:
      - Apps
  /api/apps/{app}/languages:
    get:
      operationId: AppLanguages_GetLanguages
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLanguagesDto'
          description: Languages returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.languages.read"
      summary: Get app languages.
      tags:
      - Apps
    post:
      operationId: AppLanguages_PostLanguage
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddLanguageDto'
        description: The language to add to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLanguagesDto'
          description: Language created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Language request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.languages.create"
      summary: Attaches an app language.
      tags:
      - Apps
  /api/apps/{app}/languages/{language}:
    delete:
      operationId: AppLanguages_DeleteLanguage
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The language to delete from the app.
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLanguagesDto'
          description: Language deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Language is master language.
        "404":
          description: Language or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.languages.delete"
      summary: Deletes an app language.
      tags:
      - Apps
    put:
      operationId: AppLanguages_PutLanguage
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The language to update.
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLanguageDto'
        description: The language object.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLanguagesDto'
          description: Language updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Language request not valid.
        "404":
          description: Language or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.languages.update"
      summary: Updates an app language.
      tags:
      - Apps
  /api/apps/{app}/roles:
    get:
      operationId: AppRoles_GetRoles
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesDto'
          description: Roles returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.roles.read"
      summary: Get app roles.
      tags:
      - Apps
    post:
      operationId: AppRoles_PostRole
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRoleDto'
        description: Role object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesDto'
          description: Role created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Role request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.roles.create"
      summary: Add role to app.
      tags:
      - Apps
  /api/apps/{app}/roles/permissions:
    get:
      operationId: AppRoles_GetPermissions
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: App permissions returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.roles.read"
      summary: Get app permissions.
      tags:
      - Apps
  /api/apps/{app}/roles/{roleName}:
    delete:
      operationId: AppRoles_DeleteRole
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the role.
        explode: false
        in: path
        name: roleName
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesDto'
          description: Role deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Role is in use by contributor or client or a default role.
        "404":
          description: Role or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.roles.delete"
      summary: Remove role from app.
      tags:
      - Apps
    put:
      operationId: AppRoles_PutRole
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the role to be updated.
        explode: false
        in: path
        name: roleName
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleDto'
        description: Role to be updated for the app.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesDto'
          description: Role updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Role request not valid.
        "404":
          description: Role or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.roles.update"
      summary: Update an app role.
      tags:
      - Apps
  /api/apps:
    get:
      description: |-
        You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
        You will retrieve all apps, where you are assigned as a contributor.
      operationId: Apps_GetApps
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AppDto'
                type: array
          description: Apps returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get your apps.
      tags:
      - Apps
    post:
      description: |-
        You can only create an app when you are authenticated as a user (OpenID implicit flow).
        You will be assigned as owner of the new app automatically.
      operationId: Apps_PostApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppDto'
        description: The app object that needs to be added to Squidex.
        required: true
        x-name: request
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: App created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: App request not valid.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: App name is already in use.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Create a new app.
      tags:
      - Apps
  /api/apps/{app}:
    delete:
      operationId: Apps_DeleteApp
      parameters:
      - description: The name of the app to delete.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "204":
          description: App deleted.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.delete"
      summary: Delete the app.
      tags:
      - Apps
    get:
      operationId: Apps_GetApp
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: Apps returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get an app by name.
      tags:
      - Apps
    put:
      operationId: Apps_PutApp
      parameters:
      - description: The name of the app to update.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppDto'
        description: The values to update.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: App updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: App request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.update"
      summary: Update the app.
      tags:
      - Apps
  /api/apps/{app}/settings:
    get:
      operationId: AppSettings_GetSettings
      parameters:
      - description: The name of the app to get the settings for.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSettingsDto'
          description: App settings returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth: []
      summary: Get the app settings.
      tags:
      - Apps
    put:
      operationId: AppSettings_PutSettings
      parameters:
      - description: The name of the app to update.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppSettingsDto'
        description: The values to update.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSettingsDto'
          description: App updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: App request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.settings"
      summary: Update the app settings.
      tags:
      - Apps
  /api/apps/{app}/workflows:
    get:
      operationId: AppWorkflows_GetWorkflows
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowsDto'
          description: Workflows returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.workflows.read"
      summary: Get app workflow.
      tags:
      - Apps
    post:
      operationId: AppWorkflows_PostWorkflow
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWorkflowDto'
        description: The new workflow.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowsDto'
          description: Workflow created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Workflow request not valid.
        "404":
          description: Workflow or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.workflows.update"
      summary: Create a workflow.
      tags:
      - Apps
  /api/apps/{app}/workflows/{id}:
    delete:
      operationId: AppWorkflows_DeleteWorkflow
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the workflow to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowsDto'
          description: Workflow deleted.
        "404":
          description: Workflow or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.workflows.update"
      summary: Delete a workflow.
      tags:
      - Apps
    put:
      operationId: AppWorkflows_PutWorkflow
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the workflow to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowDto'
        description: The new workflow.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowsDto'
          description: Workflow updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Workflow request not valid.
        "404":
          description: Workflow or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed.
      security:
      - squidex-oauth-auth:
        - "squidex.apps.{app}.workflows.update"
      summary: Update a workflow.
      tags:
      - Apps
components:
  schemas:
    UserProperty:
      additionalProperties: false
      properties:
        name:
          minLength: 1
          type: string
        value:
          minLength: 1
          type: string
      required:
      - name
      - value
      type: object
    UsersDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/UsersDto_allOf'
    UserDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/UserDto_allOf'
    Resource:
      additionalProperties: false
      properties:
        _links:
          additionalProperties:
            $ref: '#/components/schemas/ResourceLink'
          description: The links.
          type: object
      required:
      - _links
      type: object
      x-abstract: true
    ResourceLink:
      additionalProperties: false
      properties:
        href:
          description: The link url.
          minLength: 1
          type: string
        method:
          description: The link method.
          minLength: 1
          type: string
        metadata:
          description: Additional data about the link.
          nullable: true
          type: string
      required:
      - href
      - method
      type: object
    CreateUserDto:
      additionalProperties: false
      properties:
        email:
          description: The email of the user. Unique value.
          minLength: 1
          type: string
        displayName:
          description: The display name (usually first name and last name) of the
            user.
          minLength: 1
          type: string
        password:
          description: The password of the user.
          minLength: 1
          type: string
        permissions:
          description: Additional permissions for the user.
          items:
            type: string
          type: array
      required:
      - displayName
      - email
      - password
      - permissions
      type: object
    UpdateUserDto:
      additionalProperties: false
      properties:
        email:
          description: The email of the user. Unique value.
          minLength: 1
          type: string
        displayName:
          description: The display name (usually first name and last name) of the
            user.
          minLength: 1
          type: string
        password:
          description: The password of the user.
          nullable: true
          type: string
        permissions:
          description: Additional permissions for the user.
          items:
            type: string
          type: array
      required:
      - displayName
      - email
      - permissions
      type: object
    UISettingsDto:
      additionalProperties: false
      properties:
        canCreateApps:
          description: True when the user can create apps.
          type: boolean
      type: object
    UpdateSettingDto:
      additionalProperties: false
      properties:
        value:
          description: The value for the setting.
      type: object
    EventConsumersDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/EventConsumersDto_allOf'
    EventConsumerDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/EventConsumerDto_allOf'
    ContentsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ContentsDto_allOf'
    ContentDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ContentDto_allOf'
    ContentData:
      additionalProperties:
        $ref: '#/components/schemas/ContentFieldData'
      type: object
    ContentFieldData:
      additionalProperties: {}
      type: object
    ScheduleJobDto:
      additionalProperties: false
      properties:
        id:
          description: The id of the schedule job.
          type: string
        status:
          description: The new status.
          type: string
        dueTime:
          description: The target date and time when the content should be scheduled.
          format: date-time
          type: string
        color:
          description: The color of the scheduled status.
          type: string
        scheduledBy:
          description: The user who schedule the content.
          minLength: 1
          type: string
      required:
      - scheduledBy
      type: object
    FieldDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/FieldDto_allOf'
    FieldPropertiesDto:
      additionalProperties: false
      discriminator:
        mapping:
          Array: '#/components/schemas/ArrayFieldPropertiesDto'
          Assets: '#/components/schemas/AssetsFieldPropertiesDto'
          Boolean: '#/components/schemas/BooleanFieldPropertiesDto'
          Component: '#/components/schemas/ComponentFieldPropertiesDto'
          Components: '#/components/schemas/ComponentsFieldPropertiesDto'
          DateTime: '#/components/schemas/DateTimeFieldPropertiesDto'
          Geolocation: '#/components/schemas/GeolocationFieldPropertiesDto'
          Json: '#/components/schemas/JsonFieldPropertiesDto'
          Number: '#/components/schemas/NumberFieldPropertiesDto'
          References: '#/components/schemas/ReferencesFieldPropertiesDto'
          String: '#/components/schemas/StringFieldPropertiesDto'
          Tags: '#/components/schemas/TagsFieldPropertiesDto'
          UI: '#/components/schemas/UIFieldPropertiesDto'
        propertyName: fieldType
      example:
        isRequired: true
        editorUrl: editorUrl
        hints: hints
        label: label
        placeholder: placeholder
        isRequiredOnPublish: true
        fieldType: fieldType
        isHalfWidth: true
        tags:
        - tags
        - tags
      properties:
        label:
          description: Optional label for the editor.
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
        hints:
          description: Hints to describe the field.
          maxLength: 1000
          minLength: 0
          nullable: true
          type: string
        placeholder:
          description: Placeholder to show when no value has been entered.
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
        isRequired:
          description: Indicates if the field is required.
          type: boolean
        isRequiredOnPublish:
          description: Indicates if the field is required when publishing.
          type: boolean
        isHalfWidth:
          description: Indicates if the field should be rendered with half width only.
          type: boolean
        editorUrl:
          description: Optional url to the editor.
          nullable: true
          type: string
        tags:
          description: Tags for automation processes.
          items:
            type: string
          nullable: true
          type: array
        fieldType:
          type: string
      required:
      - fieldType
      type: object
      x-abstract: true
    ArrayFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/ArrayFieldPropertiesDto_allOf'
    AssetsFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/AssetsFieldPropertiesDto_allOf'
    AssetPreviewMode:
      description: ""
      enum:
      - ImageAndFileName
      - Image
      - FileName
      type: string
      x-enumNames:
      - ImageAndFileName
      - Image
      - FileName
    LocalizedValueOfReadonlyListOfString:
      additionalProperties:
        items:
          type: string
        type: array
      type: object
    AssetType:
      description: ""
      enum:
      - Unknown
      - Image
      - Audio
      - Video
      type: string
      x-enumNames:
      - Unknown
      - Image
      - Audio
      - Video
    BooleanFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/BooleanFieldPropertiesDto_allOf'
    LocalizedValueOfNullableBoolean:
      additionalProperties:
        nullable: true
        type: boolean
      type: object
    BooleanFieldEditor:
      description: ""
      enum:
      - Checkbox
      - Toggle
      type: string
      x-enumNames:
      - Checkbox
      - Toggle
    ComponentFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/ComponentFieldPropertiesDto_allOf'
    ComponentsFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/ComponentsFieldPropertiesDto_allOf'
    DateTimeFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/DateTimeFieldPropertiesDto_allOf'
    LocalizedValueOfNullableInstant:
      additionalProperties:
        format: date-time
        nullable: true
        type: string
      type: object
    DateTimeFieldEditor:
      description: ""
      enum:
      - Date
      - DateTime
      type: string
      x-enumNames:
      - Date
      - DateTime
    DateTimeCalculatedDefaultValue:
      description: ""
      enum:
      - Now
      - Today
      type: string
      x-enumNames:
      - Now
      - Today
    GeolocationFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/GeolocationFieldPropertiesDto_allOf'
    GeolocationFieldEditor:
      description: ""
      enum:
      - Map
      type: string
      x-enumNames:
      - Map
    JsonFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - additionalProperties: false
        type: object
    NumberFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/NumberFieldPropertiesDto_allOf'
    LocalizedValueOfNullableDouble:
      additionalProperties:
        format: double
        nullable: true
        type: number
      type: object
    NumberFieldEditor:
      description: ""
      enum:
      - Input
      - Radio
      - Dropdown
      - Stars
      type: string
      x-enumNames:
      - Input
      - Radio
      - Dropdown
      - Stars
    ReferencesFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/ReferencesFieldPropertiesDto_allOf'
    ReferencesFieldEditor:
      description: ""
      enum:
      - List
      - Dropdown
      - Tags
      - Checkboxes
      - Input
      type: string
      x-enumNames:
      - List
      - Dropdown
      - Tags
      - Checkboxes
      - Input
    StringFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/StringFieldPropertiesDto_allOf'
    LocalizedValueOfString:
      additionalProperties:
        type: string
      type: object
    StringContentType:
      description: ""
      enum:
      - Unspecified
      - Html
      - Markdown
      type: string
      x-enumNames:
      - Unspecified
      - Html
      - Markdown
    StringFieldEditor:
      description: ""
      enum:
      - Input
      - Color
      - Markdown
      - Dropdown
      - Html
      - Radio
      - RichText
      - Slug
      - StockPhoto
      - TextArea
      type: string
      x-enumNames:
      - Input
      - Color
      - Markdown
      - Dropdown
      - Html
      - Radio
      - RichText
      - Slug
      - StockPhoto
      - TextArea
    TagsFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/TagsFieldPropertiesDto_allOf'
    TagsFieldEditor:
      description: ""
      enum:
      - Tags
      - Checkboxes
      - Dropdown
      type: string
      x-enumNames:
      - Tags
      - Checkboxes
      - Dropdown
    UIFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/UIFieldPropertiesDto_allOf'
    UIFieldEditor:
      description: ""
      enum:
      - Separator
      type: string
      x-enumNames:
      - Separator
    NestedFieldDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/NestedFieldDto_allOf'
    StatusInfoDto:
      additionalProperties: false
      properties:
        status:
          description: The name of the status.
          minLength: 1
          type: string
        color:
          description: The color of the status.
          minLength: 1
          type: string
      required:
      - color
      - status
      type: object
    AllContentsByPostDto:
      additionalProperties: false
      properties:
        ids:
          description: The list of ids to query.
          items:
            type: string
          nullable: true
          type: array
        scheduledFrom:
          description: The start of the schedule.
          format: date-time
          nullable: true
          type: string
        scheduledTo:
          description: The end of the schedule.
          format: date-time
          nullable: true
          type: string
      type: object
    QueryDto:
      additionalProperties: false
      example:
        q: ""
        oData: oData
        ids:
        - ids
        - ids
        parentId: parentId
      properties:
        ids:
          description: The optional list of ids to query.
          items:
            type: string
          nullable: true
          type: array
        oData:
          description: The optional odata query.
          nullable: true
          type: string
        q:
          description: The optional json query.
          nullable: true
        parentId:
          description: The parent id (for assets).
          nullable: true
          type: string
      type: object
    BulkResultDto:
      additionalProperties: false
      example:
        jobIndex: 6
        contentId: contentId
        id: id
        error:
          traceId: traceId
          errorCode: errorCode
          details:
          - details
          - details
          message: message
          type: type
          statusCode: 0
      properties:
        error:
          $ref: '#/components/schemas/ErrorDto'
        jobIndex:
          description: The index of the bulk job where the result belongs to. The
            order can change.
          format: int32
          type: integer
        id:
          description: The id of the entity that has been handled successfully or
            not.
          nullable: true
          type: string
        contentId:
          deprecated: true
          description: The id of the entity that has been handled successfully or
            not.
          nullable: true
          type: string
          x-deprecatedMessage: Use 'id' field now.
      type: object
    ErrorDto:
      additionalProperties: false
      example:
        traceId: traceId
        errorCode: errorCode
        details:
        - details
        - details
        message: message
        type: type
        statusCode: 0
      properties:
        message:
          description: Error message.
          minLength: 1
          type: string
        errorCode:
          description: The error code.
          nullable: true
          type: string
        traceId:
          description: The optional trace id.
          nullable: true
          type: string
        type:
          description: Link to the error details.
          nullable: true
          type: string
        details:
          description: Detailed error messages.
          items:
            type: string
          nullable: true
          type: array
        statusCode:
          description: Status code of the http response.
          format: int32
          type: integer
      required:
      - message
      type: object
    ImportContentsDto:
      additionalProperties: false
      properties:
        datas:
          description: The data to import.
          items:
            $ref: '#/components/schemas/ContentData'
          type: array
        publish:
          deprecated: true
          description: True to automatically publish the content.
          type: boolean
          x-deprecatedMessage: Use bulk endpoint now.
        doNotScript:
          description: "True to turn off scripting for faster inserts. Default: true."
          type: boolean
        optimizeValidation:
          description: "True to turn off costly validation: Unique checks, asset checks\
            \ and reference checks. Default: true."
          type: boolean
      required:
      - datas
      type: object
    BulkUpdateContentsDto:
      additionalProperties: false
      properties:
        jobs:
          description: The contents to update or insert.
          items:
            $ref: '#/components/schemas/BulkUpdateContentsJobDto'
          type: array
        publish:
          deprecated: true
          description: True to automatically publish the content.
          type: boolean
          x-deprecatedMessage: Use 'jobs.status' fields now.
        doNotScript:
          description: "True to turn off scripting for faster inserts. Default: true."
          type: boolean
        doNotValidate:
          description: "True to turn off validation for faster inserts. Default: false."
          type: boolean
        doNotValidateWorkflow:
          description: "True to turn off validation of workflow rules. Default: false."
          type: boolean
        checkReferrers:
          description: True to check referrers of deleted contents.
          type: boolean
        optimizeValidation:
          description: "True to turn off costly validation: Unique checks, asset checks\
            \ and reference checks. Default: true."
          type: boolean
      required:
      - jobs
      type: object
    BulkUpdateContentsJobDto:
      additionalProperties: false
      properties:
        query:
          $ref: '#/components/schemas/QueryJsonDto'
        id:
          description: An optional id of the content to update.
          nullable: true
          type: string
        data:
          additionalProperties:
            $ref: '#/components/schemas/ContentFieldData'
          type: object
        status:
          description: The new status when the type is set to 'ChangeStatus' or 'Upsert'.
          nullable: true
          type: string
        dueTime:
          description: The due time.
          format: date-time
          nullable: true
          type: string
        type:
          $ref: '#/components/schemas/BulkUpdateContentType'
        schema:
          description: The optional schema id or name.
          nullable: true
          type: string
        patch:
          description: Makes the update as patch.
          type: boolean
        permanent:
          description: True to delete the content permanently.
          type: boolean
        expectedCount:
          description: The number of expected items. Set it to a higher number to
            update multiple items when a query is defined.
          format: int64
          type: integer
        expectedVersion:
          description: The expected version.
          format: int64
          type: integer
      type: object
    QueryJsonDto:
      additionalProperties: false
      properties:
        filter:
          nullable: true
        fullText:
          nullable: true
          type: string
        skip:
          format: int64
          type: integer
        take:
          format: int64
          type: integer
        top:
          format: int64
          type: integer
        sort:
          items:
            $ref: '#/components/schemas/SortNode'
          type: array
      type: object
    SortNode:
      additionalProperties: false
      properties:
        path:
          items:
            type: string
          type: array
        order:
          $ref: '#/components/schemas/SortOrder'
      type: object
    PropertyPath:
      items:
        type: string
      type: array
    SortOrder:
      description: ""
      enum:
      - Ascending
      - Descending
      type: string
      x-enumNames:
      - Ascending
      - Descending
    BulkUpdateContentType:
      description: ""
      enum:
      - Upsert
      - ChangeStatus
      - Create
      - Delete
      - Patch
      - Update
      - Validate
      type: string
      x-enumNames:
      - Upsert
      - ChangeStatus
      - Create
      - Delete
      - Patch
      - Update
      - Validate
    ChangeStatusDto:
      additionalProperties: false
      properties:
        status:
          description: The new status.
          minLength: 1
          type: string
        dueTime:
          description: The due time.
          format: date-time
          nullable: true
          type: string
        checkReferrers:
          description: True to check referrers of this content.
          type: boolean
      required:
      - status
      type: object
    ResourcesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - additionalProperties: false
        type: object
    TranslationDto:
      additionalProperties: false
      example:
        result: null
        text: text
      properties:
        result:
          $ref: '#/components/schemas/TranslationResultCode'
        text:
          description: The translated text.
          nullable: true
          type: string
      type: object
    TranslationResultCode:
      description: ""
      enum:
      - Translated
      - LanguageNotSupported
      - NotTranslated
      - NotConfigured
      - Unauthorized
      - Failed
      type: string
      x-enumNames:
      - Translated
      - LanguageNotSupported
      - NotTranslated
      - NotConfigured
      - Unauthorized
      - Failed
    TranslateDto:
      additionalProperties: false
      example:
        targetLanguage: targetLanguage
        text: text
        sourceLanguage: sourceLanguage
      properties:
        text:
          description: The text to translate.
          minLength: 1
          type: string
        targetLanguage:
          description: The target language.
          minLength: 1
          type: string
        sourceLanguage:
          description: The optional source language.
          type: string
      required:
      - targetLanguage
      - text
      type: object
    TemplatesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/TemplatesDto_allOf'
    TemplateDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/TemplateDto_allOf'
    TemplateDetailsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/TemplateDetailsDto_allOf'
    LogDownloadDto:
      additionalProperties: false
      example:
        downloadUrl: downloadUrl
      properties:
        downloadUrl:
          description: The url to download the log.
          nullable: true
          type: string
      type: object
    CallsUsageDtoDto:
      additionalProperties: false
      example:
        totalCalls: 0
        allowedBytes: 2
        monthBytes: 5
        blockingApiCalls: 5
        totalBytes: 6
        details:
          key:
          - date: 2000-01-23
            totalCalls: 3
            totalBytes: 2
            averageElapsedMs: 4.145608029883936
          - date: 2000-01-23
            totalCalls: 3
            totalBytes: 2
            averageElapsedMs: 4.145608029883936
        allowedCalls: 7
        averageElapsedMs: 9.301444243932576
        monthCalls: 1
      properties:
        totalCalls:
          description: The total number of API calls.
          format: int64
          type: integer
        totalBytes:
          description: The total number of bytes transferred.
          format: int64
          type: integer
        monthCalls:
          description: The total number of API calls this month.
          format: int64
          type: integer
        monthBytes:
          description: The total number of bytes transferred this month.
          format: int64
          type: integer
        blockingApiCalls:
          description: The amount of calls that will block the app.
          format: int64
          type: integer
        allowedBytes:
          description: The included API traffic.
          format: int64
          type: integer
        allowedCalls:
          description: The included API calls.
          format: int64
          type: integer
        averageElapsedMs:
          description: The average duration in milliseconds.
          format: double
          type: number
        details:
          additionalProperties:
            items:
              $ref: '#/components/schemas/CallsUsagePerDateDto'
            type: array
          description: The statistics by date and group.
          type: object
      required:
      - details
      type: object
    CallsUsagePerDateDto:
      additionalProperties: false
      example:
        date: 2000-01-23
        totalCalls: 3
        totalBytes: 2
        averageElapsedMs: 4.145608029883936
      properties:
        date:
          description: The date when the usage was tracked.
          format: date
          type: string
        totalCalls:
          description: The total number of API calls.
          format: int64
          type: integer
        totalBytes:
          description: The total number of bytes transferred.
          format: int64
          type: integer
        averageElapsedMs:
          description: The average duration in milliseconds.
          format: double
          type: number
      type: object
    CurrentStorageDto:
      additionalProperties: false
      example:
        maxAllowed: 6
        size: 0
      properties:
        size:
          description: The size in bytes.
          format: int64
          type: integer
        maxAllowed:
          description: The maximum allowed asset size.
          format: int64
          type: integer
      type: object
    StorageUsagePerDateDto:
      additionalProperties: false
      example:
        date: 2000-01-23
        totalSize: 6
        totalCount: 0
      properties:
        date:
          description: The date when the usage was tracked.
          format: date
          type: string
        totalCount:
          description: The number of assets.
          format: int64
          type: integer
        totalSize:
          description: The size in bytes.
          format: int64
          type: integer
      type: object
    SearchResultDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/SearchResultDto_allOf'
    SearchResultType:
      description: ""
      enum:
      - Asset
      - Content
      - Dashboard
      - Setting
      - Rule
      - Schema
      type: string
      x-enumNames:
      - Asset
      - Content
      - Dashboard
      - Setting
      - Rule
      - Schema
    SchemaDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/SchemaDto_allOf'
    SchemaType:
      description: ""
      enum:
      - Default
      - Singleton
      - Component
      type: string
      x-enumNames:
      - Default
      - Singleton
      - Component
    SchemaPropertiesDto:
      additionalProperties: false
      properties:
        label:
          description: Optional label for the editor.
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
        hints:
          description: Hints to describe the schema.
          maxLength: 1000
          minLength: 0
          nullable: true
          type: string
        contentsSidebarUrl:
          description: The url to a the sidebar plugin for content lists.
          nullable: true
          type: string
        contentSidebarUrl:
          description: The url to a the sidebar plugin for content items.
          nullable: true
          type: string
        contentEditorUrl:
          description: The url to the editor plugin.
          nullable: true
          type: string
        validateOnPublish:
          description: True to validate the content items on publish.
          type: boolean
        tags:
          description: Tags for automation processes.
          items:
            type: string
          nullable: true
          type: array
      type: object
    SchemaScriptsDto:
      additionalProperties: false
      example:
        query: query
        change: change
        create: create
        update: update
        queryPre: queryPre
        delete: delete
      properties:
        query:
          description: The script that is executed for each content when querying
            contents.
          nullable: true
          type: string
        queryPre:
          description: The script that is executed for all contents when querying
            contents.
          nullable: true
          type: string
        create:
          description: The script that is executed when creating a content.
          nullable: true
          type: string
        update:
          description: The script that is executed when updating a content.
          nullable: true
          type: string
        delete:
          description: The script that is executed when deleting a content.
          nullable: true
          type: string
        change:
          description: The script that is executed when change a content status.
          nullable: true
          type: string
      type: object
    FieldNames:
      items:
        type: string
      type: array
    FieldRuleDto:
      additionalProperties: false
      example:
        condition: condition
        field: field
        action: null
      properties:
        action:
          $ref: '#/components/schemas/FieldRuleAction'
        field:
          description: The field to update.
          minLength: 1
          type: string
        condition:
          description: The condition.
          nullable: true
          type: string
      required:
      - action
      - field
      type: object
    FieldRuleAction:
      description: ""
      enum:
      - Disable
      - Hide
      - Require
      type: string
      x-enumNames:
      - Disable
      - Hide
      - Require
    AddFieldDto:
      additionalProperties: false
      example:
        name: name
        partitioning: partitioning
        properties:
          isRequired: true
          editorUrl: editorUrl
          hints: hints
          label: label
          placeholder: placeholder
          isRequiredOnPublish: true
          fieldType: fieldType
          isHalfWidth: true
          tags:
          - tags
          - tags
      properties:
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$"
          type: string
        partitioning:
          description: Determines the optional partitioning of the field.
          nullable: true
          type: string
        properties:
          $ref: '#/components/schemas/FieldPropertiesDto'
      required:
      - name
      - properties
      type: object
    ConfigureUIFieldsDto:
      additionalProperties: false
      example:
        fieldsInLists:
        - fieldsInLists
        - fieldsInLists
        fieldsInReferences:
        - fieldsInReferences
        - fieldsInReferences
      properties:
        fieldsInLists:
          items:
            type: string
          type: array
        fieldsInReferences:
          items:
            type: string
          type: array
      type: object
    ReorderFieldsDto:
      additionalProperties: false
      example:
        fieldIds:
        - 0
        - 0
      properties:
        fieldIds:
          description: The field ids in the target order.
          items:
            format: int64
            type: integer
          type: array
      required:
      - fieldIds
      type: object
    UpdateFieldDto:
      additionalProperties: false
      example:
        properties:
          isRequired: true
          editorUrl: editorUrl
          hints: hints
          label: label
          placeholder: placeholder
          isRequiredOnPublish: true
          fieldType: fieldType
          isHalfWidth: true
          tags:
          - tags
          - tags
      properties:
        properties:
          $ref: '#/components/schemas/FieldPropertiesDto'
      required:
      - properties
      type: object
    SchemasDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/SchemasDto_allOf'
    CreateSchemaDto:
      allOf:
      - $ref: '#/components/schemas/UpsertSchemaDto'
      - $ref: '#/components/schemas/CreateSchemaDto_allOf'
    UpsertSchemaDto:
      additionalProperties: false
      properties:
        properties:
          $ref: '#/components/schemas/SchemaPropertiesDto'
        scripts:
          $ref: '#/components/schemas/SchemaScriptsDto'
        fieldsInReferences:
          items:
            type: string
          type: array
        fieldsInLists:
          items:
            type: string
          type: array
        fields:
          description: Optional fields.
          items:
            $ref: '#/components/schemas/UpsertSchemaFieldDto'
          nullable: true
          type: array
        previewUrls:
          additionalProperties:
            type: string
          description: The optional preview urls.
          nullable: true
          type: object
        fieldRules:
          description: The optional field Rules.
          items:
            $ref: '#/components/schemas/FieldRuleDto'
          nullable: true
          type: array
        category:
          description: The category.
          nullable: true
          type: string
        isPublished:
          description: Set it to true to autopublish the schema.
          type: boolean
      type: object
      x-abstract: true
    UpsertSchemaFieldDto:
      additionalProperties: false
      properties:
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$"
          type: string
        isHidden:
          description: Defines if the field is hidden.
          type: boolean
        isLocked:
          description: Defines if the field is locked.
          type: boolean
        isDisabled:
          description: Defines if the field is disabled.
          type: boolean
        partitioning:
          description: Determines the optional partitioning of the field.
          nullable: true
          type: string
        properties:
          $ref: '#/components/schemas/FieldPropertiesDto'
        nested:
          description: The nested fields.
          items:
            $ref: '#/components/schemas/UpsertSchemaNestedFieldDto'
          nullable: true
          type: array
      required:
      - name
      - properties
      type: object
    UpsertSchemaNestedFieldDto:
      additionalProperties: false
      properties:
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$"
          type: string
        isHidden:
          description: Defines if the field is hidden.
          type: boolean
        isLocked:
          description: Defines if the field is locked.
          type: boolean
        isDisabled:
          description: Defines if the field is disabled.
          type: boolean
        properties:
          $ref: '#/components/schemas/FieldPropertiesDto'
      required:
      - name
      - properties
      type: object
    UpdateSchemaDto:
      additionalProperties: false
      example:
        hints: hints
        validateOnPublish: true
        label: label
        contentsSidebarUrl: contentsSidebarUrl
        contentEditorUrl: contentEditorUrl
        contentSidebarUrl: contentSidebarUrl
        tags:
        - tags
        - tags
      properties:
        label:
          description: Optional label for the editor.
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
        hints:
          description: Hints to describe the schema.
          maxLength: 1000
          minLength: 0
          nullable: true
          type: string
        contentsSidebarUrl:
          description: The url to a the sidebar plugin for content lists.
          nullable: true
          type: string
        contentSidebarUrl:
          description: The url to a the sidebar plugin for content items.
          nullable: true
          type: string
        contentEditorUrl:
          description: The url to the editor plugin.
          nullable: true
          type: string
        validateOnPublish:
          description: True to validate the content items on publish.
          type: boolean
        tags:
          description: Tags for automation processes.
          items:
            type: string
          nullable: true
          type: array
      type: object
    SynchronizeSchemaDto:
      allOf:
      - $ref: '#/components/schemas/UpsertSchemaDto'
      - $ref: '#/components/schemas/SynchronizeSchemaDto_allOf'
    ChangeCategoryDto:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          description: The name of the category.
          nullable: true
          type: string
      type: object
    ConfigurePreviewUrlsDto:
      additionalProperties:
        type: string
      type: object
    ConfigureFieldRulesDto:
      additionalProperties: false
      example:
        fieldRules:
        - condition: condition
          field: field
          action: null
        - condition: condition
          field: field
          action: null
      properties:
        fieldRules:
          description: The field rules to configure.
          items:
            $ref: '#/components/schemas/FieldRuleDto'
          nullable: true
          type: array
      type: object
    RuleElementDto:
      additionalProperties: false
      properties:
        description:
          description: Describes the action or trigger type.
          minLength: 1
          type: string
        display:
          description: The label for the action or trigger type.
          minLength: 1
          type: string
        title:
          description: Optional title.
          nullable: true
          type: string
        iconColor:
          description: The color for the icon.
          nullable: true
          type: string
        iconImage:
          description: The image for the icon.
          nullable: true
          type: string
        readMore:
          description: The optional link to the product that is integrated.
          nullable: true
          type: string
        properties:
          description: The properties.
          items:
            $ref: '#/components/schemas/RuleElementPropertyDto'
          type: array
      required:
      - description
      - display
      - properties
      type: object
    RuleElementPropertyDto:
      additionalProperties: false
      properties:
        editor:
          $ref: '#/components/schemas/RuleFieldEditor'
        name:
          description: The name of the editor.
          minLength: 1
          type: string
        display:
          description: The label to use.
          minLength: 1
          type: string
        options:
          description: "The options, if the editor is a dropdown."
          items:
            type: string
          nullable: true
          type: array
        description:
          description: The optional description.
          nullable: true
          type: string
        isFormattable:
          description: Indicates if the property is formattable.
          type: boolean
        isRequired:
          description: Indicates if the property is required.
          type: boolean
      required:
      - display
      - editor
      - name
      type: object
    RuleFieldEditor:
      description: ""
      enum:
      - Checkbox
      - Dropdown
      - Email
      - Javascript
      - Number
      - Password
      - Text
      - TextArea
      - Url
      type: string
      x-enumNames:
      - Checkbox
      - Dropdown
      - Email
      - Javascript
      - Number
      - Password
      - Text
      - TextArea
      - Url
    RulesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RulesDto_allOf'
    RuleDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RuleDto_allOf'
    RuleTriggerDto:
      additionalProperties: false
      discriminator:
        mapping:
          AssetChanged: '#/components/schemas/AssetChangedRuleTriggerDto'
          Comment: '#/components/schemas/CommentRuleTriggerDto'
          ContentChanged: '#/components/schemas/ContentChangedRuleTriggerDto'
          Manual: '#/components/schemas/ManualRuleTriggerDto'
          SchemaChanged: '#/components/schemas/SchemaChangedRuleTriggerDto'
          Usage: '#/components/schemas/UsageRuleTriggerDto'
        propertyName: triggerType
      example:
        triggerType: triggerType
      properties:
        triggerType:
          type: string
      required:
      - triggerType
      type: object
      x-abstract: true
    AssetChangedRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/AssetChangedRuleTriggerDto_allOf'
    CommentRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/AssetChangedRuleTriggerDto_allOf'
    ContentChangedRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/ContentChangedRuleTriggerDto_allOf'
    ContentChangedRuleTriggerSchemaDto:
      additionalProperties: false
      properties:
        schemaId:
          description: The id of the schema.
          type: string
        condition:
          description: Javascript condition when to trigger.
          nullable: true
          type: string
      type: object
    ManualRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - additionalProperties: false
        type: object
    SchemaChangedRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/AssetChangedRuleTriggerDto_allOf'
    UsageRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/UsageRuleTriggerDto_allOf'
    RuleAction:
      additionalProperties: false
      discriminator:
        mapping:
          Webhook: '#/components/schemas/WebhookRuleActionDto'
          Tweet: '#/components/schemas/TweetRuleActionDto'
          Slack: '#/components/schemas/SlackRuleActionDto'
          SignalR: '#/components/schemas/SignalRRuleActionDto'
          Script: '#/components/schemas/ScriptRuleActionDto'
          Prerender: '#/components/schemas/PrerenderRuleActionDto'
          Notification: '#/components/schemas/NotificationRuleActionDto'
          Medium: '#/components/schemas/MediumRuleActionDto'
          Fastly: '#/components/schemas/FastlyRuleActionDto'
          Email: '#/components/schemas/EmailRuleActionDto'
          ElasticSearch: '#/components/schemas/ElasticSearchRuleActionDto'
          Discourse: '#/components/schemas/DiscourseRuleActionDto'
          CreateContent: '#/components/schemas/CreateContentRuleActionDto'
          Comment: '#/components/schemas/CommentRuleActionDto'
          AzureQueue: '#/components/schemas/AzureQueueRuleActionDto'
          Algolia: '#/components/schemas/AlgoliaRuleActionDto'
        propertyName: actionType
      example:
        actionType: actionType
      properties:
        actionType:
          nullable: true
          type: string
      required:
      - actionType
      type: object
      x-abstract: true
    CreateRuleDto:
      additionalProperties: false
      example:
        action:
          actionType: actionType
        trigger:
          triggerType: triggerType
      properties:
        trigger:
          $ref: '#/components/schemas/RuleTriggerDto'
        action:
          $ref: '#/components/schemas/RuleAction'
      required:
      - action
      - trigger
      type: object
    UpdateRuleDto:
      additionalProperties: false
      example:
        isEnabled: true
        name: name
        action:
          actionType: actionType
        trigger:
          triggerType: triggerType
      properties:
        name:
          description: Optional rule name.
          nullable: true
          type: string
        trigger:
          $ref: '#/components/schemas/RuleTriggerDto'
        action:
          $ref: '#/components/schemas/RuleAction'
        isEnabled:
          description: Enable or disable the rule.
          nullable: true
          type: boolean
      type: object
    SimulatedRuleEventsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/SimulatedRuleEventsDto_allOf'
    SimulatedRuleEventDto:
      additionalProperties: false
      properties:
        eventId:
          description: The unique event id.
          format: guid
          minLength: 1
          type: string
        eventName:
          description: The name of the event.
          minLength: 1
          type: string
        event:
          description: The source event.
        enrichedEvent:
          description: The enriched event.
          nullable: true
        actionName:
          description: The data for the action.
          nullable: true
          type: string
        actionData:
          description: The name of the action.
          nullable: true
          type: string
        error:
          description: The name of the event.
          nullable: true
          type: string
        skipReasons:
          description: The reason why the event has been skipped.
          items:
            $ref: '#/components/schemas/SkipReason'
          type: array
      required:
      - event
      - eventId
      - eventName
      - skipReasons
      type: object
    SkipReason:
      description: ""
      enum:
      - None
      - ConditionDoesNotMatch
      - ConditionPrecheckDoesNotMatch
      - Disabled
      - Failed
      - FromRule
      - NoAction
      - NoTrigger
      - TooOld
      - WrongEvent
      - WrongEventForTrigger
      type: string
      x-enumFlags: true
      x-enumNames:
      - None
      - ConditionDoesNotMatch
      - ConditionPrecheckDoesNotMatch
      - Disabled
      - Failed
      - FromRule
      - NoAction
      - NoTrigger
      - TooOld
      - WrongEvent
      - WrongEventForTrigger
    RuleEventsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RuleEventsDto_allOf'
    RuleEventDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RuleEventDto_allOf'
    RuleResult:
      description: ""
      enum:
      - Pending
      - Success
      - Failed
      - Timeout
      type: string
      x-enumNames:
      - Pending
      - Success
      - Failed
      - Timeout
    RuleJobResult:
      description: ""
      enum:
      - Pending
      - Success
      - Retry
      - Failed
      - Cancelled
      type: string
      x-enumNames:
      - Pending
      - Success
      - Retry
      - Failed
      - Cancelled
    AppPlansDto:
      additionalProperties: false
      example:
        currentPlanId: currentPlanId
        plans:
        - maxApiBytes: 0
          costs: costs
          maxAssetSize: 1
          maxContributors: 5
          yearlyId: yearlyId
          maxApiCalls: 6
          name: name
          yearlyCosts: yearlyCosts
          confirmText: confirmText
          id: id
          yearlyConfirmText: yearlyConfirmText
        - maxApiBytes: 0
          costs: costs
          maxAssetSize: 1
          maxContributors: 5
          yearlyId: yearlyId
          maxApiCalls: 6
          name: name
          yearlyCosts: yearlyCosts
          confirmText: confirmText
          id: id
          yearlyConfirmText: yearlyConfirmText
        hasPortal: true
        planOwner: planOwner
      properties:
        plans:
          description: The available plans.
          items:
            $ref: '#/components/schemas/PlanDto'
          type: array
        currentPlanId:
          description: The current plan id.
          nullable: true
          type: string
        planOwner:
          description: The plan owner.
          nullable: true
          type: string
        hasPortal:
          description: Indicates if there is a billing portal.
          type: boolean
      required:
      - plans
      type: object
    PlanDto:
      additionalProperties: false
      example:
        maxApiBytes: 0
        costs: costs
        maxAssetSize: 1
        maxContributors: 5
        yearlyId: yearlyId
        maxApiCalls: 6
        name: name
        yearlyCosts: yearlyCosts
        confirmText: confirmText
        id: id
        yearlyConfirmText: yearlyConfirmText
      properties:
        id:
          description: The id of the plan.
          minLength: 1
          type: string
        name:
          description: The name of the plan.
          minLength: 1
          type: string
        costs:
          description: The monthly costs of the plan.
          minLength: 1
          type: string
        confirmText:
          description: An optional confirm text for the monthly subscription.
          nullable: true
          type: string
        yearlyConfirmText:
          description: An optional confirm text for the yearly subscription.
          nullable: true
          type: string
        yearlyCosts:
          description: The yearly costs of the plan.
          nullable: true
          type: string
        yearlyId:
          description: The yearly id of the plan.
          nullable: true
          type: string
        maxApiBytes:
          description: The maximum number of API traffic.
          format: int64
          type: integer
        maxApiCalls:
          description: The maximum number of API calls.
          format: int64
          type: integer
        maxAssetSize:
          description: The maximum allowed asset size.
          format: int64
          type: integer
        maxContributors:
          description: The maximum number of contributors.
          format: int32
          type: integer
      required:
      - costs
      - id
      - name
      type: object
    PlanChangedDto:
      additionalProperties: false
      example:
        redirectUri: redirectUri
      properties:
        redirectUri:
          description: Optional redirect uri.
          nullable: true
          type: string
      type: object
    ChangePlanDto:
      additionalProperties: false
      example:
        planId: planId
      properties:
        planId:
          description: The new plan id.
          minLength: 1
          type: string
      required:
      - planId
      type: object
    ExposedValues:
      additionalProperties:
        type: string
      type: object
    FeaturesDto:
      additionalProperties: false
      example:
        features:
        - name: name
          text: text
        - name: name
          text: text
        version: 0
      properties:
        features:
          description: The latest features.
          items:
            $ref: '#/components/schemas/FeatureDto'
          type: array
        version:
          description: The recent version.
          format: int32
          type: integer
      required:
      - features
      type: object
    FeatureDto:
      additionalProperties: false
      example:
        name: name
        text: text
      properties:
        name:
          description: The name of the feature.
          minLength: 1
          type: string
        text:
          description: The description text.
          minLength: 1
          type: string
      required:
      - name
      - text
      type: object
    LanguageDto:
      additionalProperties: false
      example:
        englishName: englishName
        nativeName: nativeName
        iso2Code: iso2Code
      properties:
        iso2Code:
          description: The iso code of the language.
          minLength: 1
          type: string
        englishName:
          description: The english name of the language.
          minLength: 1
          type: string
        nativeName:
          description: The native name of the language.
          minLength: 1
          type: string
      required:
      - englishName
      - iso2Code
      - nativeName
      type: object
    HistoryEventDto:
      additionalProperties: false
      example:
        actor: actor
        eventId: eventId
        created: 2000-01-23T04:56:07.000+00:00
        eventType: eventType
        message: message
        version: 0
      properties:
        message:
          description: The message for the event.
          minLength: 1
          type: string
        eventType:
          description: The type of the original event.
          minLength: 1
          type: string
        actor:
          description: The user who called the action.
          minLength: 1
          type: string
        eventId:
          description: Gets a unique id for the event.
          type: string
        created:
          description: The time when the event happened.
          format: date-time
          type: string
        version:
          description: The version identifier.
          format: int64
          type: integer
      required:
      - actor
      - eventType
      - message
      type: object
    CommentsDto:
      additionalProperties: false
      example:
        deletedComments:
        - deletedComments
        - deletedComments
        updatedComments:
        - id: id
          time: 2000-01-23T04:56:07.000+00:00
          text: text
          user: user
          url: https://openapi-generator.tech
        - id: id
          time: 2000-01-23T04:56:07.000+00:00
          text: text
          user: user
          url: https://openapi-generator.tech
        createdComments:
        - id: id
          time: 2000-01-23T04:56:07.000+00:00
          text: text
          user: user
          url: https://openapi-generator.tech
        - id: id
          time: 2000-01-23T04:56:07.000+00:00
          text: text
          user: user
          url: https://openapi-generator.tech
        version: 0
      properties:
        createdComments:
          description: The created comments including the updates.
          items:
            $ref: '#/components/schemas/CommentDto'
          nullable: true
          type: array
        updatedComments:
          description: The updates comments since the last version.
          items:
            $ref: '#/components/schemas/CommentDto'
          nullable: true
          type: array
        deletedComments:
          description: The deleted comments since the last version.
          items:
            type: string
          nullable: true
          type: array
        version:
          description: The current version.
          format: int64
          type: integer
      type: object
    CommentDto:
      additionalProperties: false
      example:
        id: id
        time: 2000-01-23T04:56:07.000+00:00
        text: text
        user: user
        url: https://openapi-generator.tech
      properties:
        id:
          description: The id of the comment.
          type: string
        time:
          description: The time when the comment was created or updated last.
          format: date-time
          minLength: 1
          type: string
        user:
          description: The user who created or updated the comment.
          minLength: 1
          type: string
        text:
          description: The text of the comment.
          minLength: 1
          type: string
        url:
          description: The url where the comment is created.
          format: uri
          nullable: true
          type: string
      required:
      - text
      - time
      - user
      type: object
    UpsertCommentDto:
      additionalProperties: false
      example:
        text: text
        url: https://openapi-generator.tech
      properties:
        text:
          description: The comment text.
          minLength: 1
          type: string
        url:
          description: The url where the comment is created.
          format: uri
          nullable: true
          type: string
      required:
      - text
      type: object
    BackupJobsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BackupJobsDto_allOf'
    BackupJobDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BackupJobDto_allOf'
    JobStatus:
      description: ""
      enum:
      - Created
      - Started
      - Completed
      - Failed
      type: string
      x-enumNames:
      - Created
      - Started
      - Completed
      - Failed
    RestoreJobDto:
      additionalProperties: false
      example:
        stopped: 2000-01-23T04:56:07.000+00:00
        log:
        - log
        - log
        started: 2000-01-23T04:56:07.000+00:00
        url: https://openapi-generator.tech
        status: null
      properties:
        url:
          description: The uri to load from.
          format: uri
          minLength: 1
          type: string
        log:
          description: The status log.
          items:
            type: string
          type: array
        started:
          description: The time when the job has been started.
          format: date-time
          type: string
        stopped:
          description: The time when the job has been stopped.
          format: date-time
          nullable: true
          type: string
        status:
          $ref: '#/components/schemas/JobStatus'
      required:
      - log
      - url
      type: object
    RestoreRequestDto:
      additionalProperties: false
      example:
        name: name
        url: https://openapi-generator.tech
      properties:
        name:
          description: The name of the app.
          nullable: true
          pattern: "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          type: string
        url:
          description: The url to the restore file.
          format: uri
          minLength: 1
          type: string
      required:
      - url
      type: object
    ResizeMode:
      description: ""
      enum:
      - Crop
      - CropUpsize
      - Pad
      - BoxPad
      - Max
      - Min
      - Stretch
      type: string
      x-enumNames:
      - Crop
      - CropUpsize
      - Pad
      - BoxPad
      - Max
      - Min
      - Stretch
    ImageFormat:
      description: ""
      enum:
      - AVIF
      - BMP
      - GIF
      - JPEG
      - PNG
      - TGA
      - TIFF
      - WEBP
      type: string
      x-enumNames:
      - AVIF
      - BMP
      - GIF
      - JPEG
      - PNG
      - TGA
      - TIFF
      - WEBP
    AssetFoldersDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AssetFoldersDto_allOf'
    AssetFolderDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AssetFolderDto_allOf'
    AssetFolderScope:
      description: ""
      enum:
      - PathAndItems
      - Path
      - Items
      type: string
      x-enumNames:
      - PathAndItems
      - Path
      - Items
    CreateAssetFolderDto:
      additionalProperties: false
      example:
        folderName: folderName
        parentId: parentId
      properties:
        folderName:
          description: The name of the folder.
          minLength: 1
          type: string
        parentId:
          description: The id of the parent folder.
          type: string
      required:
      - folderName
      type: object
    RenameAssetFolderDto:
      additionalProperties: false
      example:
        folderName: folderName
      properties:
        folderName:
          description: The name of the folder.
          minLength: 1
          type: string
      required:
      - folderName
      type: object
    MoveAssetFolderDto:
      additionalProperties: false
      example:
        parentId: parentId
      properties:
        parentId:
          description: The parent folder id.
          type: string
      type: object
    RenameTagDto:
      additionalProperties: false
      example:
        tagName: tagName
      properties:
        tagName:
          description: The new name for the tag.
          minLength: 1
          type: string
      required:
      - tagName
      type: object
    AssetsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AssetsDto_allOf'
    AssetDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AssetDto_allOf'
    AssetMeta:
      additionalProperties: false
      properties:
        isDuplicate:
          description: Indicates whether the asset is a duplicate.
          type: string
      type: object
    BulkUpdateAssetsDto:
      additionalProperties: false
      example:
        checkReferrers: true
        optimizeValidation: true
        doNotScript: true
        jobs:
        - fileName: fileName
          metadata:
            key: ""
          isProtected: true
          permanent: true
          id: id
          expectedVersion: 0
          type: null
          parentId: parentId
          slug: slug
          tags:
          - tags
          - tags
        - fileName: fileName
          metadata:
            key: ""
          isProtected: true
          permanent: true
          id: id
          expectedVersion: 0
          type: null
          parentId: parentId
          slug: slug
          tags:
          - tags
          - tags
      properties:
        jobs:
          description: The contents to update or insert.
          items:
            $ref: '#/components/schemas/BulkUpdateAssetsJobDto'
          type: array
        checkReferrers:
          description: True to check referrers of deleted assets.
          type: boolean
        optimizeValidation:
          description: "True to turn off costly validation: Folder checks. Default:\
            \ true."
          type: boolean
        doNotScript:
          description: "True to turn off scripting for faster inserts. Default: true."
          type: boolean
      required:
      - jobs
      type: object
    BulkUpdateAssetsJobDto:
      additionalProperties: false
      example:
        fileName: fileName
        metadata:
          key: ""
        isProtected: true
        permanent: true
        id: id
        expectedVersion: 0
        type: null
        parentId: parentId
        slug: slug
        tags:
        - tags
        - tags
      properties:
        id:
          description: An optional id of the asset to update.
          type: string
        type:
          $ref: '#/components/schemas/BulkUpdateAssetType'
        parentId:
          description: The parent folder id.
          type: string
        fileName:
          description: The new name of the asset.
          nullable: true
          type: string
        slug:
          description: The new slug of the asset.
          nullable: true
          type: string
        isProtected:
          description: "True, when the asset is not public."
          nullable: true
          type: boolean
        tags:
          description: The new asset tags.
          items:
            type: string
          nullable: true
          type: array
        metadata:
          additionalProperties:
            description: Any
          description: The asset metadata.
          nullable: true
          type: object
        permanent:
          description: True to delete the asset permanently.
          type: boolean
        expectedVersion:
          description: The expected version.
          format: int64
          type: integer
      type: object
    BulkUpdateAssetType:
      description: ""
      enum:
      - Annotate
      - Move
      - Delete
      type: string
      x-enumNames:
      - Annotate
      - Move
      - Delete
    AnnotateAssetDto:
      additionalProperties: false
      example:
        fileName: fileName
        metadata:
          key: ""
        isProtected: true
        slug: slug
        tags:
        - tags
        - tags
      properties:
        fileName:
          description: The new name of the asset.
          nullable: true
          type: string
        slug:
          description: The new slug of the asset.
          nullable: true
          type: string
        isProtected:
          description: "True, when the asset is not public."
          nullable: true
          type: boolean
        tags:
          description: The new asset tags.
          items:
            type: string
          nullable: true
          type: array
        metadata:
          additionalProperties:
            description: Any
          description: The asset metadata.
          nullable: true
          type: object
      type: object
    MoveAssetDto:
      additionalProperties: false
      example:
        parentId: parentId
      properties:
        parentId:
          description: The parent folder id.
          type: string
      type: object
    AssetScriptsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AssetScriptsDto_allOf'
    UpdateAssetScriptsDto:
      additionalProperties: false
      example:
        move: move
        create: create
        update: update
        annotate: annotate
        delete: delete
      properties:
        create:
          description: The script that is executed when creating an asset.
          nullable: true
          type: string
        update:
          description: The script that is executed when updating a content.
          nullable: true
          type: string
        annotate:
          description: The script that is executed when annotating a content.
          nullable: true
          type: string
        move:
          description: The script that is executed when moving a content.
          nullable: true
          type: string
        delete:
          description: The script that is executed when deleting a content.
          nullable: true
          type: string
      type: object
    ClientsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ClientsDto_allOf'
    ClientDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ClientDto_allOf'
    CreateClientDto:
      additionalProperties: false
      example:
        id: id
      properties:
        id:
          description: The id of the client.
          minLength: 1
          pattern: "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          type: string
      required:
      - id
      type: object
    UpdateClientDto:
      additionalProperties: false
      example:
        allowAnonymous: true
        apiTrafficLimit: 6
        role: role
        name: name
        apiCallsLimit: 0
      properties:
        name:
          description: The new display name of the client.
          maxLength: 20
          minLength: 0
          nullable: true
          type: string
        role:
          description: The role of the client.
          nullable: true
          type: string
        allowAnonymous:
          description: True to allow anonymous access without an access token for
            this client.
          nullable: true
          type: boolean
        apiCallsLimit:
          description: The number of allowed api calls per month for this client.
          format: int64
          nullable: true
          type: integer
        apiTrafficLimit:
          description: The number of allowed api traffic bytes per month for this
            client.
          format: int64
          nullable: true
          type: integer
      type: object
    ContributorsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ContributorsDto_allOf'
    ContributorDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ContributorDto_allOf'
    ContributorsMetadata:
      additionalProperties: false
      properties:
        isInvited:
          description: Indicates whether the user has been invited.
          type: string
      type: object
    AssignContributorDto:
      additionalProperties: false
      example:
        role: role
        contributorId: contributorId
        invite: true
      properties:
        contributorId:
          description: The id or email of the user to add to the app.
          minLength: 1
          type: string
        role:
          description: The role of the contributor.
          nullable: true
          type: string
        invite:
          description: Set to true to invite the user if he does not exist.
          type: boolean
      required:
      - contributorId
      type: object
    AppLanguagesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AppLanguagesDto_allOf'
    AppLanguageDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AppLanguageDto_allOf'
    AddLanguageDto:
      additionalProperties: false
      example:
        language: language
      properties:
        language:
          description: The language to add.
          minLength: 1
          type: string
      required:
      - language
      type: object
    UpdateLanguageDto:
      additionalProperties: false
      example:
        isMaster: true
        isOptional: true
        fallback:
        - fallback
        - fallback
      properties:
        isMaster:
          description: Set the value to true to make the language the master.
          nullable: true
          type: boolean
        isOptional:
          description: Set the value to true to make the language optional.
          type: boolean
        fallback:
          description: Optional fallback languages.
          items:
            type: string
          nullable: true
          type: array
      type: object
    RolesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RolesDto_allOf'
    RoleDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RoleDto_allOf'
    AddRoleDto:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          description: The role name.
          minLength: 1
          type: string
      required:
      - name
      type: object
    UpdateRoleDto:
      additionalProperties: false
      example:
        permissions:
        - permissions
        - permissions
        properties:
          key: ""
      properties:
        permissions:
          description: Associated list of permissions.
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            description: Any
          description: Associated list of UI properties.
          type: object
      required:
      - permissions
      type: object
    AppDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AppDto_allOf'
    CreateAppDto:
      additionalProperties: false
      example:
        template: template
        name: name
      properties:
        name:
          description: The name of the app.
          minLength: 1
          pattern: "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          type: string
        template:
          description: Initialize the app with the inbuilt template.
          nullable: true
          type: string
      required:
      - name
      type: object
    UpdateAppDto:
      additionalProperties: false
      example:
        description: description
        label: label
      properties:
        label:
          description: The optional label of your app.
          nullable: true
          type: string
        description:
          description: The optional description of your app.
          nullable: true
          type: string
      type: object
    AppSettingsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AppSettingsDto_allOf'
    PatternDto:
      additionalProperties: false
      example:
        regex: regex
        name: name
        message: message
      properties:
        name:
          description: The name of the suggestion.
          minLength: 1
          type: string
        regex:
          description: The regex pattern.
          minLength: 1
          type: string
        message:
          description: The regex message.
          nullable: true
          type: string
      required:
      - name
      - regex
      type: object
    EditorDto:
      additionalProperties: false
      example:
        name: name
        url: url
      properties:
        name:
          description: The name of the editor.
          minLength: 1
          type: string
        url:
          description: The url to the editor.
          minLength: 1
          type: string
      required:
      - name
      - url
      type: object
    UpdateAppSettingsDto:
      additionalProperties: false
      example:
        patterns:
        - regex: regex
          name: name
          message: message
        - regex: regex
          name: name
          message: message
        hideDateTimeModeButton: true
        hideScheduler: true
        editors:
        - name: name
          url: url
        - name: name
          url: url
      properties:
        patterns:
          description: The configured app patterns.
          items:
            $ref: '#/components/schemas/PatternDto'
          type: array
        editors:
          description: The configured UI editors.
          items:
            $ref: '#/components/schemas/EditorDto'
          type: array
        hideScheduler:
          description: Hide the scheduler for content items.
          type: boolean
        hideDateTimeModeButton:
          description: Hide the datetime mode button.
          type: boolean
      required:
      - editors
      - patterns
      type: object
    WorkflowsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/WorkflowsDto_allOf'
    WorkflowDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/WorkflowDto_allOf'
    WorkflowStepDto:
      additionalProperties: false
      example:
        noUpdate: true
        noUpdateExpression: noUpdateExpression
        color: color
        noUpdateRoles:
        - noUpdateRoles
        - noUpdateRoles
        transitions:
          key:
            expression: expression
            roles:
            - roles
            - roles
        validate: true
      properties:
        transitions:
          additionalProperties:
            $ref: '#/components/schemas/WorkflowTransitionDto'
          description: The transitions.
          type: object
        color:
          description: The optional color.
          nullable: true
          type: string
        validate:
          description: True if the content should be validated when moving to this
            step.
          type: boolean
        noUpdate:
          description: Indicates if updates should not be allowed.
          type: boolean
        noUpdateExpression:
          description: Optional expression that must evaluate to true when you want
            to prevent updates.
          nullable: true
          type: string
        noUpdateRoles:
          description: Optional list of roles to restrict the updates for users with
            these roles.
          items:
            type: string
          nullable: true
          type: array
      required:
      - transitions
      type: object
    WorkflowTransitionDto:
      additionalProperties: false
      example:
        expression: expression
        roles:
        - roles
        - roles
      properties:
        expression:
          description: The optional expression.
          nullable: true
          type: string
        roles:
          description: The optional restricted role.
          items:
            type: string
          nullable: true
          type: array
      type: object
    AddWorkflowDto:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          description: The name of the workflow.
          minLength: 1
          type: string
      required:
      - name
      type: object
    UpdateWorkflowDto:
      additionalProperties: false
      example:
        initial: initial
        schemaIds:
        - schemaIds
        - schemaIds
        name: name
        steps:
          key:
            noUpdate: true
            noUpdateExpression: noUpdateExpression
            color: color
            noUpdateRoles:
            - noUpdateRoles
            - noUpdateRoles
            transitions:
              key:
                expression: expression
                roles:
                - roles
                - roles
            validate: true
      properties:
        name:
          description: The name of the workflow.
          nullable: true
          type: string
        steps:
          additionalProperties:
            $ref: '#/components/schemas/WorkflowStepDto'
          description: The workflow steps.
          type: object
        schemaIds:
          description: The schema ids.
          items:
            type: string
          nullable: true
          type: array
        initial:
          description: The initial step.
          minLength: 1
          type: string
      required:
      - initial
      - steps
      type: object
    WebhookRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/WebhookRuleActionDto_allOf'
    WebhookMethod:
      description: ""
      enum:
      - POST
      - PUT
      - GET
      - DELETE
      - PATCH
      type: string
      x-enumNames:
      - POST
      - PUT
      - GET
      - DELETE
      - PATCH
    TweetRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/TweetRuleActionDto_allOf'
    SlackRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/SlackRuleActionDto_allOf'
    SignalRRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/SignalRRuleActionDto_allOf'
    ActionTypeEnum:
      description: ""
      enum:
      - Broadcast
      - User
      - Group
      type: string
      x-enumNames:
      - Broadcast
      - User
      - Group
    ScriptRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/ScriptRuleActionDto_allOf'
    PrerenderRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/PrerenderRuleActionDto_allOf'
    NotificationRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/NotificationRuleActionDto_allOf'
    MediumRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/MediumRuleActionDto_allOf'
    FastlyRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/FastlyRuleActionDto_allOf'
    EmailRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/EmailRuleActionDto_allOf'
    ElasticSearchRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/ElasticSearchRuleActionDto_allOf'
    DiscourseRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/DiscourseRuleActionDto_allOf'
    CreateContentRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/CreateContentRuleActionDto_allOf'
    CommentRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/CommentRuleActionDto_allOf'
    AzureQueueRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/AzureQueueRuleActionDto_allOf'
    AlgoliaRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/AlgoliaRuleActionDto_allOf'
    Assets_PostAsset_request:
      properties:
        File:
          format: binary
          nullable: true
          type: string
      type: object
    Assets_PutAssetContent_request:
      properties:
        file:
          format: binary
          nullable: true
          type: string
      type: object
    UsersDto_allOf:
      properties:
        total:
          description: The total number of users.
          format: int64
          type: integer
        items:
          description: The users.
          items:
            $ref: '#/components/schemas/UserDto'
          type: array
      required:
      - items
      type: object
      example: null
    UserDto_allOf:
      properties:
        id:
          description: The id of the user.
          minLength: 1
          type: string
        email:
          description: The email of the user. Unique value.
          minLength: 1
          type: string
        displayName:
          description: The display name (usually first name and last name) of the
            user.
          minLength: 1
          type: string
        isLocked:
          description: Determines if the user is locked.
          type: boolean
        permissions:
          description: Additional permissions for the user.
          items:
            type: string
          type: array
      required:
      - displayName
      - email
      - id
      - isLocked
      - permissions
      type: object
      example: null
    EventConsumersDto_allOf:
      properties:
        items:
          description: The event consumers.
          items:
            $ref: '#/components/schemas/EventConsumerDto'
          type: array
      type: object
      example: null
    EventConsumerDto_allOf:
      properties:
        isStopped:
          type: boolean
        isResetting:
          type: boolean
        count:
          format: int32
          type: integer
        name:
          type: string
        error:
          nullable: true
          type: string
        position:
          nullable: true
          type: string
      type: object
      example: null
    ContentsDto_allOf:
      properties:
        total:
          description: The total number of content items.
          format: int64
          type: integer
        items:
          description: The content items.
          items:
            $ref: '#/components/schemas/ContentDto'
          type: array
        statuses:
          description: The possible statuses.
          items:
            $ref: '#/components/schemas/StatusInfoDto'
          type: array
      required:
      - items
      - statuses
      type: object
      example: null
    ContentDto_allOf:
      properties:
        id:
          description: The if of the content item.
          type: string
        createdBy:
          description: The user that has created the content item.
          minLength: 1
          type: string
        lastModifiedBy:
          description: The user that has updated the content item.
          minLength: 1
          type: string
        data:
          description: The data of the content item.
        referenceData:
          additionalProperties:
            $ref: '#/components/schemas/ContentFieldData'
          type: object
        created:
          description: The date and time when the content item has been created.
          format: date-time
          type: string
        lastModified:
          description: The date and time when the content item has been modified last.
          format: date-time
          type: string
        status:
          description: The status of the content.
          type: string
        newStatus:
          description: The new status of the content.
          nullable: true
          type: string
        statusColor:
          description: The color of the status.
          type: string
        newStatusColor:
          description: The color of the new status.
          nullable: true
          type: string
        editToken:
          description: The UI token.
          nullable: true
          type: string
        scheduleJob:
          $ref: '#/components/schemas/ScheduleJobDto'
        schemaId:
          description: The id of the schema.
          type: string
        schemaName:
          description: The name of the schema.
          nullable: true
          type: string
        schemaDisplayName:
          description: The display name of the schema.
          nullable: true
          type: string
        referenceFields:
          description: The reference fields.
          items:
            $ref: '#/components/schemas/FieldDto'
          nullable: true
          type: array
        isDeleted:
          description: Indicates whether the content is deleted.
          type: boolean
        version:
          description: The version of the content.
          format: int64
          type: integer
      required:
      - createdBy
      - data
      - lastModifiedBy
      type: object
      example: null
    FieldDto_allOf:
      properties:
        fieldId:
          description: The id of the field.
          format: int64
          type: integer
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          type: string
        isHidden:
          description: Defines if the field is hidden.
          type: boolean
        isLocked:
          description: Defines if the field is locked.
          type: boolean
        isDisabled:
          description: Defines if the field is disabled.
          type: boolean
        partitioning:
          description: Defines the partitioning of the field.
          minLength: 1
          type: string
        properties:
          $ref: '#/components/schemas/FieldPropertiesDto'
        nested:
          description: The nested fields.
          items:
            $ref: '#/components/schemas/NestedFieldDto'
          nullable: true
          type: array
      required:
      - name
      - partitioning
      - properties
      type: object
      example: null
    ArrayFieldPropertiesDto_allOf:
      properties:
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        uniqueFields:
          description: The fields that must be unique.
          items:
            type: string
          nullable: true
          type: array
      type: object
      example: null
    AssetsFieldPropertiesDto_allOf:
      properties:
        previewMode:
          $ref: '#/components/schemas/AssetPreviewMode'
        defaultValues:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        defaultValue:
          description: The default value as a list of asset ids.
          items:
            type: string
          nullable: true
          type: array
        folderId:
          description: The initial id to the folder.
          nullable: true
          type: string
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        minSize:
          description: The minimum file size in bytes.
          format: int32
          nullable: true
          type: integer
        maxSize:
          description: The maximum file size in bytes.
          format: int32
          nullable: true
          type: integer
        minWidth:
          description: The minimum image width in pixels.
          format: int32
          nullable: true
          type: integer
        maxWidth:
          description: The maximum image width in pixels.
          format: int32
          nullable: true
          type: integer
        minHeight:
          description: The minimum image height in pixels.
          format: int32
          nullable: true
          type: integer
        maxHeight:
          description: The maximum image height in pixels.
          format: int32
          nullable: true
          type: integer
        aspectWidth:
          description: The image aspect width in pixels.
          format: int32
          nullable: true
          type: integer
        aspectHeight:
          description: The image aspect height in pixels.
          format: int32
          nullable: true
          type: integer
        expectedType:
          $ref: '#/components/schemas/AssetType'
        resolveFirst:
          description: True to resolve first asset in the content list.
          type: boolean
        mustBeImage:
          deprecated: true
          description: True to resolve first image in the content list.
          type: boolean
          x-deprecatedMessage: Use 'expectedType' field now
        resolveImage:
          deprecated: true
          description: True to resolve first image in the content list.
          type: boolean
          x-deprecatedMessage: Use 'resolveFirst' field now
        allowedExtensions:
          description: The allowed file extensions.
          items:
            type: string
          nullable: true
          type: array
        allowDuplicates:
          description: "True, if duplicate values are allowed."
          type: boolean
      type: object
      example: null
    BooleanFieldPropertiesDto_allOf:
      properties:
        defaultValues:
          additionalProperties:
            nullable: true
            type: boolean
          type: object
        defaultValue:
          description: The default value for the field value.
          nullable: true
          type: boolean
        inlineEditable:
          description: Indicates that the inline editor is enabled for this field.
          type: boolean
        editor:
          $ref: '#/components/schemas/BooleanFieldEditor'
      type: object
      example: null
    ComponentFieldPropertiesDto_allOf:
      properties:
        schemaIds:
          description: The id of the embedded schemas.
          items:
            type: string
          nullable: true
          type: array
      type: object
      example: null
    ComponentsFieldPropertiesDto_allOf:
      properties:
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        schemaIds:
          description: The id of the embedded schemas.
          items:
            type: string
          nullable: true
          type: array
        uniqueFields:
          description: The fields that must be unique.
          items:
            type: string
          nullable: true
          type: array
      type: object
      example: null
    DateTimeFieldPropertiesDto_allOf:
      properties:
        defaultValues:
          additionalProperties:
            format: date-time
            nullable: true
            type: string
          type: object
        defaultValue:
          description: The default value for the field value.
          format: date-time
          nullable: true
          type: string
        maxValue:
          description: The maximum allowed value for the field value.
          format: date-time
          nullable: true
          type: string
        minValue:
          description: The minimum allowed value for the field value.
          format: date-time
          nullable: true
          type: string
        format:
          description: The format pattern when displayed in the UI.
          nullable: true
          type: string
        editor:
          $ref: '#/components/schemas/DateTimeFieldEditor'
        calculatedDefaultValue:
          $ref: '#/components/schemas/DateTimeCalculatedDefaultValue'
      type: object
      example: null
    GeolocationFieldPropertiesDto_allOf:
      properties:
        editor:
          $ref: '#/components/schemas/GeolocationFieldEditor'
      type: object
      example: null
    NumberFieldPropertiesDto_allOf:
      properties:
        defaultValues:
          additionalProperties:
            format: double
            nullable: true
            type: number
          type: object
        defaultValue:
          description: The default value for the field value.
          format: double
          nullable: true
          type: number
        maxValue:
          description: The maximum allowed value for the field value.
          format: double
          nullable: true
          type: number
        minValue:
          description: The minimum allowed value for the field value.
          format: double
          nullable: true
          type: number
        allowedValues:
          description: The allowed values for the field value.
          items:
            format: double
            type: number
          nullable: true
          type: array
        isUnique:
          description: Indicates if the field value must be unique. Ignored for nested
            fields and localized fields.
          type: boolean
        inlineEditable:
          description: Indicates that the inline editor is enabled for this field.
          type: boolean
        editor:
          $ref: '#/components/schemas/NumberFieldEditor'
      type: object
      example: null
    ReferencesFieldPropertiesDto_allOf:
      properties:
        defaultValues:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        defaultValue:
          description: The default value as a list of content ids.
          items:
            type: string
          nullable: true
          type: array
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        allowDuplicates:
          description: "True, if duplicate values are allowed."
          type: boolean
        resolveReference:
          description: True to resolve references in the content list.
          type: boolean
        mustBePublished:
          description: True when all references must be published.
          type: boolean
        editor:
          $ref: '#/components/schemas/ReferencesFieldEditor'
        schemaIds:
          description: The id of the referenced schemas.
          items:
            type: string
          nullable: true
          type: array
      type: object
      example: null
    StringFieldPropertiesDto_allOf:
      properties:
        defaultValues:
          additionalProperties:
            type: string
          type: object
        defaultValue:
          description: The default value for the field value.
          nullable: true
          type: string
        pattern:
          description: The pattern to enforce a specific format for the field value.
          nullable: true
          type: string
        patternMessage:
          description: The validation message for the pattern.
          nullable: true
          type: string
        folderId:
          description: The initial id to the folder when the control supports file
            uploads.
          nullable: true
          type: string
        minLength:
          description: The minimum allowed length for the field value.
          format: int32
          nullable: true
          type: integer
        maxLength:
          description: The maximum allowed length for the field value.
          format: int32
          nullable: true
          type: integer
        minCharacters:
          description: The minimum allowed of normal characters for the field value.
          format: int32
          nullable: true
          type: integer
        maxCharacters:
          description: The maximum allowed of normal characters for the field value.
          format: int32
          nullable: true
          type: integer
        minWords:
          description: The minimum allowed number of words for the field value.
          format: int32
          nullable: true
          type: integer
        maxWords:
          description: The maximum allowed number of words for the field value.
          format: int32
          nullable: true
          type: integer
        allowedValues:
          description: The allowed values for the field value.
          items:
            type: string
          nullable: true
          type: array
        schemaIds:
          description: The allowed schema ids that can be embedded.
          items:
            type: string
          nullable: true
          type: array
        isUnique:
          description: Indicates if the field value must be unique. Ignored for nested
            fields and localized fields.
          type: boolean
        isEmbeddable:
          description: Indicates that other content items or references are embedded.
          type: boolean
        inlineEditable:
          description: Indicates that the inline editor is enabled for this field.
          type: boolean
        createEnum:
          description: Indicates whether GraphQL Enum should be created.
          type: boolean
        contentType:
          $ref: '#/components/schemas/StringContentType'
        editor:
          $ref: '#/components/schemas/StringFieldEditor'
      type: object
      example: null
    TagsFieldPropertiesDto_allOf:
      properties:
        defaultValues:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        defaultValue:
          description: The default value.
          items:
            type: string
          nullable: true
          type: array
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        allowedValues:
          description: The allowed values for the field value.
          items:
            type: string
          nullable: true
          type: array
        createEnum:
          description: Indicates whether GraphQL Enum should be created.
          type: boolean
        editor:
          $ref: '#/components/schemas/TagsFieldEditor'
      type: object
      example: null
    UIFieldPropertiesDto_allOf:
      properties:
        editor:
          $ref: '#/components/schemas/UIFieldEditor'
      type: object
      example: null
    NestedFieldDto_allOf:
      properties:
        fieldId:
          description: The id of the field.
          format: int64
          type: integer
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          type: string
        isHidden:
          description: Defines if the field is hidden.
          type: boolean
        isLocked:
          description: Defines if the field is locked.
          type: boolean
        isDisabled:
          description: Defines if the field is disabled.
          type: boolean
        properties:
          $ref: '#/components/schemas/FieldPropertiesDto'
      required:
      - name
      - properties
      type: object
      example: null
    TemplatesDto_allOf:
      properties:
        items:
          description: The event consumers.
          items:
            $ref: '#/components/schemas/TemplateDto'
          type: array
      type: object
      example: null
    TemplateDto_allOf:
      properties:
        name:
          description: The name of the template.
          minLength: 1
          type: string
        title:
          description: The title of the template.
          minLength: 1
          type: string
        description:
          description: The description of the template.
          minLength: 1
          type: string
        isStarter:
          description: "True, if the template is a starter."
          type: boolean
      required:
      - description
      - name
      - title
      type: object
      example: null
    TemplateDetailsDto_allOf:
      properties:
        details:
          description: The details of the template.
          minLength: 1
          type: string
      required:
      - details
      type: object
      example: null
    SearchResultDto_allOf:
      properties:
        name:
          description: The name of the search result.
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/SearchResultType'
        label:
          description: An optional label.
          nullable: true
          type: string
      required:
      - name
      - type
      type: object
      example: null
    SchemaDto_allOf:
      properties:
        id:
          description: The id of the schema.
          type: string
        createdBy:
          description: The user that has created the schema.
          minLength: 1
          type: string
        lastModifiedBy:
          description: The user that has updated the schema.
          minLength: 1
          type: string
        name:
          description: The name of the schema. Unique within the app.
          minLength: 1
          pattern: "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          type: string
        type:
          $ref: '#/components/schemas/SchemaType'
        category:
          description: The name of the category.
          nullable: true
          type: string
        properties:
          $ref: '#/components/schemas/SchemaPropertiesDto'
        isSingleton:
          deprecated: true
          description: Indicates if the schema is a singleton.
          type: boolean
          x-deprecatedMessage: Use 'type' field now.
        isPublished:
          description: Indicates if the schema is published.
          type: boolean
        created:
          description: The date and time when the schema has been created.
          format: date-time
          type: string
        lastModified:
          description: The date and time when the schema has been modified last.
          format: date-time
          type: string
        version:
          description: The version of the schema.
          format: int64
          type: integer
        scripts:
          $ref: '#/components/schemas/SchemaScriptsDto'
        previewUrls:
          additionalProperties:
            type: string
          description: The preview Urls.
          type: object
        fieldsInLists:
          items:
            type: string
          type: array
        fieldsInReferences:
          items:
            type: string
          type: array
        fieldRules:
          description: The field rules.
          items:
            $ref: '#/components/schemas/FieldRuleDto'
          type: array
        fields:
          description: The list of fields.
          items:
            $ref: '#/components/schemas/FieldDto'
          type: array
      required:
      - createdBy
      - fields
      - fieldsInLists
      - fieldsInReferences
      - lastModifiedBy
      - name
      - previewUrls
      - properties
      - scripts
      type: object
      example: null
    SchemasDto_allOf:
      properties:
        items:
          description: The schemas.
          items:
            $ref: '#/components/schemas/SchemaDto'
          type: array
      type: object
      example: null
    CreateSchemaDto_allOf:
      properties:
        name:
          description: The name of the schema.
          minLength: 1
          pattern: "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          type: string
        type:
          $ref: '#/components/schemas/SchemaType'
        isSingleton:
          deprecated: true
          description: Set to true to allow a single content item only.
          type: boolean
          x-deprecatedMessage: Use 'type' field now.
      required:
      - name
      type: object
      example: null
    SynchronizeSchemaDto_allOf:
      properties:
        noFieldDeletion:
          description: "True, when fields should not be deleted."
          type: boolean
        noFieldRecreation:
          description: "True, when fields with different types should not be recreated."
          type: boolean
      type: object
      example: null
    RulesDto_allOf:
      properties:
        items:
          description: The rules.
          items:
            $ref: '#/components/schemas/RuleDto'
          type: array
        runningRuleId:
          description: The id of the rule that is currently rerunning.
          nullable: true
          type: string
      required:
      - items
      type: object
      example: null
    RuleDto_allOf:
      properties:
        id:
          description: The id of the rule.
          type: string
        createdBy:
          description: The user that has created the rule.
          minLength: 1
          type: string
        lastModifiedBy:
          description: The user that has updated the rule.
          minLength: 1
          type: string
        created:
          description: The date and time when the rule has been created.
          format: date-time
          type: string
        lastModified:
          description: The date and time when the rule has been modified last.
          format: date-time
          type: string
        version:
          description: The version of the rule.
          format: int64
          type: integer
        isEnabled:
          description: Determines if the rule is enabled.
          type: boolean
        name:
          description: Optional rule name.
          nullable: true
          type: string
        trigger:
          $ref: '#/components/schemas/RuleTriggerDto'
        action:
          $ref: '#/components/schemas/RuleAction'
        numSucceeded:
          description: The number of completed executions.
          format: int32
          type: integer
        numFailed:
          description: The number of failed executions.
          format: int32
          type: integer
        lastExecuted:
          description: The date and time when the rule was executed the last time.
          format: date-time
          nullable: true
          type: string
      required:
      - action
      - createdBy
      - lastModifiedBy
      - trigger
      type: object
      example: null
    AssetChangedRuleTriggerDto_allOf:
      properties:
        condition:
          description: Javascript condition when to trigger.
          nullable: true
          type: string
      type: object
      example: null
    ContentChangedRuleTriggerDto_allOf:
      properties:
        schemas:
          description: The schema settings.
          items:
            $ref: '#/components/schemas/ContentChangedRuleTriggerSchemaDto'
          nullable: true
          type: array
        handleAll:
          description: Determines whether the trigger should handle all content changes
            events.
          type: boolean
      type: object
      example: null
    UsageRuleTriggerDto_allOf:
      properties:
        limit:
          description: The number of monthly api calls.
          format: int32
          type: integer
        numDays:
          description: The number of days to check or null for the current month.
          format: int32
          maximum: 30.0
          minimum: 1.0
          nullable: true
          type: integer
      type: object
      example: null
    SimulatedRuleEventsDto_allOf:
      properties:
        items:
          description: The simulated rule events.
          items:
            $ref: '#/components/schemas/SimulatedRuleEventDto'
          type: array
        total:
          description: The total number of simulated rule events.
          format: int64
          type: integer
      required:
      - items
      type: object
      example: null
    RuleEventsDto_allOf:
      properties:
        items:
          description: The rule events.
          items:
            $ref: '#/components/schemas/RuleEventDto'
          type: array
        total:
          description: The total number of rule events.
          format: int64
          type: integer
      required:
      - items
      type: object
      example: null
    RuleEventDto_allOf:
      properties:
        id:
          description: The id of the event.
          type: string
        created:
          description: The time when the event has been created.
          format: date-time
          type: string
        description:
          description: The description.
          minLength: 1
          type: string
        eventName:
          description: The name of the event.
          minLength: 1
          type: string
        lastDump:
          description: The last dump.
          nullable: true
          type: string
        numCalls:
          description: The number of calls.
          format: int32
          type: integer
        nextAttempt:
          description: The next attempt.
          format: date-time
          nullable: true
          type: string
        result:
          $ref: '#/components/schemas/RuleResult'
        jobResult:
          $ref: '#/components/schemas/RuleJobResult'
      required:
      - description
      - eventName
      type: object
      example: null
    BackupJobsDto_allOf:
      properties:
        items:
          description: The backups.
          items:
            $ref: '#/components/schemas/BackupJobDto'
          type: array
      required:
      - items
      type: object
      example: null
    BackupJobDto_allOf:
      properties:
        id:
          description: The id of the backup job.
          type: string
        started:
          description: The time when the job has been started.
          format: date-time
          type: string
        stopped:
          description: The time when the job has been stopped.
          format: date-time
          nullable: true
          type: string
        handledEvents:
          description: The number of handled events.
          format: int32
          type: integer
        handledAssets:
          description: The number of handled assets.
          format: int32
          type: integer
        status:
          $ref: '#/components/schemas/JobStatus'
      type: object
      example: null
    AssetFoldersDto_allOf:
      properties:
        total:
          description: The total number of assets.
          format: int64
          type: integer
        items:
          description: The assets folders.
          items:
            $ref: '#/components/schemas/AssetFolderDto'
          type: array
        path:
          description: The path to the current folder.
          items:
            $ref: '#/components/schemas/AssetFolderDto'
          type: array
      required:
      - items
      - path
      type: object
      example: null
    AssetFolderDto_allOf:
      properties:
        id:
          description: The id of the asset.
          type: string
        parentId:
          description: The id of the parent folder. Empty for files without parent.
          type: string
        folderName:
          description: The folder name.
          minLength: 1
          type: string
        version:
          description: The version of the asset folder.
          format: int64
          type: integer
      required:
      - folderName
      type: object
      example: null
    AssetsDto_allOf:
      properties:
        total:
          description: The total number of assets.
          format: int64
          type: integer
        items:
          description: The assets.
          items:
            $ref: '#/components/schemas/AssetDto'
          type: array
      required:
      - items
      type: object
      example: null
    AssetDto_allOf:
      properties:
        id:
          description: The id of the asset.
          type: string
        parentId:
          description: The id of the parent folder. Empty for files without parent.
          type: string
        fileName:
          description: The file name.
          minLength: 1
          type: string
        fileHash:
          description: The file hash.
          nullable: true
          type: string
        isProtected:
          description: "True, when the asset is not public."
          type: boolean
        slug:
          description: The slug.
          minLength: 1
          type: string
        mimeType:
          description: The mime type.
          minLength: 1
          type: string
        fileType:
          description: The file type.
          minLength: 1
          type: string
        metadataText:
          description: The formatted text representation of the metadata.
          minLength: 1
          type: string
        editToken:
          description: The UI token.
          nullable: true
          type: string
        metadata:
          additionalProperties:
            description: Any
          description: The asset metadata.
          type: object
        tags:
          description: The asset tags.
          items:
            type: string
          type: array
        fileSize:
          description: The size of the file in bytes.
          format: int64
          type: integer
        fileVersion:
          description: The version of the file.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/AssetType'
        createdBy:
          description: The user that has created the schema.
          minLength: 1
          type: string
        lastModifiedBy:
          description: The user that has updated the asset.
          minLength: 1
          type: string
        created:
          description: The date and time when the asset has been created.
          format: date-time
          type: string
        lastModified:
          description: The date and time when the asset has been modified last.
          format: date-time
          type: string
        version:
          description: The version of the asset.
          format: int64
          type: integer
        _meta:
          $ref: '#/components/schemas/AssetMeta'
        isImage:
          deprecated: true
          description: Determines of the created file is an image.
          type: boolean
          x-deprecatedMessage: Use 'type' field now.
        pixelWidth:
          deprecated: true
          description: The width of the image in pixels if the asset is an image.
          format: int32
          nullable: true
          type: integer
          x-deprecatedMessage: Use 'metdata' field now.
        pixelHeight:
          deprecated: true
          description: The height of the image in pixels if the asset is an image.
          format: int32
          nullable: true
          type: integer
          x-deprecatedMessage: Use 'metdata' field now.
      required:
      - createdBy
      - fileName
      - fileType
      - lastModifiedBy
      - metadata
      - metadataText
      - mimeType
      - slug
      - tags
      type: object
      example: null
    AssetScriptsDto_allOf:
      properties:
        create:
          description: The script that is executed when creating an asset.
          nullable: true
          type: string
        update:
          description: The script that is executed when updating a content.
          nullable: true
          type: string
        annotate:
          description: The script that is executed when annotating a content.
          nullable: true
          type: string
        move:
          description: The script that is executed when moving a content.
          nullable: true
          type: string
        delete:
          description: The script that is executed when deleting a content.
          nullable: true
          type: string
        version:
          description: The version of the app.
          format: int64
          type: integer
      type: object
      example: null
    ClientsDto_allOf:
      properties:
        items:
          description: The clients.
          items:
            $ref: '#/components/schemas/ClientDto'
          type: array
      required:
      - items
      type: object
      example: null
    ClientDto_allOf:
      properties:
        id:
          description: The client id.
          minLength: 1
          type: string
        secret:
          description: The client secret.
          minLength: 1
          type: string
        name:
          description: The client name.
          minLength: 1
          type: string
        role:
          description: The role of the client.
          nullable: true
          type: string
        apiCallsLimit:
          description: The number of allowed api calls per month for this client.
          format: int64
          type: integer
        apiTrafficLimit:
          description: The number of allowed api traffic bytes per month for this
            client.
          format: int64
          type: integer
        allowAnonymous:
          description: True to allow anonymous access without an access token for
            this client.
          type: boolean
      required:
      - id
      - name
      - secret
      type: object
      example: null
    ContributorsDto_allOf:
      properties:
        items:
          description: The contributors.
          items:
            $ref: '#/components/schemas/ContributorDto'
          type: array
        maxContributors:
          description: The maximum number of allowed contributors.
          format: int32
          type: integer
        _meta:
          $ref: '#/components/schemas/ContributorsMetadata'
      required:
      - items
      type: object
      example: null
    ContributorDto_allOf:
      properties:
        contributorId:
          description: The id of the user that contributes to the app.
          minLength: 1
          type: string
        contributorName:
          description: The display name.
          minLength: 1
          type: string
        contributorEmail:
          description: The email address.
          minLength: 1
          type: string
        role:
          description: The role of the contributor.
          nullable: true
          type: string
      required:
      - contributorEmail
      - contributorId
      - contributorName
      type: object
      example: null
    AppLanguagesDto_allOf:
      properties:
        items:
          description: The languages.
          items:
            $ref: '#/components/schemas/AppLanguageDto'
          type: array
      required:
      - items
      type: object
      example: null
    AppLanguageDto_allOf:
      properties:
        iso2Code:
          description: The iso code of the language.
          minLength: 1
          type: string
        englishName:
          description: The english name of the language.
          minLength: 1
          type: string
        fallback:
          description: The fallback languages.
          items:
            type: string
          type: array
        isMaster:
          description: Indicates if the language is the master language.
          type: boolean
        isOptional:
          description: Indicates if the language is optional.
          type: boolean
      required:
      - englishName
      - fallback
      - iso2Code
      type: object
      example: null
    RolesDto_allOf:
      properties:
        items:
          description: The roles.
          items:
            $ref: '#/components/schemas/RoleDto'
          type: array
      required:
      - items
      type: object
      example: null
    RoleDto_allOf:
      properties:
        name:
          description: The role name.
          minLength: 1
          type: string
        numClients:
          description: The number of clients with this role.
          format: int32
          type: integer
        numContributors:
          description: The number of contributors with this role.
          format: int32
          type: integer
        isDefaultRole:
          description: Indicates if the role is an builtin default role.
          type: boolean
        permissions:
          description: Associated list of permissions.
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            description: Any
          description: Associated list of UI properties.
          type: object
      required:
      - name
      - permissions
      - properties
      type: object
      example: null
    AppDto_allOf:
      properties:
        name:
          description: The name of the app.
          minLength: 1
          pattern: "^[a-z0-9]+(\\-[a-z0-9]+)*$"
          type: string
        label:
          description: The optional label of the app.
          nullable: true
          type: string
        description:
          description: The optional description of the app.
          nullable: true
          type: string
        version:
          description: The version of the app.
          format: int64
          type: integer
        id:
          description: The id of the app.
          type: string
        created:
          description: The timestamp when the app has been created.
          format: date-time
          type: string
        lastModified:
          description: The timestamp when the app has been modified last.
          format: date-time
          type: string
        permissions:
          description: The permission level of the user.
          items:
            type: string
          type: array
        canAccessApi:
          deprecated: true
          description: Indicates if the user can access the api.
          type: boolean
          x-deprecatedMessage: Use 'roleProperties' field now.
        canAccessContent:
          description: Indicates if the user can access at least one content.
          type: boolean
        roleName:
          description: The role name of the user.
          nullable: true
          type: string
        roleProperties:
          description: The properties from the role.
      required:
      - name
      - roleProperties
      type: object
      example: null
    AppSettingsDto_allOf:
      properties:
        patterns:
          description: The configured app patterns.
          items:
            $ref: '#/components/schemas/PatternDto'
          type: array
        editors:
          description: The configured UI editors.
          items:
            $ref: '#/components/schemas/EditorDto'
          type: array
        hideScheduler:
          description: Hide the scheduler for content items.
          type: boolean
        hideDateTimeModeButton:
          description: Hide the datetime mode button.
          type: boolean
        version:
          description: The version of the app.
          format: int64
          type: integer
      required:
      - editors
      - patterns
      type: object
      example: null
    WorkflowsDto_allOf:
      properties:
        items:
          description: The workflow.
          items:
            $ref: '#/components/schemas/WorkflowDto'
          type: array
        errors:
          description: The errros that should be fixed.
          items:
            type: string
          type: array
      required:
      - errors
      - items
      type: object
      example: null
    WorkflowDto_allOf:
      properties:
        id:
          description: The workflow id.
          type: string
        name:
          description: The name of the workflow.
          nullable: true
          type: string
        steps:
          additionalProperties:
            $ref: '#/components/schemas/WorkflowStepDto'
          description: The workflow steps.
          type: object
        schemaIds:
          description: The schema ids.
          items:
            type: string
          nullable: true
          type: array
        initial:
          description: The initial step.
          type: string
      required:
      - steps
      type: object
      example: null
    WebhookRuleActionDto_allOf:
      properties:
        url:
          description: The url to the webhook.
          format: uri
          minLength: 1
          title: Url
          type: string
        method:
          $ref: '#/components/schemas/WebhookMethod'
        payload:
          description: Leave it empty to use the full event as body.
          nullable: true
          title: Payload (Optional)
          type: string
        payloadType:
          description: The mime type of the payload.
          nullable: true
          title: Payload Type
          type: string
        headers:
          description: "The message headers in the format '[Key]=[Value]', one entry\
            \ per line."
          nullable: true
          title: Headers (Optional)
          type: string
        sharedSecret:
          description: The shared secret that is used to calculate the payload signature.
          nullable: true
          title: Shared Secret
          type: string
      required:
      - method
      - url
      type: object
      example: null
    TweetRuleActionDto_allOf:
      properties:
        accessToken:
          description: ' The generated access token.'
          minLength: 1
          title: Access Token
          type: string
        accessSecret:
          description: ' The generated access secret.'
          minLength: 1
          title: Access Secret
          type: string
        text:
          description: The text that is sent as tweet to twitter.
          minLength: 1
          title: Text
          type: string
      required:
      - accessSecret
      - accessToken
      - text
      type: object
      example: null
    SlackRuleActionDto_allOf:
      properties:
        webhookUrl:
          description: The slack webhook url.
          format: uri
          minLength: 1
          title: Webhook Url
          type: string
        text:
          description: The text that is sent as message to slack.
          minLength: 1
          title: Text
          type: string
      required:
      - text
      - webhookUrl
      type: object
      example: null
    SignalRRuleActionDto_allOf:
      properties:
        connectionString:
          description: The connection string to the Azure SignalR.
          minLength: 1
          title: Connection
          type: string
        hubName:
          description: The name of the hub.
          minLength: 1
          title: Hub Name
          type: string
        action:
          $ref: '#/components/schemas/ActionTypeEnum'
        methodName:
          description: Set the Name of the hub method received by the customer.
          nullable: true
          title: Methode Name
          type: string
        target:
          description: Define target users or groups by id or name. One item per line.
            Not needed for Broadcast action.
          nullable: true
          title: Target (Optional)
          type: string
        payload:
          description: Leave it empty to use the full event as body.
          nullable: true
          title: Payload (Optional)
          type: string
      required:
      - action
      - connectionString
      - hubName
      type: object
      example: null
    ScriptRuleActionDto_allOf:
      properties:
        script:
          description: The script to render.
          minLength: 1
          title: Script
          type: string
      required:
      - script
      type: object
      example: null
    PrerenderRuleActionDto_allOf:
      properties:
        token:
          description: The prerender token from your account.
          minLength: 1
          title: Token
          type: string
        url:
          description: The url to recache.
          minLength: 1
          title: Url
          type: string
      required:
      - token
      - url
      type: object
      example: null
    NotificationRuleActionDto_allOf:
      properties:
        user:
          description: The user id or email.
          minLength: 1
          title: User
          type: string
        text:
          description: The text to send.
          minLength: 1
          title: Title
          type: string
        url:
          description: The optional url to attach to the notification.
          nullable: true
          title: Url
          type: string
        client:
          description: An optional client name.
          nullable: true
          title: Client
          type: string
      required:
      - text
      - user
      type: object
      example: null
    MediumRuleActionDto_allOf:
      properties:
        accessToken:
          description: The self issued access token.
          minLength: 1
          title: Access Token
          type: string
        title:
          description: "The title, used for the url."
          minLength: 1
          title: Title
          type: string
        content:
          description: "The content, either html or markdown."
          minLength: 1
          title: Content
          type: string
        canonicalUrl:
          description: "The original home of this content, if it was originally published\
            \ elsewhere."
          nullable: true
          title: Canonical Url
          type: string
        tags:
          description: The optional comma separated list of tags.
          nullable: true
          title: Tags
          type: string
        publicationId:
          description: Optional publication id.
          nullable: true
          title: Publication Id
          type: string
        isHtml:
          description: Indicates whether the content is markdown or html.
          title: Is Html
          type: boolean
      required:
      - accessToken
      - content
      - title
      type: object
      example: null
    FastlyRuleActionDto_allOf:
      properties:
        apiKey:
          description: The API key to grant access to Squidex.
          minLength: 1
          title: Api Key
          type: string
        serviceId:
          description: The ID of the fastly service.
          minLength: 1
          title: Service Id
          type: string
      required:
      - apiKey
      - serviceId
      type: object
      example: null
    EmailRuleActionDto_allOf:
      properties:
        serverHost:
          description: The IP address or host to the SMTP server.
          minLength: 1
          title: Server Host
          type: string
        serverPort:
          description: The port to the SMTP server.
          format: int32
          title: Server Port
          type: integer
        serverUsername:
          description: The username for the SMTP server.
          minLength: 1
          title: Username
          type: string
        serverPassword:
          description: The password for the SMTP server.
          minLength: 1
          title: Password
          type: string
        messageFrom:
          description: The email sending address.
          minLength: 1
          title: From Address
          type: string
        messageTo:
          description: The email message will be sent to.
          minLength: 1
          title: To Address
          type: string
        messageSubject:
          description: The subject line for this email message.
          minLength: 1
          title: Subject
          type: string
        messageBody:
          description: The message body.
          minLength: 1
          title: Body
          type: string
      required:
      - messageBody
      - messageFrom
      - messageSubject
      - messageTo
      - serverHost
      - serverPassword
      - serverPort
      - serverUsername
      type: object
      example: null
    ElasticSearchRuleActionDto_allOf:
      properties:
        host:
          description: The url to the elastic search instance or cluster.
          format: uri
          minLength: 1
          title: Server Url
          type: string
        indexName:
          description: The name of the index.
          minLength: 1
          title: Index Name
          type: string
        username:
          description: The optional username.
          nullable: true
          title: Username
          type: string
        password:
          description: The optional password.
          nullable: true
          title: Password
          type: string
        document:
          description: The optional custom document.
          nullable: true
          title: Document
          type: string
        delete:
          description: The condition when to delete the document.
          nullable: true
          title: Deletion
          type: string
      required:
      - host
      - indexName
      type: object
      example: null
    DiscourseRuleActionDto_allOf:
      properties:
        url:
          description: The url to the discourse server.
          format: uri
          minLength: 1
          title: Server Url
          type: string
        apiKey:
          description: The api key to authenticate to your discourse server.
          minLength: 1
          title: Api Key
          type: string
        apiUsername:
          description: The api username to authenticate to your discourse server.
          minLength: 1
          title: Api User
          type: string
        text:
          description: The text as markdown.
          minLength: 1
          title: Text
          type: string
        title:
          description: The optional title when creating new topics.
          nullable: true
          title: Title
          type: string
        topic:
          description: The optional topic id.
          format: int32
          nullable: true
          title: Topic
          type: integer
        category:
          description: The optional category id.
          format: int32
          nullable: true
          title: Category
          type: integer
      required:
      - apiKey
      - apiUsername
      - text
      - url
      type: object
      example: null
    CreateContentRuleActionDto_allOf:
      properties:
        data:
          description: The content data.
          minLength: 1
          title: Data
          type: string
        schema:
          description: The name of the schema.
          minLength: 1
          title: Schema
          type: string
        client:
          description: An optional client name.
          nullable: true
          title: Client
          type: string
        publish:
          description: Publish the content.
          title: Publish
          type: boolean
      required:
      - data
      - schema
      type: object
      example: null
    CommentRuleActionDto_allOf:
      properties:
        text:
          description: The comment text.
          minLength: 1
          title: Text
          type: string
        client:
          description: An optional client name.
          nullable: true
          title: Client
          type: string
      required:
      - text
      type: object
      example: null
    AzureQueueRuleActionDto_allOf:
      properties:
        connectionString:
          description: The connection string to the storage account.
          minLength: 1
          title: Connection
          type: string
        queue:
          description: The name of the queue.
          minLength: 1
          title: Queue
          type: string
        payload:
          description: Leave it empty to use the full event as body.
          nullable: true
          title: Payload (Optional)
          type: string
      required:
      - connectionString
      - queue
      type: object
      example: null
    AlgoliaRuleActionDto_allOf:
      properties:
        appId:
          description: The application ID.
          minLength: 1
          title: Application Id
          type: string
        apiKey:
          description: The API key to grant access to Squidex.
          minLength: 1
          title: Api Key
          type: string
        indexName:
          description: The name of the index.
          minLength: 1
          title: Index Name
          type: string
        document:
          description: The optional custom document.
          nullable: true
          title: Document
          type: string
        delete:
          description: The condition when to delete the entry.
          nullable: true
          title: Deletion
          type: string
      required:
      - apiKey
      - appId
      - indexName
      type: object
      example: null
  securitySchemes:
    squidex-oauth-auth:
      description: "Squidex uses oauth2 client authentication. Read more about it\
        \ at: https://oauth.net/2/ and https://tools.ietf.org/html/rfc6750.\n\nTo\
        \ retrieve an access token, the client id must make a request to the token\
        \ url. For example:\n\n    $ curl\n        -X POST 'http://squidex.localhost:8081/identity-server/connect/token'\
        \ \n        -H 'Content-Type: application/x-www-form-urlencoded' \n      \
        \  -d 'grant_type=client_credentials&\n            client_id=[CLIENT_ID]&\n\
        \            client_secret=[CLIENT_SECRET]&\n\t\t\tscope=squidex-api'\n\n\
        You must send this token in the `Authorization` header when making requests\
        \ to the API:\n\n     Authorization: Bearer <token>"
      flows:
        clientCredentials:
          scopes:
            squidex-api: Read and write access to the API
          tokenUrl: http://squidex.localhost:8081/identity-server/connect/token
      type: oauth2
x-generator: NSwag v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))
