openapi: 3.0.0
info:
  title: Squidex API
  version: 4.1.3.0
  x-logo:
    url: https://squidex-embracecloudte.features.embracecloud.io/images/logo-white.png
    backgroundColor: '#3f83df'
externalDocs:
  url: https://docs.squidex.io
servers:
- url: https://squidex-embracecloudte.features.embracecloud.io/api
security:
- squidex-oauth-auth: []
paths:
  /:
    get:
      operationId: Users_GetUserResources
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesDto'
          description: User resources returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get the user resources.
      tags:
      - Users
  /users:
    get:
      description: Search the user by query that contains the email address or the
        part of the email address.
      operationId: Users_GetUsers
      parameters:
      - description: The query to search the user by email address. Case invariant.
        explode: true
        in: query
        name: query
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserDto'
                type: array
          description: Users returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get users by query.
      tags:
      - Users
  /users/{id}:
    get:
      operationId: Users_GetUser
      parameters:
      - description: The id of the user (GUID).
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: User found.
        "404":
          description: User not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get user by id.
      tags:
      - Users
  /users/{id}/picture:
    get:
      operationId: Users_GetUserPicture
      parameters:
      - description: The id of the user (GUID).
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: User found and image or fallback returned.
        "404":
          description: User not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      summary: Get user picture by id.
      tags:
      - Users
  /apps/{app}/translations:
    post:
      operationId: Translations_GetLanguages
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslateDto'
        description: The translation request.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationDto'
          description: Text translated.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Translate a text.
      tags:
      - Translations
  /apps/{app}/usages/log:
    get:
      operationId: Usages_GetLog
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogDownloadDto'
          description: Usage tracking results returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get api calls as log file.
      tags:
      - Statistics
  /apps/{app}/usages/calls/month:
    get:
      operationId: Usages_GetMonthlyCalls
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentCallsDto'
          description: Usage tracking results returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get api calls for this month.
      tags:
      - Statistics
  /apps/{app}/usages/calls/{fromDate}/{toDate}:
    get:
      operationId: Usages_GetUsages
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The from date.
        explode: false
        in: path
        name: fromDate
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The to date.
        explode: false
        in: path
        name: toDate
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: '#/components/schemas/CallsUsageDto'
                  type: array
                type: object
          description: API call returned.
        "404":
          description: App not found.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Range between from date and to date is not valid or has more
            than 100 days.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get api calls in date range.
      tags:
      - Statistics
  /apps/{app}/usages/storage/today:
    get:
      operationId: Usages_GetCurrentStorageSize
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentStorageDto'
          description: Storage usage returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get total asset size.
      tags:
      - Statistics
  /apps/{app}/usages/storage/{fromDate}/{toDate}:
    get:
      operationId: Usages_GetStorageSizes
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The from date.
        explode: false
        in: path
        name: fromDate
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The to date.
        explode: false
        in: path
        name: toDate
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StorageUsageDto'
                type: array
          description: Storage usage returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Range between from date and to date is not valid or has more
            than 100 days.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get asset usage by date.
      tags:
      - Statistics
  /apps/{app}/schemas/{name}/fields:
    post:
      operationId: SchemaFields_PostField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFieldDto'
        description: The field object that needs to be added to the schema.
        required: true
        x-name: request
        x-position: 3
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field properties not valid.
        "404":
          description: Schema or app not found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field name already in use.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Add a schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{parentId}/nested:
    post:
      operationId: SchemaFields_PostNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFieldDto'
        description: The field object that needs to be added to the schema.
        required: true
        x-name: request
        x-position: 4
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field properties not valid.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field name already in use.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Add a nested schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/ui:
    put:
      operationId: SchemaFields_PutSchemaUIFields
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigureUIFieldsDto'
        description: The request that contains the field names.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema UI fields defined.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field contains invalid field names.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Configure UI fields.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/ordering:
    put:
      operationId: SchemaFields_PutSchemaFieldOrdering
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderFieldsDto'
        description: The request that contains the field ids.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema fields reordered.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field ids do not cover the fields of the schema.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Reorders the fields.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{parentId}/nested/ordering:
    put:
      operationId: SchemaFields_PutNestedFieldOrdering
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderFieldsDto'
        description: The request that contains the field ids.
        required: true
        x-name: request
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema fields reordered.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field ids do not cover the fields of the schema.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Reorders the nested fields.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{id}:
    delete:
      operationId: SchemaFields_DeleteField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Field is locked.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Delete a schema field.
      tags:
      - Schemas
    put:
      operationId: SchemaFields_PutField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldDto'
        description: The field object that needs to be added to the schema.
        required: true
        x-name: request
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field properties not valid or field is locked.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Update a schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{parentId}/nested/{id}:
    delete:
      operationId: SchemaFields_DeleteNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Field is locked.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Delete a nested schema field.
      tags:
      - Schemas
    put:
      operationId: SchemaFields_PutNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldDto'
        description: The field object that needs to be added to the schema.
        required: true
        x-name: request
        x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema field properties not valid or field is locked.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Update a nested schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{id}/lock:
    put:
      description: A locked field cannot be updated or deleted.
      operationId: SchemaFields_LockField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to lock.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field shown.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Lock a schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{parentId}/nested/{id}/lock:
    put:
      description: A locked field cannot be edited or deleted.
      operationId: SchemaFields_LockNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to lock.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field hidden.
        "404":
          description: Field, schema, or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Lock a nested schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{id}/hide:
    put:
      description: A hidden field is not part of the API response, but can still be
        edited in the portal.
      operationId: SchemaFields_HideField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to hide.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field hidden.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Hide a schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{parentId}/nested/{id}/hide:
    put:
      description: A hidden field is not part of the API response, but can still be
        edited in the portal.
      operationId: SchemaFields_HideNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to hide.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field hidden.
        "404":
          description: Field, schema, or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Hide a nested schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{id}/show:
    put:
      description: A hidden field is not part of the API response, but can still be
        edited in the portal.
      operationId: SchemaFields_ShowField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to show.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field shown.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Show a schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{parentId}/nested/{id}/show:
    put:
      description: A hidden field is not part of the API response, but can still be
        edited in the portal.
      operationId: SchemaFields_ShowNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to show.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field shown.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Show a nested schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{id}/enable:
    put:
      description: A disabled field cannot not be edited in the squidex portal anymore,
        but will be part of the API response.
      operationId: SchemaFields_EnableField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to enable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field enabled.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Enable a schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{parentId}/nested/{id}/enable:
    put:
      description: A disabled field cannot not be edited in the squidex portal anymore,
        but will be part of the API response.
      operationId: SchemaFields_EnableNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to enable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field enabled.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Enable a nested schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{id}/disable:
    put:
      description: A disabled field cannot not be edited in the squidex portal anymore,
        but will be part of the API response.
      operationId: SchemaFields_DisableField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the field to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field disabled.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Disable a schema field.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/fields/{parentId}/nested/{id}/disable:
    put:
      description: A disabled field cannot not be edited in the squidex portal anymore,
        but will be part of the API response.
      operationId: SchemaFields_DisableNestedField
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The parent field id.
        explode: false
        in: path
        name: parentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 3
      - description: The id of the field to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema field disabled.
        "404":
          description: Schema, field or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Disable nested a schema field.
      tags:
      - Schemas
  /apps/{app}/schemas:
    get:
      operationId: Schemas_GetSchemas
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemasDto'
          description: Schemas returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get schemas.
      tags:
      - Schemas
    post:
      operationId: Schemas_PostSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchemaDto'
        description: The schema object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema name or properties are not valid.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema name already in use.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.create
      summary: Create a new schema.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}:
    delete:
      operationId: Schemas_DeleteSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema to delete.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Schema deleted.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.delete
      summary: Delete a schema.
      tags:
      - Schemas
    get:
      operationId: Schemas_GetSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema to retrieve.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema found.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get a schema by name.
      tags:
      - Schemas
    put:
      operationId: Schemas_PutSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchemaDto'
        description: The schema object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema properties are not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Update a schema.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/sync:
    put:
      operationId: Schemas_PutSchemaSync
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynchronizeSchemaDto'
        description: The schema object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema properties are not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Synchronize a schema.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/category:
    put:
      operationId: Schemas_PutCategory
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeCategoryDto'
        description: The schema object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema updated.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Update a schema category.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/preview-urls:
    put:
      operationId: Schemas_PutPreviewUrls
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurePreviewUrlsDto'
        description: The preview urls for the schema.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema updated.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.update
      summary: Update the preview urls.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/scripts:
    put:
      operationId: Schemas_PutScripts
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaScriptsDto'
        description: The schema scripts object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Schema properties are not valid.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.scripts
      summary: Update the scripts.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/publish:
    put:
      operationId: Schemas_PublishSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema to publish.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema has been published.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.publish
      summary: Publish a schema.
      tags:
      - Schemas
  /apps/{app}/schemas/{name}/unpublish:
    put:
      operationId: Schemas_UnpublishSchema
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the schema to unpublish.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDetailsDto'
          description: Schema has been unpublished.
        "404":
          description: Schema or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.schemas.{name}.publish
      summary: Unpublish a schema.
      tags:
      - Schemas
  /rules/actions:
    get:
      operationId: Rules_GetActions
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/RuleElementDto'
                type: object
          description: Rule actions returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get the supported rule actions.
      tags:
      - Rules
  /apps/{app}/rules:
    get:
      operationId: Rules_GetRules
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesDto'
          description: Rules returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.read
      summary: Get rules.
      tags:
      - Rules
    post:
      operationId: Rules_PostRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleDto'
        description: The rule object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
          description: Rule created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Rule is not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.create
      summary: Create a new rule.
      tags:
      - Rules
  /apps/{app}/rules/{id}:
    delete:
      operationId: Rules_DeleteRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule deleted.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.delete
      summary: Delete a rule.
      tags:
      - Rules
    put:
      description: All events for the specified schemas will be sent to the url. The
        timeout is 2 seconds.
      operationId: Rules_PutRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRuleDto'
        description: The rule object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
          description: Rule updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Rule is not valid.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.update
      summary: Update a rule.
      tags:
      - Rules
  /apps/{app}/rules/{id}/enable:
    put:
      operationId: Rules_EnableRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to enable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
          description: Rule enabled.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.disable
      summary: Enable a rule.
      tags:
      - Rules
  /apps/{app}/rules/{id}/disable:
    put:
      operationId: Rules_DisableRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
          description: Rule disabled.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.disable
      summary: Disable a rule.
      tags:
      - Rules
  /apps/{app}/rules/{id}/trigger:
    put:
      operationId: Rules_TriggerRule
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the rule to disable.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule triggered.
        "404":
          description: Rule or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.events
      summary: Trigger a rule.
      tags:
      - Rules
  /apps/{app}/rules/events:
    get:
      operationId: Rules_GetEvents
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The optional rule id to filter to events.
        explode: true
        in: query
        name: ruleId
        required: false
        schema:
          format: guid
          nullable: true
          type: string
        style: form
        x-position: 2
      - description: The number of events to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
        x-position: 3
      - description: The number of events to take.
        explode: true
        in: query
        name: take
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
        x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleEventsDto'
          description: Rule events returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.read
      summary: Get rule events.
      tags:
      - Rules
  /apps/{app}/rules/events/{id}:
    delete:
      operationId: Rules_DeleteEvent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The event to enqueue.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule deqeued.
        "404":
          description: App or rule event not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.events
      summary: Cancels the event and retries.
      tags:
      - Rules
    put:
      operationId: Rules_PutEvent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The event to enqueue.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Rule enqueued.
        "404":
          description: App or rule event not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.rules.events
      summary: Retry the event immediately.
      tags:
      - Rules
  /apps/{app}/plans:
    get:
      operationId: AppPlans_GetPlans
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppPlansDto'
          description: App plan information returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.plans.read
      summary: Get app plan information.
      tags:
      - Plans
  /apps/{app}/plan:
    put:
      operationId: AppPlans_PutPlan
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePlanDto'
        description: Plan object that needs to be changed.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanChangedDto'
          description: Plan changed or redirect url returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Plan not owned by user.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.plans.change
      summary: Change the app plan.
      tags:
      - Plans
  /info:
    get:
      operationId: Ping_GetInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExposedValues'
          description: Infos returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      summary: Get general info status of the API.
      tags:
      - Ping
  /ping:
    get:
      description: Can be used to test, if the Squidex API is alive and responding.
      operationId: Ping_GetPing
      responses:
        "204":
          description: Service ping successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      summary: Get ping status of the API.
      tags:
      - Ping
  /ping/{app}:
    get:
      description: Can be used to test, if the Squidex API is alive and responding.
      operationId: Ping_GetAppPing
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "204":
          description: Service ping successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get ping status.
      tags:
      - Ping
  /news/features:
    get:
      operationId: News_GetLanguages
      parameters:
      - description: The latest received version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesDto'
          description: Latest features returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get features since version.
      tags:
      - News
  /languages:
    get:
      description: Provide a list of supported language codes, following the ISO2Code
        standard.
      operationId: Languages_GetLanguages
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LanguageDto'
                type: array
          description: Supported language codes returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get supported languages.
      tags:
      - Languages
  /apps/{app}/history:
    get:
      operationId: History_GetHistory
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the channel.
        explode: true
        in: query
        name: channel
        required: false
        schema:
          nullable: true
          type: string
        style: form
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryEventDto'
          description: Events returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get the events from the history.
      tags:
      - History
  /apps/{app}/comments/{commentsId}:
    get:
      description: When passing in a version you can retrieve all updates since then.
      operationId: Comments_GetComments
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comments.
        explode: false
        in: path
        name: commentsId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The current version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          default: -2
          format: int64
          type: integer
        style: form
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsDto'
          description: All comments returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get all comments.
      tags:
      - Comments
    post:
      operationId: Comments_PostComment
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comments.
        explode: false
        in: path
        name: commentsId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCommentDto'
        description: The comment object that needs to created.
        required: true
        x-name: request
        x-position: 3
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
          description: Comment created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Comment is not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Create a new comment.
      tags:
      - Comments
  /apps/{app}/comments/{commentsId}/{commentId}:
    delete:
      operationId: Comments_DeleteComment
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comments.
        explode: false
        in: path
        name: commentsId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the comment.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      responses:
        "204":
          description: Comment deleted.
        "404":
          description: Comment or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Deletes the comment.
      tags:
      - Comments
    put:
      operationId: Comments_PutComment
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comments.
        explode: false
        in: path
        name: commentsId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: The id of the comment.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCommentDto'
        description: The comment object that needs to updated.
        required: true
        x-name: request
        x-position: 4
      responses:
        "204":
          description: Comment updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Comment text not valid.
        "404":
          description: Comment or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Updates the comment.
      tags:
      - Comments
  /users/{userId}/notifications:
    get:
      description: When passing in a version you can retrieve all updates since then.
      operationId: UserNotifications_GetNotifications
      parameters:
      - description: The user id.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The current version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          default: -2
          format: int64
          type: integer
        style: form
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsDto'
          description: All comments returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get all notifications.
      tags:
      - Notifications
  /users/{userId}/notifications/{commentId}:
    delete:
      operationId: UserNotifications_DeleteComment
      parameters:
      - description: The user id.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the comment.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Comment deleted.
        "404":
          description: Comment not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Deletes the notification.
      tags:
      - Notifications
  /apps/{app}/backups/{id}:
    delete:
      operationId: Backups_DeleteBackup
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the backup to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Backup started.
        "404":
          description: Backup or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.backups.delete
      summary: Delete a backup.
      tags:
      - Backups
    get:
      operationId: BackupContent_GetBackupContent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Backup found and content returned.
        "404":
          description: Backup or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      summary: Get the backup content.
      tags:
      - Backups
  /apps/{app}/backups:
    get:
      operationId: Backups_GetBackups
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJobsDto'
          description: Backups returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.backups.read
      summary: Get all backup jobs.
      tags:
      - Backups
    post:
      operationId: Backups_PostBackup
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "204":
          description: Backup started.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.backups.create
      summary: Start a new backup.
      tags:
      - Backups
  /apps/restore:
    get:
      operationId: Restore_GetRestoreJob
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreJobDto'
          description: Status returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.admin.restore
      summary: Get current restore status.
      tags:
      - Backups
    post:
      operationId: Restore_PostRestoreJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreRequestDto'
        description: The backup to restore.
        required: true
        x-name: request
        x-position: 1
      responses:
        "204":
          description: Restore operation started.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.admin.restore
      summary: Restore a backup.
      tags:
      - Backups
  /assets/{app}/{idOrSlug}/{more}:
    get:
      operationId: AssetContent_GetAssetContentBySlug
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id or slug of the asset.
        explode: false
        in: path
        name: idOrSlug
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      - description: Optional suffix that can be used to seo-optimize the link to
          the image Has not effect.
        explode: false
        in: path
        name: more
        required: true
        schema:
          type: string
        style: simple
        x-position: 3
      - description: The optional version of the asset.
        explode: true
        in: query
        name: version
        required: false
        schema:
          format: int64
          type: integer
        style: form
        x-position: 4
      - description: The cache duration in seconds.
        explode: true
        in: query
        name: cache
        required: false
        schema:
          format: int64
          type: integer
        style: form
        x-position: 5
      - description: Set it to 0 to prevent download.
        explode: true
        in: query
        name: download
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-position: 6
      - description: The target width of the asset, if it is an image.
        explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 7
      - description: The target height of the asset, if it is an image.
        explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 8
      - description: Optional image quality, it is is an jpeg image.
        explode: true
        in: query
        name: quality
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
        x-position: 9
      - description: The resize mode when the width and height is defined.
        explode: true
        in: query
        name: mode
        required: false
        schema:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/ResizeMode'
        style: form
        x-position: 10
      - description: Override the y focus point.
        explode: true
        in: query
        name: focusX
        required: false
        schema:
          format: float
          nullable: true
          type: number
        style: form
        x-position: 11
      - description: Override the x focus point.
        explode: true
        in: query
        name: focusY
        required: false
        schema:
          format: float
          nullable: true
          type: number
        style: form
        x-position: 12
      - description: True to ignore the asset focus point if any.
        explode: true
        in: query
        name: nofocus
        required: false
        schema:
          type: boolean
        style: form
        x-position: 13
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Asset found and content or (resized) image returned.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get the asset content.
      tags:
      - Assets
  /apps/{app}/assets/folders:
    get:
      description: Get all asset folders for the app.
      operationId: AssetFolders_GetAssetFolders
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The optional parent folder id.
        explode: true
        in: query
        name: parentId
        required: false
        schema:
          format: guid
          type: string
        style: form
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetsDto'
          description: Asset folders returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.read
      summary: Get asset folders.
      tags:
      - Assets
    post:
      operationId: AssetFolders_PostAssetFolder
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetFolderDto'
        description: The asset folder object that needs to be added to the App.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset folder created.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.update
      summary: Upload a new asset.
      tags:
      - Assets
  /apps/{app}/assets/folders/{id}:
    delete:
      operationId: AssetFolders_DeleteAssetFolder
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset folder to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Asset folder deleted.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.update
      summary: Delete an asset folder.
      tags:
      - Assets
    put:
      operationId: AssetFolders_PutAssetFolder
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset folder.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameAssetFolderDto'
        description: The asset folder object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset folder updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset folder name not valid.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.update
      summary: Updates the asset folder.
      tags:
      - Assets
  /apps/{app}/assets/folders/{id}/parent:
    put:
      operationId: AssetFolders_PutAssetFolderParent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset folder.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveAssetItemDto'
        description: The asset folder object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset folder moved.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.update
      summary: Moves the asset folder.
      tags:
      - Assets
  /apps/{app}/assets/tags:
    get:
      description: Get all tags for assets.
      operationId: Assets_GetTags
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: Assets returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.read
      summary: Get assets tags.
      tags:
      - Assets
  /apps/{app}/assets/{id}:
    delete:
      operationId: Assets_DeleteAsset
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "204":
          description: Asset deleted.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.delete
      summary: Delete an asset.
      tags:
      - Assets
    get:
      operationId: Assets_GetAsset
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset found.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.read
      summary: Get an asset by id.
      tags:
      - Assets
    put:
      operationId: Assets_PutAsset
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotateAssetDto'
        description: The asset object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Asset name not valid.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.update
      summary: Updates the asset.
      tags:
      - Assets
  /apps/{app}/assets/{id}/parent:
    put:
      operationId: Assets_PutAssetParent
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the asset.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveAssetItemDto'
        description: The asset object that needs to updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: Asset moved.
        "404":
          description: Asset or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.assets.update
      summary: Moves the asset.
      tags:
      - Assets
  /apps/{app}/clients:
    get:
      description: Gets all configured clients for the app with the specified name.
      operationId: AppClients_GetClients
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsDto'
          description: Client keys returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.clients.read
      summary: Get app clients.
      tags:
      - Apps
    post:
      description: |-
        Create a new client for the app with the specified name.
        The client secret is auto generated on the server and returned. The client does not exire, the access token is valid for 30 days.
      operationId: AppClients_PostClient
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientDto'
        description: Client object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsDto'
          description: Client generated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Client request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.clients.create
      summary: Create a new app client.
      tags:
      - Apps
  /apps/{app}/clients/{id}:
    delete:
      description: The application that uses this client credentials cannot access
        the API after it has been revoked.
      operationId: AppClients_DeleteClient
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the client that must be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsDto'
          description: Client revoked.
        "404":
          description: Client or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.clients.delete
      summary: Revoke an app client.
      tags:
      - Apps
    put:
      description: Only the display name can be changed, create a new client if necessary.
      operationId: AppClients_PutClient
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the client that must be updated.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientDto'
        description: Client object that needs to be updated.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsDto'
          description: Client updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Client request not valid.
        "404":
          description: Client or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.clients.update
      summary: Updates an app client.
      tags:
      - Apps
  /apps/{app}/contributors:
    get:
      operationId: AppContributors_GetContributors
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsDto'
          description: App contributors returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get app contributors.
      tags:
      - Apps
    post:
      operationId: AppContributors_PostContributor
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignContributorDto'
        description: Contributor object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsDto'
          description: User assigned to app.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: User is not found.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.contributors.assign
      summary: Assign contributor to app.
      tags:
      - Apps
  /apps/{app}/contributors/{id}:
    delete:
      operationId: AppContributors_DeleteContributor
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the contributor.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsDto'
          description: User removed from app.
        "404":
          description: Contributor or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.contributors.revoke
      summary: Remove contributor from app.
      tags:
      - Apps
  /apps/{app}/languages:
    get:
      operationId: AppLanguages_GetLanguages
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLanguagesDto'
          description: Language configuration returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get app languages.
      tags:
      - Apps
    post:
      operationId: AppLanguages_PostLanguage
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddLanguageDto'
        description: The language to add to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLanguagesDto'
          description: Language created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Language request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.languages.create
      summary: Attaches an app language.
      tags:
      - Apps
  /apps/{app}/languages/{language}:
    delete:
      operationId: AppLanguages_DeleteLanguage
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The language to delete from the app.
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLanguagesDto'
          description: Language deleted.
        "404":
          description: Language or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.languages.delete
      summary: Deletes an app language.
      tags:
      - Apps
    put:
      operationId: AppLanguages_PutLanguage
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The language to update.
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLanguageDto'
        description: The language object.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLanguagesDto'
          description: Language updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Language request not valid.
        "404":
          description: Language or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.languages.update
      summary: Updates an app language.
      tags:
      - Apps
  /apps/{app}/patterns:
    get:
      description: Gets all configured regex patterns for the app with the specified
        name.
      operationId: AppPatterns_GetPatterns
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatternsDto'
          description: Patterns returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.common
      summary: Get app patterns.
      tags:
      - Apps
    post:
      operationId: AppPatterns_PostPattern
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePatternDto'
        description: Pattern to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatternsDto'
          description: Pattern generated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Pattern request not valid.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.patterns.create
      summary: Create a new app pattern.
      tags:
      - Apps
  /apps/{app}/patterns/{id}:
    delete:
      description: Schemas using this pattern will still function using the same Regular
        Expression.
      operationId: AppPatterns_DeletePattern
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the pattern to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatternsDto'
          description: Pattern removed.
        "404":
          description: Pattern or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.patterns.delete
      summary: Delete an existing app pattern.
      tags:
      - Apps
    put:
      operationId: AppPatterns_PutPattern
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the pattern to be updated.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePatternDto'
        description: Pattern to be updated for the app.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatternsDto'
          description: Pattern updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Pattern request not valid.
        "404":
          description: Pattern or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.patterns.update
      summary: Update an existing app pattern.
      tags:
      - Apps
  /apps/{app}/roles:
    get:
      operationId: AppRoles_GetRoles
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesDto'
          description: App roles returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.roles.read
      summary: Get app roles.
      tags:
      - Apps
    post:
      operationId: AppRoles_PostRole
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRoleDto'
        description: Role object that needs to be added to the app.
        required: true
        x-name: request
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesDto'
          description: User assigned to app.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Role name already in use.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.roles.create
      summary: Add role to app.
      tags:
      - Apps
  /apps/{app}/roles/permissions:
    get:
      operationId: AppRoles_GetPermissions
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: App permissions returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.roles.read
      summary: Get app permissions.
      tags:
      - Apps
  /apps/{app}/roles/{name}:
    delete:
      operationId: AppRoles_DeleteRole
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesDto'
          description: Role deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Role is in use by contributor or client or default role.
        "404":
          description: Role or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.roles.delete
      summary: Remove role from app.
      tags:
      - Apps
    put:
      operationId: AppRoles_PutRole
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The name of the role to be updated.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleDto'
        description: Role to be updated for the app.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesDto'
          description: Role updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Role request not valid.
        "404":
          description: Role or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.roles.update
      summary: Update an existing app role.
      tags:
      - Apps
  /apps:
    get:
      description: |-
        You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
        You will retrieve all apps, where you are assigned as a contributor.
      operationId: Apps_GetApps
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AppDto'
                type: array
          description: Apps returned.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get your apps.
      tags:
      - Apps
    post:
      description: |-
        You can only create an app when you are authenticated as a user (OpenID implicit flow).
        You will be assigned as owner of the new app automatically.
      operationId: Apps_PostApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppDto'
        description: The app object that needs to be added to Squidex.
        required: true
        x-name: request
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: App created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: App request not valid.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: App name is already in use.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Create a new app.
      tags:
      - Apps
  /apps/{app}:
    delete:
      operationId: Apps_DeleteApp
      parameters:
      - description: The name of the app to archive.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "204":
          description: App archived.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.delete
      summary: Archive the app.
      tags:
      - Apps
    get:
      operationId: Apps_GetApp
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: Apps returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth: []
      summary: Get an app by name.
      tags:
      - Apps
    put:
      operationId: Apps_UpdateApp
      parameters:
      - description: The name of the app to update.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppDto'
        description: The values to update.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: App updated.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.general
      summary: Update the app.
      tags:
      - Apps
  /apps/{app}/workflows:
    get:
      operationId: AppWorkflows_GetWorkflows
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowsDto'
          description: App workflows returned.
        "404":
          description: App not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.workflows.read
      summary: Get app workflow.
      tags:
      - Apps
    post:
      operationId: AppWorkflows_PostWorkflow
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWorkflowDto'
        description: The new workflow.
        required: true
        x-name: request
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowsDto'
          description: Workflow updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Workflow request is not valid.
        "404":
          description: Workflow or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.workflows.update
      summary: Create a workflow.
      tags:
      - Apps
  /apps/{app}/workflows/{id}:
    delete:
      operationId: AppWorkflows_DeleteWorkflow
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the workflow to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowsDto'
          description: Workflow deleted.
        "404":
          description: Workflow or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.workflows.update
      summary: Delete a workflow.
      tags:
      - Apps
    put:
      operationId: AppWorkflows_PutWorkflow
      parameters:
      - description: The name of the app.
        explode: false
        in: path
        name: app
        required: true
        schema:
          type: string
        style: simple
        x-position: 1
      - description: The id of the workflow to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
        x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowDto'
        description: The new workflow.
        required: true
        x-name: request
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowsDto'
          description: Workflow updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Workflow request is not valid.
        "404":
          description: Workflow or app not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
          description: Operation failed
      security:
      - squidex-oauth-auth:
        - squidex.apps.{app}.workflows.update
      summary: Update a workflow.
      tags:
      - Apps
components:
  schemas:
    UsersDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/UsersDto_allOf'
    UserDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/UserDto_allOf'
    Resource:
      additionalProperties: false
      properties:
        _links:
          additionalProperties:
            $ref: '#/components/schemas/ResourceLink'
          description: The links.
          type: object
      required:
      - _links
      type: object
      x-abstract: true
    ResourceLink:
      additionalProperties: false
      properties:
        href:
          description: The link url.
          minLength: 1
          type: string
        method:
          description: The link method.
          minLength: 1
          type: string
        metadata:
          description: Additional data about the link.
          nullable: true
          type: string
      required:
      - href
      - method
      type: object
    CreateUserDto:
      additionalProperties: false
      properties:
        email:
          description: The email of the user. Unique value.
          format: email
          minLength: 1
          type: string
        displayName:
          description: The display name (usually first name and last name) of the
            user.
          minLength: 1
          type: string
        password:
          description: The password of the user.
          minLength: 1
          type: string
        permissions:
          description: Additional permissions for the user.
          items:
            type: string
          type: array
      required:
      - displayName
      - email
      - password
      - permissions
      type: object
    UpdateUserDto:
      additionalProperties: false
      properties:
        email:
          description: The email of the user. Unique value.
          format: email
          minLength: 1
          type: string
        displayName:
          description: The display name (usually first name and last name) of the
            user.
          minLength: 1
          type: string
        password:
          description: The password of the user.
          nullable: true
          type: string
        permissions:
          description: Additional permissions for the user.
          items:
            type: string
          type: array
      required:
      - displayName
      - email
      - permissions
      type: object
    UISettingsDto:
      additionalProperties: false
      properties:
        canCreateApps:
          description: True when the user can create apps.
          type: boolean
      type: object
    UpdateSettingDto:
      additionalProperties: false
      properties:
        value:
          description: The value for the setting.
          oneOf:
          - $ref: '#/components/schemas/IJsonValue'
      type: object
    IJsonValue:
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/JsonValueType'
      type: object
      x-abstract: true
    JsonValueType:
      enum:
      - Array
      - Boolean
      - "Null"
      - Number
      - Object
      - String
      type: string
      x-enumNames:
      - Array
      - Boolean
      - "Null"
      - Number
      - Object
      - String
    EventConsumersDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/EventConsumersDto_allOf'
    EventConsumerDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/EventConsumerDto_allOf'
    GraphQLQuery:
      additionalProperties: false
      properties:
        operationName:
          type: string
        namedQuery:
          type: string
        query:
          type: string
        variables: {}
      type: object
    ContentsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ContentsDto_allOf'
    ContentDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ContentDto_allOf'
    NamedContentData:
      allOf:
      - $ref: '#/components/schemas/ContentDataOfString'
      - additionalProperties: false
        type: object
    ContentDataOfString:
      allOf:
      - additionalProperties:
          $ref: '#/components/schemas/ContentFieldData'
        type: object
      - $ref: '#/components/schemas/ContentDataOfString_allOf'
    KeyValuePairOfStringAndContentFieldData:
      additionalProperties: false
      properties:
        key:
          type: string
        value:
          additionalProperties:
            $ref: '#/components/schemas/IJsonValue'
          type: object
      type: object
    ContentFieldData:
      additionalProperties:
        $ref: '#/components/schemas/IJsonValue'
      type: object
    ScheduleJobDto:
      additionalProperties: false
      properties:
        id:
          description: The id of the schedule job.
          format: guid
          type: string
        status:
          description: The new status.
          type: string
        dueTime:
          description: The target date and time when the content should be scheduled.
          format: date-time
          type: string
        scheduledBy:
          description: The user who schedule the content.
          type: string
      required:
      - scheduledBy
      type: object
    FieldDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/FieldDto_allOf'
    FieldPropertiesDto:
      additionalProperties: false
      discriminator:
        mapping:
          Array: '#/components/schemas/ArrayFieldPropertiesDto'
          Assets: '#/components/schemas/AssetsFieldPropertiesDto'
          Boolean: '#/components/schemas/BooleanFieldPropertiesDto'
          DateTime: '#/components/schemas/DateTimeFieldPropertiesDto'
          Geolocation: '#/components/schemas/GeolocationFieldPropertiesDto'
          Json: '#/components/schemas/JsonFieldPropertiesDto'
          Number: '#/components/schemas/NumberFieldPropertiesDto'
          References: '#/components/schemas/ReferencesFieldPropertiesDto'
          String: '#/components/schemas/StringFieldPropertiesDto'
          Tags: '#/components/schemas/TagsFieldPropertiesDto'
          UI: '#/components/schemas/UIFieldPropertiesDto'
        propertyName: fieldType
      properties:
        label:
          description: Optional label for the editor.
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
        hints:
          description: Hints to describe the schema.
          maxLength: 1000
          minLength: 0
          nullable: true
          type: string
        placeholder:
          description: Placeholder to show when no value has been entered.
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
        isRequired:
          description: Indicates if the field is required.
          type: boolean
        editorUrl:
          description: Optional url to the editor.
          nullable: true
          type: string
        tags:
          description: Tags for automation processes.
          items:
            type: string
          nullable: true
          type: array
        fieldType:
          type: string
      required:
      - fieldType
      type: object
      x-abstract: true
    ArrayFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/ArrayFieldPropertiesDto_allOf'
    AssetsFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/AssetsFieldPropertiesDto_allOf'
    BooleanFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/BooleanFieldPropertiesDto_allOf'
    BooleanFieldEditor:
      enum:
      - Checkbox
      - Toggle
      type: string
      x-enumNames:
      - Checkbox
      - Toggle
    DateTimeFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/DateTimeFieldPropertiesDto_allOf'
    DateTimeFieldEditor:
      enum:
      - Date
      - DateTime
      type: string
      x-enumNames:
      - Date
      - DateTime
    DateTimeCalculatedDefaultValue:
      enum:
      - Now
      - Today
      type: string
      x-enumNames:
      - Now
      - Today
    GeolocationFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/GeolocationFieldPropertiesDto_allOf'
    GeolocationFieldEditor:
      enum:
      - Map
      type: string
      x-enumNames:
      - Map
    JsonFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - additionalProperties: false
        type: object
    NumberFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/NumberFieldPropertiesDto_allOf'
    NumberFieldEditor:
      enum:
      - Input
      - Radio
      - Dropdown
      - Stars
      type: string
      x-enumNames:
      - Input
      - Radio
      - Dropdown
      - Stars
    ReferencesFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/ReferencesFieldPropertiesDto_allOf'
    ReferencesFieldEditor:
      enum:
      - List
      - Dropdown
      - Tags
      type: string
      x-enumNames:
      - List
      - Dropdown
      - Tags
    StringFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/StringFieldPropertiesDto_allOf'
    StringFieldEditor:
      enum:
      - Input
      - Color
      - Markdown
      - Dropdown
      - Html
      - Radio
      - RichText
      - Slug
      - StockPhoto
      - TextArea
      type: string
      x-enumNames:
      - Input
      - Color
      - Markdown
      - Dropdown
      - Html
      - Radio
      - RichText
      - Slug
      - StockPhoto
      - TextArea
    TagsFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/TagsFieldPropertiesDto_allOf'
    TagsFieldEditor:
      enum:
      - Tags
      - Checkboxes
      - Dropdown
      type: string
      x-enumNames:
      - Tags
      - Checkboxes
      - Dropdown
    UIFieldPropertiesDto:
      allOf:
      - $ref: '#/components/schemas/FieldPropertiesDto'
      - $ref: '#/components/schemas/UIFieldPropertiesDto_allOf'
    UIFieldEditor:
      enum:
      - Separator
      type: string
      x-enumNames:
      - Separator
    NestedFieldDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/NestedFieldDto_allOf'
    StatusInfoDto:
      additionalProperties: false
      properties:
        status:
          description: The name of the status.
          minLength: 1
          type: string
        color:
          description: The color of the status.
          minLength: 1
          type: string
      required:
      - color
      - status
      type: object
    ImportResultDto:
      additionalProperties: false
      properties:
        error:
          description: The error when the import failed.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/ErrorDto'
        contentId:
          description: The id of the content when the import succeeds.
          format: guid
          nullable: true
          type: string
      type: object
    ErrorDto:
      additionalProperties: false
      properties:
        message:
          description: Error message.
          minLength: 1
          type: string
        traceId:
          description: The optional trace id.
          nullable: true
          type: string
        type:
          description: Link to the error details.
          nullable: true
          type: string
        details:
          description: Detailed error messages.
          items:
            type: string
          nullable: true
          type: array
        statusCode:
          description: Status code of the http response.
          format: int32
          nullable: true
          type: integer
      required:
      - message
      type: object
    ImportContentsDto:
      additionalProperties: false
      properties:
        datas:
          description: The data to import.
          items:
            $ref: '#/components/schemas/NamedContentData'
          type: array
        publish:
          description: True to automatically publish the content.
          type: boolean
        doNotScript:
          description: 'True to turn off scripting for faster inserts. Default: true.'
          type: boolean
        optimizeValidation:
          description: 'True to turn off costly validation: Unique checks, asset checks
            and reference checks. Default: true.'
          type: boolean
      required:
      - datas
      type: object
    ChangeStatusDto:
      additionalProperties: false
      properties:
        status:
          description: The new status.
          minLength: 1
          type: string
        dueTime:
          description: The due time.
          format: date-time
          nullable: true
          type: string
      required:
      - status
      type: object
    ResourcesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - additionalProperties: false
        type: object
    TranslationDto:
      additionalProperties: false
      example:
        result: ""
        text: text
      properties:
        result:
          description: The result of the translation.
          oneOf:
          - $ref: '#/components/schemas/TranslationResult'
        text:
          description: The translated text.
          nullable: true
          type: string
      type: object
    TranslationResult:
      enum:
      - Translated
      - LanguageNotSupported
      - NotTranslated
      - NotImplemented
      - Failed
      type: string
      x-enumNames:
      - Translated
      - LanguageNotSupported
      - NotTranslated
      - NotImplemented
      - Failed
    TranslateDto:
      additionalProperties: false
      example:
        targetLanguage: targetLanguage
        text: text
        sourceLanguage: sourceLanguage
      properties:
        text:
          description: The text to translate.
          minLength: 1
          type: string
        targetLanguage:
          description: The target language.
          type: string
        sourceLanguage:
          description: The optional source language.
          type: string
      required:
      - targetLanguage
      - text
      type: object
    LogDownloadDto:
      additionalProperties: false
      example:
        downloadUrl: downloadUrl
      properties:
        downloadUrl:
          description: The url to download the log.
          nullable: true
          type: string
      type: object
    CurrentCallsDto:
      additionalProperties: false
      example:
        maxAllowed: 6
        count: 0
      properties:
        count:
          description: The number of calls.
          format: int64
          type: integer
        maxAllowed:
          description: The number of maximum allowed calls.
          format: int64
          type: integer
      type: object
    CallsUsageDto:
      additionalProperties: false
      properties:
        date:
          description: The date when the usage was tracked.
          format: date-time
          type: string
        count:
          description: The number of calls.
          format: int64
          type: integer
        averageMs:
          description: The average duration in milliseconds.
          format: int64
          type: integer
      type: object
    CurrentStorageDto:
      additionalProperties: false
      example:
        maxAllowed: 6
        size: 0
      properties:
        size:
          description: The size in bytes.
          format: int64
          type: integer
        maxAllowed:
          description: The maximum allowed asset size.
          format: int64
          type: integer
      type: object
    StorageUsageDto:
      additionalProperties: false
      example:
        date: 2000-01-23T04:56:07.000+00:00
        size: 6
        count: 0
      properties:
        date:
          description: The date when the usage was tracked.
          format: date-time
          type: string
        count:
          description: The number of assets.
          format: int64
          type: integer
        size:
          description: The size in bytes.
          format: int64
          type: integer
      type: object
    SchemaDetailsDto:
      allOf:
      - $ref: '#/components/schemas/SchemaDto'
      - $ref: '#/components/schemas/SchemaDetailsDto_allOf'
    SchemaScriptsDto:
      additionalProperties: false
      example:
        query: query
        change: change
        create: create
        update: update
        delete: delete
      properties:
        query:
          description: The script that is executed for each query when querying contents.
          nullable: true
          type: string
        create:
          description: The script that is executed when creating a content.
          nullable: true
          type: string
        update:
          description: The script that is executed when updating a content.
          nullable: true
          type: string
        delete:
          description: The script that is executed when deleting a content.
          nullable: true
          type: string
        change:
          description: The script that is executed when change a content status.
          nullable: true
          type: string
      type: object
    FieldNames:
      items:
        type: string
      type: array
    SchemaDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/SchemaDto_allOf'
    SchemaPropertiesDto:
      additionalProperties: false
      properties:
        label:
          description: Optional label for the editor.
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
        hints:
          description: Hints to describe the schema.
          maxLength: 1000
          minLength: 0
          nullable: true
          type: string
        tags:
          description: Tags for automation processes.
          items:
            type: string
          nullable: true
          type: array
      type: object
    AddFieldDto:
      additionalProperties: false
      example:
        name: name
        partitioning: partitioning
        properties: ""
      properties:
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: ^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$
          type: string
        partitioning:
          description: Determines the optional partitioning of the field.
          nullable: true
          type: string
        properties:
          description: The field properties.
          oneOf:
          - $ref: '#/components/schemas/FieldPropertiesDto'
      required:
      - name
      - properties
      type: object
    ConfigureUIFieldsDto:
      additionalProperties: false
      properties:
        fieldsInLists:
          description: The name of fields that are used in content lists.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/FieldNames'
        fieldsInReferences:
          description: The name of fields that are used in content references.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/FieldNames'
      type: object
    ReorderFieldsDto:
      additionalProperties: false
      example:
        fieldIds:
        - 0
        - 0
      properties:
        fieldIds:
          description: The field ids in the target order.
          items:
            format: int64
            type: integer
          type: array
      required:
      - fieldIds
      type: object
    UpdateFieldDto:
      additionalProperties: false
      example:
        properties: ""
      properties:
        properties:
          description: The field properties.
          oneOf:
          - $ref: '#/components/schemas/FieldPropertiesDto'
      required:
      - properties
      type: object
    SchemasDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/SchemasDto_allOf'
    CreateSchemaDto:
      allOf:
      - $ref: '#/components/schemas/UpsertSchemaDto'
      - $ref: '#/components/schemas/CreateSchemaDto_allOf'
    UpsertSchemaDto:
      additionalProperties: false
      properties:
        properties:
          description: The optional properties.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SchemaPropertiesDto'
        scripts:
          description: The optional scripts.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SchemaScriptsDto'
        fieldsInReferences:
          description: The names of the fields that should be used in references.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/FieldNames'
        fieldsInLists:
          description: The names of the fields that should be shown in lists, including
            meta fields.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/FieldNames'
        fields:
          description: Optional fields.
          items:
            $ref: '#/components/schemas/UpsertSchemaFieldDto'
          nullable: true
          type: array
        previewUrls:
          additionalProperties:
            type: string
          description: The optional preview urls.
          nullable: true
          type: object
        category:
          description: The category.
          nullable: true
          type: string
        isPublished:
          description: Set it to true to autopublish the schema.
          type: boolean
      type: object
      x-abstract: true
    UpsertSchemaFieldDto:
      additionalProperties: false
      properties:
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: ^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$
          type: string
        isHidden:
          description: Defines if the field is hidden.
          type: boolean
        isLocked:
          description: Defines if the field is locked.
          type: boolean
        isDisabled:
          description: Defines if the field is disabled.
          type: boolean
        partitioning:
          description: Determines the optional partitioning of the field.
          nullable: true
          type: string
        properties:
          description: The field properties.
          oneOf:
          - $ref: '#/components/schemas/FieldPropertiesDto'
        nested:
          description: The nested fields.
          items:
            $ref: '#/components/schemas/UpsertSchemaNestedFieldDto'
          nullable: true
          type: array
      required:
      - name
      - properties
      type: object
    UpsertSchemaNestedFieldDto:
      additionalProperties: false
      properties:
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: ^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$
          type: string
        isHidden:
          description: Defines if the field is hidden.
          type: boolean
        isLocked:
          description: Defines if the field is locked.
          type: boolean
        isDisabled:
          description: Defines if the field is disabled.
          type: boolean
        properties:
          description: The field properties.
          oneOf:
          - $ref: '#/components/schemas/FieldPropertiesDto'
      required:
      - name
      - properties
      type: object
    UpdateSchemaDto:
      additionalProperties: false
      example:
        hints: hints
        label: label
        tags:
        - tags
        - tags
      properties:
        label:
          description: Optional label for the editor.
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
        hints:
          description: Hints to describe the schema.
          maxLength: 1000
          minLength: 0
          nullable: true
          type: string
        tags:
          description: Tags for automation processes.
          items:
            type: string
          nullable: true
          type: array
      type: object
    SynchronizeSchemaDto:
      allOf:
      - $ref: '#/components/schemas/UpsertSchemaDto'
      - $ref: '#/components/schemas/SynchronizeSchemaDto_allOf'
    ChangeCategoryDto:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          description: The name of the category.
          nullable: true
          type: string
      type: object
    ConfigurePreviewUrlsDto:
      additionalProperties:
        type: string
      type: object
    RuleElementDto:
      additionalProperties: false
      properties:
        description:
          description: Describes the action or trigger type.
          minLength: 1
          type: string
        display:
          description: The label for the action or trigger type.
          minLength: 1
          type: string
        title:
          description: Optional title.
          nullable: true
          type: string
        iconColor:
          description: The color for the icon.
          nullable: true
          type: string
        iconImage:
          description: The image for the icon.
          nullable: true
          type: string
        readMore:
          description: The optional link to the product that is integrated.
          nullable: true
          type: string
        properties:
          description: The properties.
          items:
            $ref: '#/components/schemas/RuleElementPropertyDto'
          type: array
      required:
      - description
      - display
      - properties
      type: object
    RuleElementPropertyDto:
      additionalProperties: false
      properties:
        editor:
          description: The html editor.
          oneOf:
          - $ref: '#/components/schemas/RuleActionPropertyEditor'
        name:
          description: The name of the editor.
          minLength: 1
          type: string
        display:
          description: The label to use.
          minLength: 1
          type: string
        description:
          description: The optional description.
          nullable: true
          type: string
        isFormattable:
          description: Indicates if the property is formattable.
          type: boolean
        isRequired:
          description: Indicates if the property is required.
          type: boolean
      required:
      - display
      - editor
      - name
      type: object
    RuleActionPropertyEditor:
      enum:
      - Checkbox
      - Email
      - Number
      - Password
      - Text
      - TextArea
      - Url
      type: string
      x-enumNames:
      - Checkbox
      - Email
      - Number
      - Password
      - Text
      - TextArea
      - Url
    RulesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RulesDto_allOf'
    RuleDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RuleDto_allOf'
    RuleTriggerDto:
      additionalProperties: false
      discriminator:
        mapping:
          AssetChanged: '#/components/schemas/AssetChangedRuleTriggerDto'
          Comment: '#/components/schemas/CommentRuleTriggerDto'
          ContentChanged: '#/components/schemas/ContentChangedRuleTriggerDto'
          Manual: '#/components/schemas/ManualRuleTriggerDto'
          SchemaChanged: '#/components/schemas/SchemaChangedRuleTriggerDto'
          Usage: '#/components/schemas/UsageRuleTriggerDto'
        propertyName: triggerType
      properties:
        triggerType:
          type: string
      required:
      - triggerType
      type: object
      x-abstract: true
    AssetChangedRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/AssetChangedRuleTriggerDto_allOf'
    CommentRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/AssetChangedRuleTriggerDto_allOf'
    ContentChangedRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/ContentChangedRuleTriggerDto_allOf'
    ContentChangedRuleTriggerSchemaDto:
      additionalProperties: false
      properties:
        schemaId:
          description: The id of the schema.
          format: guid
          type: string
        condition:
          description: Javascript condition when to trigger.
          nullable: true
          type: string
      type: object
    ManualRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - additionalProperties: false
        type: object
    SchemaChangedRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/AssetChangedRuleTriggerDto_allOf'
    UsageRuleTriggerDto:
      allOf:
      - $ref: '#/components/schemas/RuleTriggerDto'
      - $ref: '#/components/schemas/UsageRuleTriggerDto_allOf'
    RuleAction:
      discriminator:
        mapping:
          Webhook: '#/components/schemas/WebhookRuleActionDto'
          Tweet: '#/components/schemas/TweetRuleActionDto'
          Slack: '#/components/schemas/SlackRuleActionDto'
          Prerender: '#/components/schemas/PrerenderRuleActionDto'
          Notification: '#/components/schemas/NotificationRuleActionDto'
          Medium: '#/components/schemas/MediumRuleActionDto'
          Fastly: '#/components/schemas/FastlyRuleActionDto'
          Email: '#/components/schemas/EmailRuleActionDto'
          ElasticSearch: '#/components/schemas/ElasticSearchRuleActionDto'
          Discourse: '#/components/schemas/DiscourseRuleActionDto'
          Comment: '#/components/schemas/CommentRuleActionDto'
          AzureQueue: '#/components/schemas/AzureQueueRuleActionDto'
          Algolia: '#/components/schemas/AlgoliaRuleActionDto'
        propertyName: actionType
      properties:
        actionType:
          type: string
      required:
      - actionType
    CreateRuleDto:
      additionalProperties: false
      example:
        action: ""
        trigger: ""
      properties:
        trigger:
          description: The trigger properties.
          oneOf:
          - $ref: '#/components/schemas/RuleTriggerDto'
        action:
          description: The action properties.
          oneOf:
          - $ref: '#/components/schemas/RuleAction'
      required:
      - action
      - trigger
      type: object
    UpdateRuleDto:
      additionalProperties: false
      example:
        name: name
        action: ""
        trigger: ""
      properties:
        name:
          description: Optional rule name.
          nullable: true
          type: string
        trigger:
          description: The trigger properties.
          oneOf:
          - $ref: '#/components/schemas/RuleTriggerDto'
        action:
          description: The action properties.
          oneOf:
          - $ref: '#/components/schemas/RuleAction'
      type: object
    RuleEventsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RuleEventsDto_allOf'
    RuleEventDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RuleEventDto_allOf'
    RuleResult:
      enum:
      - Pending
      - Success
      - Failed
      - Timeout
      type: string
      x-enumNames:
      - Pending
      - Success
      - Failed
      - Timeout
    RuleJobResult:
      enum:
      - Pending
      - Success
      - Retry
      - Failed
      - Cancelled
      type: string
      x-enumNames:
      - Pending
      - Success
      - Retry
      - Failed
      - Cancelled
    AppPlansDto:
      additionalProperties: false
      example:
        currentPlanId: currentPlanId
        plans:
        - costs: costs
          maxAssetSize: 6
          maxContributors: 1
          yearlyId: yearlyId
          maxApiCalls: 0
          name: name
          yearlyCosts: yearlyCosts
          id: id
        - costs: costs
          maxAssetSize: 6
          maxContributors: 1
          yearlyId: yearlyId
          maxApiCalls: 0
          name: name
          yearlyCosts: yearlyCosts
          id: id
        hasPortal: true
        planOwner: planOwner
      properties:
        plans:
          description: The available plans.
          items:
            $ref: '#/components/schemas/PlanDto'
          type: array
        currentPlanId:
          description: The current plan id.
          nullable: true
          type: string
        planOwner:
          description: The plan owner.
          nullable: true
          type: string
        hasPortal:
          description: Indicates if there is a billing portal.
          type: boolean
      required:
      - plans
      type: object
    PlanDto:
      additionalProperties: false
      example:
        costs: costs
        maxAssetSize: 6
        maxContributors: 1
        yearlyId: yearlyId
        maxApiCalls: 0
        name: name
        yearlyCosts: yearlyCosts
        id: id
      properties:
        id:
          description: The id of the plan.
          minLength: 1
          type: string
        name:
          description: The name of the plan.
          minLength: 1
          type: string
        costs:
          description: The monthly costs of the plan.
          minLength: 1
          type: string
        yearlyCosts:
          description: The yearly costs of the plan.
          nullable: true
          type: string
        yearlyId:
          description: The yearly id of the plan.
          nullable: true
          type: string
        maxApiCalls:
          description: The maximum number of API calls.
          format: int64
          type: integer
        maxAssetSize:
          description: The maximum allowed asset size.
          format: int64
          type: integer
        maxContributors:
          description: The maximum number of contributors.
          format: int32
          type: integer
      required:
      - costs
      - id
      - name
      type: object
    PlanChangedDto:
      additionalProperties: false
      example:
        redirectUri: redirectUri
      properties:
        redirectUri:
          description: Optional redirect uri.
          nullable: true
          type: string
      type: object
    ChangePlanDto:
      additionalProperties: false
      example:
        planId: planId
      properties:
        planId:
          description: The new plan id.
          minLength: 1
          type: string
      required:
      - planId
      type: object
    ExposedValues:
      additionalProperties:
        type: string
      type: object
    FeaturesDto:
      additionalProperties: false
      example:
        features:
        - name: name
          text: text
        - name: name
          text: text
        version: 0
      properties:
        features:
          description: The latest features.
          items:
            $ref: '#/components/schemas/FeatureDto'
          type: array
        version:
          description: The recent version.
          format: int32
          type: integer
      required:
      - features
      type: object
    FeatureDto:
      additionalProperties: false
      example:
        name: name
        text: text
      properties:
        name:
          description: The name of the feature.
          minLength: 1
          type: string
        text:
          description: The description text.
          minLength: 1
          type: string
      required:
      - name
      - text
      type: object
    LanguageDto:
      additionalProperties: false
      example:
        englishName: englishName
        iso2Code: iso2Code
      properties:
        iso2Code:
          description: The iso code of the language.
          minLength: 1
          type: string
        englishName:
          description: The english name of the language.
          minLength: 1
          type: string
      required:
      - englishName
      - iso2Code
      type: object
    HistoryEventDto:
      additionalProperties: false
      example:
        actor: actor
        eventId: eventId
        created: 2000-01-23T04:56:07.000+00:00
        message: message
        version: 0
      properties:
        message:
          description: The message of the event.
          minLength: 1
          type: string
        actor:
          description: The user who called the action.
          minLength: 1
          type: string
        eventId:
          description: Gets a unique id for the event.
          format: guid
          type: string
        created:
          description: The time when the event happened.
          format: date-time
          type: string
        version:
          description: The version identifier.
          format: int64
          type: integer
      required:
      - actor
      - message
      type: object
    CommentsDto:
      additionalProperties: false
      example:
        deletedComments:
        - deletedComments
        - deletedComments
        updatedComments:
        - id: id
          time: 2000-01-23T04:56:07.000+00:00
          text: text
          user: user
          url: https://openapi-generator.tech
        - id: id
          time: 2000-01-23T04:56:07.000+00:00
          text: text
          user: user
          url: https://openapi-generator.tech
        createdComments:
        - id: id
          time: 2000-01-23T04:56:07.000+00:00
          text: text
          user: user
          url: https://openapi-generator.tech
        - id: id
          time: 2000-01-23T04:56:07.000+00:00
          text: text
          user: user
          url: https://openapi-generator.tech
        version: 0
      properties:
        createdComments:
          description: The created comments including the updates.
          items:
            $ref: '#/components/schemas/CommentDto'
          nullable: true
          type: array
        updatedComments:
          description: The updates comments since the last version.
          items:
            $ref: '#/components/schemas/CommentDto'
          nullable: true
          type: array
        deletedComments:
          description: The deleted comments since the last version.
          items:
            format: guid
            type: string
          nullable: true
          type: array
        version:
          description: The current version.
          format: int64
          type: integer
      type: object
    CommentDto:
      additionalProperties: false
      example:
        id: id
        time: 2000-01-23T04:56:07.000+00:00
        text: text
        user: user
        url: https://openapi-generator.tech
      properties:
        id:
          description: The id of the comment.
          format: guid
          type: string
        time:
          description: The time when the comment was created or updated last.
          format: date-time
          minLength: 1
          type: string
        user:
          description: The user who created or updated the comment.
          type: string
        text:
          description: The text of the comment.
          minLength: 1
          type: string
        url:
          description: The url where the comment is created.
          format: uri
          nullable: true
          type: string
      required:
      - text
      - time
      - user
      type: object
    UpsertCommentDto:
      additionalProperties: false
      example:
        text: text
        url: https://openapi-generator.tech
      properties:
        text:
          description: The comment text.
          minLength: 1
          type: string
        url:
          description: The url where the comment is created.
          format: uri
          nullable: true
          type: string
      required:
      - text
      type: object
    BackupJobsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BackupJobsDto_allOf'
    BackupJobDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BackupJobDto_allOf'
    JobStatus:
      enum:
      - Created
      - Started
      - Completed
      - Failed
      type: string
      x-enumNames:
      - Created
      - Started
      - Completed
      - Failed
    RestoreJobDto:
      additionalProperties: false
      example:
        stopped: 2000-01-23T04:56:07.000+00:00
        log:
        - log
        - log
        started: 2000-01-23T04:56:07.000+00:00
        url: https://openapi-generator.tech
        status: ""
      properties:
        url:
          description: The uri to load from.
          format: uri
          minLength: 1
          type: string
        log:
          description: The status log.
          items:
            type: string
          type: array
        started:
          description: The time when the job has been started.
          format: date-time
          type: string
        stopped:
          description: The time when the job has been stopped.
          format: date-time
          nullable: true
          type: string
        status:
          description: The status of the operation.
          oneOf:
          - $ref: '#/components/schemas/JobStatus'
      required:
      - log
      - url
      type: object
    RestoreRequestDto:
      additionalProperties: false
      example:
        name: name
        url: https://openapi-generator.tech
      properties:
        name:
          description: The name of the app.
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          type: string
        url:
          description: The url to the restore file.
          format: uri
          minLength: 1
          type: string
      required:
      - url
      type: object
    ResizeMode:
      enum:
      - Crop
      - CropUpsize
      - Pad
      - BoxPad
      - Max
      - Min
      - Stretch
      type: string
      x-enumNames:
      - Crop
      - CropUpsize
      - Pad
      - BoxPad
      - Max
      - Min
      - Stretch
    AssetsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AssetsDto_allOf'
    AssetDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AssetDto_allOf'
    AssetType:
      enum:
      - Unknown
      - Image
      - Audio
      - Video
      type: string
      x-enumNames:
      - Unknown
      - Image
      - Audio
      - Video
    AssetMeta:
      additionalProperties: false
      properties:
        isDuplicate:
          description: Indicates whether the asset is a duplicate.
          type: string
      type: object
    CreateAssetFolderDto:
      additionalProperties: false
      example:
        folderName: folderName
        parentId: parentId
      properties:
        folderName:
          description: The name of the folder.
          minLength: 1
          type: string
        parentId:
          description: The id of the parent folder.
          format: guid
          type: string
      required:
      - folderName
      type: object
    RenameAssetFolderDto:
      additionalProperties: false
      example:
        folderName: folderName
      properties:
        folderName:
          description: The name of the folder.
          minLength: 1
          type: string
      required:
      - folderName
      type: object
    MoveAssetItemDto:
      additionalProperties: false
      example:
        parentId: parentId
      properties:
        parentId:
          description: The parent folder id.
          format: guid
          type: string
      type: object
    AnnotateAssetDto:
      additionalProperties: false
      example:
        fileName: fileName
        metadata:
          key: ""
        isProtected: true
        slug: slug
        tags:
        - tags
        - tags
      properties:
        fileName:
          description: The new name of the asset.
          nullable: true
          type: string
        slug:
          description: The new slug of the asset.
          nullable: true
          type: string
        isProtected:
          description: True, when the asset is not public.
          nullable: true
          type: boolean
        tags:
          description: The new asset tags.
          items:
            type: string
          nullable: true
          type: array
        metadata:
          additionalProperties:
            description: Any JSON type
          description: The asset metadata.
          nullable: true
          type: object
      type: object
    ClientsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ClientsDto_allOf'
    ClientDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ClientDto_allOf'
    CreateClientDto:
      additionalProperties: false
      example:
        id: id
      properties:
        id:
          description: The id of the client.
          minLength: 1
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          type: string
      required:
      - id
      type: object
    UpdateClientDto:
      additionalProperties: false
      example:
        role: role
        name: name
      properties:
        name:
          description: The new display name of the client.
          maxLength: 20
          minLength: 0
          type: string
        role:
          description: The role of the client.
          nullable: true
          type: string
      type: object
    ContributorsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ContributorsDto_allOf'
    ContributorDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ContributorDto_allOf'
    ContributorsMetadata:
      additionalProperties: false
      properties:
        isInvited:
          description: Indicates whether the user has been invited.
          type: string
      type: object
    AssignContributorDto:
      additionalProperties: false
      example:
        role: role
        contributorId: contributorId
        invite: true
      properties:
        contributorId:
          description: The id or email of the user to add to the app.
          minLength: 1
          type: string
        role:
          description: The role of the contributor.
          nullable: true
          type: string
        invite:
          description: Set to true to invite the user if he does not exist.
          type: boolean
      required:
      - contributorId
      type: object
    AppLanguagesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AppLanguagesDto_allOf'
    AppLanguageDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AppLanguageDto_allOf'
    AddLanguageDto:
      additionalProperties: false
      example:
        language: language
      properties:
        language:
          description: The language to add.
          type: string
      required:
      - language
      type: object
    UpdateLanguageDto:
      additionalProperties: false
      example:
        isMaster: true
        isOptional: true
        fallback:
        - fallback
        - fallback
      properties:
        isMaster:
          description: Set the value to true to make the language the master.
          nullable: true
          type: boolean
        isOptional:
          description: Set the value to true to make the language optional.
          type: boolean
        fallback:
          description: Optional fallback languages.
          items:
            type: string
          nullable: true
          type: array
      type: object
    PatternsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/PatternsDto_allOf'
    PatternDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/PatternDto_allOf'
    UpdatePatternDto:
      additionalProperties: false
      example:
        name: name
        pattern: pattern
        message: message
      properties:
        name:
          description: The name of the suggestion.
          minLength: 1
          type: string
        pattern:
          description: The regex pattern.
          minLength: 1
          type: string
        message:
          description: The regex message.
          nullable: true
          type: string
      required:
      - name
      - pattern
      type: object
    RolesDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RolesDto_allOf'
    RoleDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RoleDto_allOf'
    AddRoleDto:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          description: The role name.
          minLength: 1
          type: string
      required:
      - name
      type: object
    UpdateRoleDto:
      additionalProperties: false
      example:
        permissions:
        - permissions
        - permissions
      properties:
        permissions:
          description: Associated list of permissions.
          items:
            type: string
          type: array
      required:
      - permissions
      type: object
    AppDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AppDto_allOf'
    CreateAppDto:
      additionalProperties: false
      example:
        template: template
        name: name
      properties:
        name:
          description: The name of the app.
          minLength: 1
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          type: string
        template:
          description: Initialize the app with the inbuilt template.
          nullable: true
          type: string
      required:
      - name
      type: object
    UpdateAppDto:
      additionalProperties: false
      example:
        description: description
        label: label
      properties:
        label:
          description: The optional label of your app.
          nullable: true
          type: string
        description:
          description: The optional description of your app.
          nullable: true
          type: string
      type: object
    WorkflowsDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/WorkflowsDto_allOf'
    WorkflowDto:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/WorkflowDto_allOf'
    WorkflowStepDto:
      additionalProperties: false
      example:
        noUpdate: true
        noUpdateExpression: noUpdateExpression
        color: color
        noUpdateRoles:
        - noUpdateRoles
        - noUpdateRoles
        transitions:
          key:
            expression: expression
            roles:
            - roles
            - roles
      properties:
        transitions:
          additionalProperties:
            $ref: '#/components/schemas/WorkflowTransitionDto'
          description: The transitions.
          type: object
        color:
          description: The optional color.
          nullable: true
          type: string
        noUpdate:
          description: Indicates if updates should not be allowed.
          type: boolean
        noUpdateExpression:
          description: Optional expression that must evaluate to true when you want
            to prevent updates.
          nullable: true
          type: string
        noUpdateRoles:
          description: Optional list of roles to restrict the updates for users with
            these roles.
          items:
            type: string
          nullable: true
          type: array
      required:
      - transitions
      type: object
    WorkflowTransitionDto:
      additionalProperties: false
      example:
        expression: expression
        roles:
        - roles
        - roles
      properties:
        expression:
          description: The optional expression.
          nullable: true
          type: string
        roles:
          description: The optional restricted role.
          items:
            type: string
          nullable: true
          type: array
      type: object
    AddWorkflowDto:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          description: The name of the workflow.
          minLength: 1
          type: string
      required:
      - name
      type: object
    UpdateWorkflowDto:
      additionalProperties: false
      example:
        initial: initial
        schemaIds:
        - schemaIds
        - schemaIds
        name: name
        steps:
          key:
            noUpdate: true
            noUpdateExpression: noUpdateExpression
            color: color
            noUpdateRoles:
            - noUpdateRoles
            - noUpdateRoles
            transitions:
              key:
                expression: expression
                roles:
                - roles
                - roles
      properties:
        name:
          description: The name of the workflow.
          nullable: true
          type: string
        steps:
          additionalProperties:
            $ref: '#/components/schemas/WorkflowStepDto'
          description: The workflow steps.
          type: object
        schemaIds:
          description: The schema ids.
          items:
            format: guid
            type: string
          nullable: true
          type: array
        initial:
          description: The initial step.
          type: string
      required:
      - steps
      type: object
    WebhookRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/WebhookRuleActionDto_allOf'
    TweetRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/TweetRuleActionDto_allOf'
    SlackRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/SlackRuleActionDto_allOf'
    PrerenderRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/PrerenderRuleActionDto_allOf'
    NotificationRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/NotificationRuleActionDto_allOf'
    MediumRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/MediumRuleActionDto_allOf'
    FastlyRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/FastlyRuleActionDto_allOf'
    EmailRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/EmailRuleActionDto_allOf'
    ElasticSearchRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/ElasticSearchRuleActionDto_allOf'
    DiscourseRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/DiscourseRuleActionDto_allOf'
    CommentRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/CommentRuleActionDto_allOf'
    AzureQueueRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/AzureQueueRuleActionDto_allOf'
    AlgoliaRuleActionDto:
      allOf:
      - $ref: '#/components/schemas/RuleAction'
      - $ref: '#/components/schemas/AlgoliaRuleActionDto_allOf'
    UsersDto_allOf:
      properties:
        total:
          description: The total number of users.
          format: int64
          type: integer
        items:
          description: The users.
          items:
            $ref: '#/components/schemas/UserDto'
          type: array
      required:
      - items
    UserDto_allOf:
      properties:
        id:
          description: The id of the user.
          minLength: 1
          type: string
        email:
          description: The email of the user. Unique value.
          minLength: 1
          type: string
        displayName:
          description: The display name (usually first name and last name) of the
            user.
          minLength: 1
          type: string
        isLocked:
          description: Determines if the user is locked.
          type: boolean
        permissions:
          description: Additional permissions for the user.
          items:
            type: string
          type: array
      required:
      - displayName
      - email
      - id
      - isLocked
      - permissions
    EventConsumersDto_allOf:
      properties:
        items:
          description: The event consumers.
          items:
            $ref: '#/components/schemas/EventConsumerDto'
          type: array
    EventConsumerDto_allOf:
      properties:
        isStopped:
          type: boolean
        isResetting:
          type: boolean
        name:
          type: string
        error:
          nullable: true
          type: string
        position:
          nullable: true
          type: string
    ContentsDto_allOf:
      properties:
        total:
          description: The total number of content items.
          format: int64
          type: integer
        items:
          description: The content items.
          items:
            $ref: '#/components/schemas/ContentDto'
          type: array
        statuses:
          description: The possible statuses.
          items:
            $ref: '#/components/schemas/StatusInfoDto'
          type: array
      required:
      - items
      - statuses
    ContentDto_allOf:
      properties:
        id:
          description: The if of the content item.
          format: guid
          type: string
        createdBy:
          description: The user that has created the content item.
          type: string
        lastModifiedBy:
          description: The user that has updated the content item.
          type: string
        data:
          description: The data of the content item.
        dataDraft:
          description: The pending changes of the content item.
          nullable: true
        referenceData:
          description: The reference data for the frontend UI.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/NamedContentData'
        isPending:
          description: Indicates if the draft data is pending.
          type: boolean
        scheduleJob:
          description: The scheduled status.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/ScheduleJobDto'
        created:
          description: The date and time when the content item has been created.
          format: date-time
          type: string
        lastModified:
          description: The date and time when the content item has been modified last.
          format: date-time
          type: string
        status:
          description: The status of the content.
          type: string
        statusColor:
          description: The color of the status.
          type: string
        schemaName:
          description: The name of the schema.
          nullable: true
          type: string
        schemaDisplayName:
          description: The display name of the schema.
          nullable: true
          type: string
        referenceFields:
          description: The reference fields.
          items:
            $ref: '#/components/schemas/FieldDto'
          nullable: true
          type: array
        version:
          description: The version of the content.
          format: int64
          type: integer
      required:
      - createdBy
      - data
      - lastModifiedBy
    ContentDataOfString_allOf:
      properties:
        ValidValues:
          items:
            $ref: '#/components/schemas/KeyValuePairOfStringAndContentFieldData'
          type: array
    FieldDto_allOf:
      properties:
        fieldId:
          description: The id of the field.
          format: int64
          type: integer
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          type: string
        isHidden:
          description: Defines if the field is hidden.
          type: boolean
        isLocked:
          description: Defines if the field is locked.
          type: boolean
        isDisabled:
          description: Defines if the field is disabled.
          type: boolean
        partitioning:
          description: Defines the partitioning of the field.
          minLength: 1
          type: string
        properties:
          description: The field properties.
          oneOf:
          - $ref: '#/components/schemas/FieldPropertiesDto'
        nested:
          description: The nested fields.
          items:
            $ref: '#/components/schemas/NestedFieldDto'
          nullable: true
          type: array
      required:
      - name
      - partitioning
      - properties
    ArrayFieldPropertiesDto_allOf:
      properties:
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
    AssetsFieldPropertiesDto_allOf:
      properties:
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        minSize:
          description: The minimum file size in bytes.
          format: int32
          nullable: true
          type: integer
        maxSize:
          description: The maximum file size in bytes.
          format: int32
          nullable: true
          type: integer
        minWidth:
          description: The minimum image width in pixels.
          format: int32
          nullable: true
          type: integer
        maxWidth:
          description: The maximum image width in pixels.
          format: int32
          nullable: true
          type: integer
        minHeight:
          description: The minimum image height in pixels.
          format: int32
          nullable: true
          type: integer
        maxHeight:
          description: The maximum image height in pixels.
          format: int32
          nullable: true
          type: integer
        aspectWidth:
          description: The image aspect width in pixels.
          format: int32
          nullable: true
          type: integer
        aspectHeight:
          description: The image aspect height in pixels.
          format: int32
          nullable: true
          type: integer
        mustBeImage:
          description: Defines if the asset must be an image.
          type: boolean
        resolveImage:
          description: True to resolve first image in the content list.
          type: boolean
        allowedExtensions:
          description: The allowed file extensions.
          items:
            type: string
          nullable: true
          type: array
        allowDuplicates:
          description: True, if duplicate values are allowed.
          type: boolean
    BooleanFieldPropertiesDto_allOf:
      properties:
        defaultValue:
          description: The default value for the field value.
          nullable: true
          type: boolean
        inlineEditable:
          description: Indicates that the inline editor is enabled for this field.
          type: boolean
        editor:
          description: The editor that is used to manage this field.
          oneOf:
          - $ref: '#/components/schemas/BooleanFieldEditor'
    DateTimeFieldPropertiesDto_allOf:
      properties:
        defaultValue:
          description: The default value for the field value.
          format: date-time
          nullable: true
          type: string
        maxValue:
          description: The maximum allowed value for the field value.
          format: date-time
          nullable: true
          type: string
        minValue:
          description: The minimum allowed value for the field value.
          format: date-time
          nullable: true
          type: string
        editor:
          description: The editor that is used to manage this field.
          oneOf:
          - $ref: '#/components/schemas/DateTimeFieldEditor'
        calculatedDefaultValue:
          description: The calculated default value for the field value.
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DateTimeCalculatedDefaultValue'
    GeolocationFieldPropertiesDto_allOf:
      properties:
        defaultValue:
          description: The default value for the field value.
          nullable: true
          type: boolean
        editor:
          description: The editor that is used to manage this field.
          oneOf:
          - $ref: '#/components/schemas/GeolocationFieldEditor'
    NumberFieldPropertiesDto_allOf:
      properties:
        defaultValue:
          description: The default value for the field value.
          format: double
          nullable: true
          type: number
        maxValue:
          description: The maximum allowed value for the field value.
          format: double
          nullable: true
          type: number
        minValue:
          description: The minimum allowed value for the field value.
          format: double
          nullable: true
          type: number
        allowedValues:
          description: The allowed values for the field value.
          items:
            format: double
            type: number
          nullable: true
          type: array
        isUnique:
          description: Indicates if the field value must be unique. Ignored for nested
            fields and localized fields.
          type: boolean
        inlineEditable:
          description: Indicates that the inline editor is enabled for this field.
          type: boolean
        editor:
          description: The editor that is used to manage this field.
          oneOf:
          - $ref: '#/components/schemas/NumberFieldEditor'
    ReferencesFieldPropertiesDto_allOf:
      properties:
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        allowDuplicates:
          description: True, if duplicate values are allowed.
          type: boolean
        resolveReference:
          description: True to resolve references in the content list.
          type: boolean
        editor:
          description: The editor that is used to manage this field.
          oneOf:
          - $ref: '#/components/schemas/ReferencesFieldEditor'
        schemaIds:
          description: The id of the referenced schemas.
          items:
            format: guid
            type: string
          nullable: true
          type: array
    StringFieldPropertiesDto_allOf:
      properties:
        defaultValue:
          description: The default value for the field value.
          nullable: true
          type: string
        pattern:
          description: The pattern to enforce a specific format for the field value.
          nullable: true
          type: string
        patternMessage:
          description: The validation message for the pattern.
          nullable: true
          type: string
        minLength:
          description: The minimum allowed length for the field value.
          format: int32
          nullable: true
          type: integer
        maxLength:
          description: The maximum allowed length for the field value.
          format: int32
          nullable: true
          type: integer
        allowedValues:
          description: The allowed values for the field value.
          items:
            type: string
          nullable: true
          type: array
        isUnique:
          description: Indicates if the field value must be unique. Ignored for nested
            fields and localized fields.
          type: boolean
        inlineEditable:
          description: Indicates that the inline editor is enabled for this field.
          type: boolean
        editor:
          description: The editor that is used to manage this field.
          oneOf:
          - $ref: '#/components/schemas/StringFieldEditor'
    TagsFieldPropertiesDto_allOf:
      properties:
        minItems:
          description: The minimum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        maxItems:
          description: The maximum allowed items for the field value.
          format: int32
          nullable: true
          type: integer
        allowedValues:
          description: The allowed values for the field value.
          items:
            type: string
          nullable: true
          type: array
        editor:
          description: The editor that is used to manage this field.
          oneOf:
          - $ref: '#/components/schemas/TagsFieldEditor'
    UIFieldPropertiesDto_allOf:
      properties:
        editor:
          description: The editor that is used to manage this field.
          oneOf:
          - $ref: '#/components/schemas/UIFieldEditor'
    NestedFieldDto_allOf:
      properties:
        fieldId:
          description: The id of the field.
          format: int64
          type: integer
        name:
          description: The name of the field. Must be unique within the schema.
          minLength: 1
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          type: string
        isHidden:
          description: Defines if the field is hidden.
          type: boolean
        isLocked:
          description: Defines if the field is locked.
          type: boolean
        isDisabled:
          description: Defines if the field is disabled.
          type: boolean
        properties:
          description: The field properties.
          oneOf:
          - $ref: '#/components/schemas/FieldPropertiesDto'
      required:
      - name
      - properties
    SchemaDetailsDto_allOf:
      properties:
        scripts:
          description: The scripts.
          oneOf:
          - $ref: '#/components/schemas/SchemaScriptsDto'
        previewUrls:
          additionalProperties:
            type: string
          description: The preview Urls.
          type: object
        fieldsInLists:
          description: The name of fields that are used in content lists.
          oneOf:
          - $ref: '#/components/schemas/FieldNames'
        fieldsInReferences:
          description: The name of fields that are used in content references.
          oneOf:
          - $ref: '#/components/schemas/FieldNames'
        fields:
          description: The list of fields.
          items:
            $ref: '#/components/schemas/FieldDto'
          type: array
      required:
      - fields
      - fieldsInLists
      - fieldsInReferences
      - previewUrls
      - scripts
    SchemaDto_allOf:
      properties:
        id:
          description: The id of the schema.
          format: guid
          type: string
        name:
          description: The name of the schema. Unique within the app.
          minLength: 1
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          type: string
        category:
          description: The name of the category.
          nullable: true
          type: string
        properties:
          description: The schema properties.
          oneOf:
          - $ref: '#/components/schemas/SchemaPropertiesDto'
        isSingleton:
          description: Indicates if the schema is a singleton.
          type: boolean
        isPublished:
          description: Indicates if the schema is published.
          type: boolean
        createdBy:
          description: The user that has created the schema.
          type: string
        lastModifiedBy:
          description: The user that has updated the schema.
          type: string
        created:
          description: The date and time when the schema has been created.
          format: date-time
          type: string
        lastModified:
          description: The date and time when the schema has been modified last.
          format: date-time
          type: string
        version:
          description: The version of the schema.
          format: int64
          type: integer
      required:
      - createdBy
      - lastModifiedBy
      - name
      - properties
    SchemasDto_allOf:
      properties:
        items:
          description: The schemas.
          items:
            $ref: '#/components/schemas/SchemaDto'
          type: array
    CreateSchemaDto_allOf:
      properties:
        name:
          description: The name of the schema.
          minLength: 1
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          type: string
        isSingleton:
          description: Set to true to allow a single content item only.
          type: boolean
      required:
      - name
    SynchronizeSchemaDto_allOf:
      properties:
        noFieldDeletion:
          description: True, when fields should not be deleted.
          type: boolean
        noFieldRecreation:
          description: True, when fields with different types should not be recreated.
          type: boolean
    RulesDto_allOf:
      properties:
        items:
          description: The rules.
          items:
            $ref: '#/components/schemas/RuleDto'
          type: array
      required:
      - items
    RuleDto_allOf:
      properties:
        id:
          description: The id of the rule.
          format: guid
          type: string
        createdBy:
          description: The user that has created the rule.
          type: string
        lastModifiedBy:
          description: The user that has updated the rule.
          type: string
        created:
          description: The date and time when the rule has been created.
          format: date-time
          type: string
        lastModified:
          description: The date and time when the rule has been modified last.
          format: date-time
          type: string
        version:
          description: The version of the rule.
          format: int64
          type: integer
        isEnabled:
          description: Determines if the rule is enabled.
          type: boolean
        name:
          description: Optional rule name.
          nullable: true
          type: string
        trigger:
          description: The trigger properties.
          oneOf:
          - $ref: '#/components/schemas/RuleTriggerDto'
        action:
          description: The action properties.
          oneOf:
          - $ref: '#/components/schemas/RuleAction'
        numSucceeded:
          description: The number of completed executions.
          format: int32
          type: integer
        numFailed:
          description: The number of failed executions.
          format: int32
          type: integer
        lastExecuted:
          description: The date and time when the rule was executed the last time.
          format: date-time
          nullable: true
          type: string
      required:
      - action
      - createdBy
      - lastModifiedBy
      - trigger
    AssetChangedRuleTriggerDto_allOf:
      properties:
        condition:
          description: Javascript condition when to trigger.
          nullable: true
          type: string
    ContentChangedRuleTriggerDto_allOf:
      properties:
        schemas:
          description: The schema settings.
          items:
            $ref: '#/components/schemas/ContentChangedRuleTriggerSchemaDto'
          type: array
        handleAll:
          description: Determines whether the trigger should handle all content changes
            events.
          type: boolean
      required:
      - schemas
    UsageRuleTriggerDto_allOf:
      properties:
        limit:
          description: The number of monthly api calls.
          format: int32
          type: integer
        numDays:
          description: The number of days to check or null for the current month.
          format: int32
          maximum: 30.0
          minimum: 1.0
          nullable: true
          type: integer
    RuleEventsDto_allOf:
      properties:
        items:
          description: The rule events.
          items:
            $ref: '#/components/schemas/RuleEventDto'
          type: array
        total:
          description: The total number of rule events.
          format: int64
          type: integer
      required:
      - items
    RuleEventDto_allOf:
      properties:
        id:
          description: The id of the event.
          format: guid
          type: string
        created:
          description: The time when the event has been created.
          format: date-time
          type: string
        description:
          description: The description.
          minLength: 1
          type: string
        eventName:
          description: The name of the event.
          minLength: 1
          type: string
        lastDump:
          description: The last dump.
          nullable: true
          type: string
        numCalls:
          description: The number of calls.
          format: int32
          type: integer
        nextAttempt:
          description: The next attempt.
          format: date-time
          nullable: true
          type: string
        result:
          description: The result of the event.
          oneOf:
          - $ref: '#/components/schemas/RuleResult'
        jobResult:
          description: The result of the job.
          oneOf:
          - $ref: '#/components/schemas/RuleJobResult'
      required:
      - description
      - eventName
    BackupJobsDto_allOf:
      properties:
        items:
          description: The backups.
          items:
            $ref: '#/components/schemas/BackupJobDto'
          type: array
      required:
      - items
    BackupJobDto_allOf:
      properties:
        id:
          description: The id of the backup job.
          format: guid
          type: string
        started:
          description: The time when the job has been started.
          format: date-time
          type: string
        stopped:
          description: The time when the job has been stopped.
          format: date-time
          nullable: true
          type: string
        handledEvents:
          description: The number of handled events.
          format: int32
          type: integer
        handledAssets:
          description: The number of handled assets.
          format: int32
          type: integer
        status:
          description: The status of the operation.
          oneOf:
          - $ref: '#/components/schemas/JobStatus'
    AssetsDto_allOf:
      properties:
        total:
          description: The total number of assets.
          format: int64
          type: integer
        items:
          description: The assets.
          items:
            $ref: '#/components/schemas/AssetDto'
          type: array
      required:
      - items
    AssetDto_allOf:
      properties:
        id:
          description: The id of the asset.
          format: guid
          type: string
        parentId:
          description: The id of the parent folder. Empty for files without parent.
          format: guid
          type: string
        fileName:
          description: The file name.
          minLength: 1
          type: string
        fileHash:
          description: The file hash.
          nullable: true
          type: string
        isProtected:
          description: True, when the asset is not public.
          type: boolean
        slug:
          description: The slug.
          minLength: 1
          type: string
        mimeType:
          description: The mime type.
          minLength: 1
          type: string
        fileType:
          description: The file type.
          minLength: 1
          type: string
        metadataText:
          description: The formatted text representation of the metadata.
          minLength: 1
          type: string
        metadata:
          additionalProperties:
            description: Any JSON type
          description: The asset metadata.
          type: object
        tags:
          description: The asset tags.
          items:
            type: string
          type: array
        fileSize:
          description: The size of the file in bytes.
          format: int64
          type: integer
        fileVersion:
          description: The version of the file.
          format: int64
          type: integer
        type:
          description: The type of the asset.
          oneOf:
          - $ref: '#/components/schemas/AssetType'
        createdBy:
          description: The user that has created the schema.
          type: string
        lastModifiedBy:
          description: The user that has updated the asset.
          type: string
        created:
          description: The date and time when the asset has been created.
          format: date-time
          type: string
        lastModified:
          description: The date and time when the asset has been modified last.
          format: date-time
          type: string
        version:
          description: The version of the asset.
          format: int64
          type: integer
        _meta:
          description: The metadata.
          oneOf:
          - $ref: '#/components/schemas/AssetMeta'
        isImage:
          description: Determines of the created file is an image.
          type: boolean
        pixelWidth:
          description: The width of the image in pixels if the asset is an image.
          format: int32
          nullable: true
          type: integer
        pixelHeight:
          description: The height of the image in pixels if the asset is an image.
          format: int32
          nullable: true
          type: integer
      required:
      - createdBy
      - fileName
      - fileType
      - lastModifiedBy
      - metadata
      - metadataText
      - mimeType
      - slug
      - tags
    ClientsDto_allOf:
      properties:
        items:
          description: The clients.
          items:
            $ref: '#/components/schemas/ClientDto'
          type: array
      required:
      - items
    ClientDto_allOf:
      properties:
        id:
          description: The client id.
          minLength: 1
          type: string
        secret:
          description: The client secret.
          minLength: 1
          type: string
        name:
          description: The client name.
          minLength: 1
          type: string
        role:
          description: The role of the client.
          nullable: true
          type: string
      required:
      - id
      - name
      - secret
    ContributorsDto_allOf:
      properties:
        items:
          description: The contributors.
          items:
            $ref: '#/components/schemas/ContributorDto'
          type: array
        maxContributors:
          description: The maximum number of allowed contributors.
          format: int32
          type: integer
        _meta:
          description: The metadata to provide information about this request.
          oneOf:
          - $ref: '#/components/schemas/ContributorsMetadata'
      required:
      - items
    ContributorDto_allOf:
      properties:
        contributorId:
          description: The id of the user that contributes to the app.
          minLength: 1
          type: string
        contributorName:
          description: The display name.
          minLength: 1
          type: string
        contributorEmail:
          description: The email address.
          minLength: 1
          type: string
        role:
          description: The role of the contributor.
          nullable: true
          type: string
      required:
      - contributorEmail
      - contributorId
      - contributorName
    AppLanguagesDto_allOf:
      properties:
        items:
          description: The languages.
          items:
            $ref: '#/components/schemas/AppLanguageDto'
          type: array
      required:
      - items
    AppLanguageDto_allOf:
      properties:
        iso2Code:
          description: The iso code of the language.
          minLength: 1
          type: string
        englishName:
          description: The english name of the language.
          minLength: 1
          type: string
        fallback:
          description: The fallback languages.
          items:
            type: string
          type: array
        isMaster:
          description: Indicates if the language is the master language.
          type: boolean
        isOptional:
          description: Indicates if the language is optional.
          type: boolean
      required:
      - englishName
      - fallback
      - iso2Code
    PatternsDto_allOf:
      properties:
        items:
          description: The patterns.
          items:
            $ref: '#/components/schemas/PatternDto'
          type: array
      required:
      - items
    PatternDto_allOf:
      properties:
        id:
          description: Unique id of the pattern.
          format: guid
          type: string
        name:
          description: The name of the suggestion.
          minLength: 1
          type: string
        pattern:
          description: The regex pattern.
          minLength: 1
          type: string
        message:
          description: The regex message.
          nullable: true
          type: string
      required:
      - name
      - pattern
    RolesDto_allOf:
      properties:
        items:
          description: The roles.
          items:
            $ref: '#/components/schemas/RoleDto'
          type: array
      required:
      - items
    RoleDto_allOf:
      properties:
        name:
          description: The role name.
          minLength: 1
          type: string
        numClients:
          description: The number of clients with this role.
          format: int32
          type: integer
        numContributors:
          description: The number of contributors with this role.
          format: int32
          type: integer
        isDefaultRole:
          description: Indicates if the role is an builtin default role.
          type: boolean
        permissions:
          description: Associated list of permissions.
          items:
            type: string
          type: array
      required:
      - name
      - permissions
    AppDto_allOf:
      properties:
        name:
          description: The name of the app.
          minLength: 1
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          type: string
        label:
          description: The optional label of the app.
          nullable: true
          type: string
        description:
          description: The optional description of the app.
          nullable: true
          type: string
        version:
          description: The version of the app.
          format: int64
          type: integer
        id:
          description: The id of the app.
          format: guid
          type: string
        created:
          description: The timestamp when the app has been created.
          format: date-time
          type: string
        lastModified:
          description: The timestamp when the app has been modified last.
          format: date-time
          type: string
        permissions:
          description: The permission level of the user.
          items:
            type: string
          type: array
        canAccessApi:
          description: Indicates if the user can access the api.
          type: boolean
        canAccessContent:
          description: Indicates if the user can access at least one content.
          type: boolean
        planName:
          description: Gets the current plan name.
          nullable: true
          type: string
        planUpgrade:
          description: Gets the next plan name.
          nullable: true
          type: string
      required:
      - name
    WorkflowsDto_allOf:
      properties:
        items:
          description: The workflow.
          items:
            $ref: '#/components/schemas/WorkflowDto'
          type: array
        errors:
          description: The errros that should be fixed.
          items:
            type: string
          type: array
      required:
      - errors
      - items
    WorkflowDto_allOf:
      properties:
        id:
          description: The workflow id.
          format: guid
          type: string
        name:
          description: The name of the workflow.
          nullable: true
          type: string
        steps:
          additionalProperties:
            $ref: '#/components/schemas/WorkflowStepDto'
          description: The workflow steps.
          type: object
        schemaIds:
          description: The schema ids.
          items:
            format: guid
            type: string
          nullable: true
          type: array
        initial:
          description: The initial step.
          type: string
      required:
      - steps
    WebhookRuleActionDto_allOf:
      properties:
        url:
          description: The url to the webhook.
          format: uri
          minLength: 1
          title: Url
          type: string
        sharedSecret:
          description: The shared secret that is used to calculate the signature.
          nullable: true
          title: Shared Secret
          type: string
        payload:
          description: The optional custom request payload.
          nullable: true
          title: Payload
          type: string
      required:
      - url
    TweetRuleActionDto_allOf:
      properties:
        accessToken:
          description: ' The generated access token.'
          minLength: 1
          title: Access Token
          type: string
        accessSecret:
          description: ' The generated access secret.'
          minLength: 1
          title: Access Secret
          type: string
        text:
          description: The text that is sent as tweet to twitter.
          minLength: 1
          title: Text
          type: string
      required:
      - accessSecret
      - accessToken
      - text
    SlackRuleActionDto_allOf:
      properties:
        webhookUrl:
          description: The slack webhook url.
          format: uri
          minLength: 1
          title: Webhook Url
          type: string
        text:
          description: The text that is sent as message to slack.
          minLength: 1
          title: Text
          type: string
      required:
      - text
      - webhookUrl
    PrerenderRuleActionDto_allOf:
      properties:
        token:
          description: The prerender token from your account.
          minLength: 1
          title: Token
          type: string
        url:
          description: The url to recache.
          minLength: 1
          title: Url
          type: string
      required:
      - token
      - url
    NotificationRuleActionDto_allOf:
      properties:
        user:
          description: The user id or email.
          minLength: 1
          title: User
          type: string
        text:
          description: The text to send.
          minLength: 1
          title: Title
          type: string
        url:
          description: The optional url to attach to the notification.
          nullable: true
          title: Url
          type: string
        client:
          description: An optional client name.
          nullable: true
          title: Client
          type: string
      required:
      - text
      - user
    MediumRuleActionDto_allOf:
      properties:
        accessToken:
          description: The self issued access token.
          minLength: 1
          title: Access Token
          type: string
        title:
          description: The title, used for the url.
          minLength: 1
          title: Title
          type: string
        content:
          description: The content, either html or markdown.
          minLength: 1
          title: Content
          type: string
        canonicalUrl:
          description: The original home of this content, if it was originally published
            elsewhere.
          nullable: true
          title: Canonical Url
          type: string
        tags:
          description: The optional comma separated list of tags.
          nullable: true
          title: Tags
          type: string
        publicationId:
          description: Optional publication id.
          nullable: true
          title: Publication Id
          type: string
        isHtml:
          description: Indicates whether the content is markdown or html.
          title: Is Html
          type: boolean
      required:
      - accessToken
      - content
      - title
    FastlyRuleActionDto_allOf:
      properties:
        apiKey:
          description: The API key to grant access to Squidex.
          minLength: 1
          title: Api Key
          type: string
        serviceId:
          description: The ID of the fastly service.
          minLength: 1
          title: Service Id
          type: string
      required:
      - apiKey
      - serviceId
    EmailRuleActionDto_allOf:
      properties:
        serverHost:
          description: The IP address or host to the SMTP server.
          minLength: 1
          title: Server Host
          type: string
        serverPort:
          description: The port to the SMTP server.
          format: int32
          title: Server Port
          type: integer
        serverUseSsl:
          description: Specify whether the SMPT client uses Secure Sockets Layer (SSL)
            to encrypt the connection.
          title: Use SSL
          type: boolean
        serverPassword:
          description: The password for the SMTP server.
          minLength: 1
          title: Password
          type: string
        serverUsername:
          description: The username for the SMTP server.
          minLength: 1
          title: Username
          type: string
        messageFrom:
          description: The email sending address.
          minLength: 1
          title: From Address
          type: string
        messageTo:
          description: The email message will be sent to.
          minLength: 1
          title: To Address
          type: string
        messageSubject:
          description: The subject line for this email message.
          minLength: 1
          title: Subject
          type: string
        messageBody:
          description: The message body.
          minLength: 1
          title: Body
          type: string
      required:
      - messageBody
      - messageFrom
      - messageSubject
      - messageTo
      - serverHost
      - serverPassword
      - serverPort
      - serverUseSsl
      - serverUsername
    ElasticSearchRuleActionDto_allOf:
      properties:
        host:
          description: The url to the elastic search instance or cluster.
          format: uri
          minLength: 1
          title: Server Url
          type: string
        indexName:
          description: The name of the index.
          minLength: 1
          title: Index Name
          type: string
        indexType:
          description: The name of the index type.
          minLength: 1
          title: Index Type
          type: string
        username:
          description: The optional username.
          nullable: true
          title: Username
          type: string
        password:
          description: The optional password.
          nullable: true
          title: Password
          type: string
      required:
      - host
      - indexName
      - indexType
    DiscourseRuleActionDto_allOf:
      properties:
        url:
          description: The url to the discourse server.
          format: uri
          minLength: 1
          title: Server Url
          type: string
        apiKey:
          description: The api key to authenticate to your discourse server.
          minLength: 1
          title: Api Key
          type: string
        apiUsername:
          description: The api username to authenticate to your discourse server.
          minLength: 1
          title: Api User
          type: string
        text:
          description: The text as markdown.
          minLength: 1
          title: Text
          type: string
        title:
          description: The optional title when creating new topics.
          nullable: true
          title: Title
          type: string
        topic:
          description: The optional topic id.
          format: int32
          nullable: true
          title: Topic
          type: integer
        category:
          description: The optional category id.
          format: int32
          nullable: true
          title: Category
          type: integer
      required:
      - apiKey
      - apiUsername
      - text
      - url
    CommentRuleActionDto_allOf:
      properties:
        text:
          description: The comment text.
          minLength: 1
          title: Text
          type: string
        client:
          description: An optional client name.
          nullable: true
          title: Client
          type: string
      required:
      - text
    AzureQueueRuleActionDto_allOf:
      properties:
        connectionString:
          description: The connection string to the storage account.
          minLength: 1
          title: Connection
          type: string
        queue:
          description: The name of the queue.
          minLength: 1
          title: Queue
          type: string
      required:
      - connectionString
      - queue
    AlgoliaRuleActionDto_allOf:
      properties:
        appId:
          description: The application ID.
          minLength: 1
          title: Application Id
          type: string
        apiKey:
          description: The API key to grant access to Squidex.
          minLength: 1
          title: Api Key
          type: string
        indexName:
          description: The name of the index.
          minLength: 1
          title: Index Name
          type: string
        document:
          description: The optional custom document.
          nullable: true
          title: Document
          type: string
      required:
      - apiKey
      - appId
      - indexName
  securitySchemes:
    squidex-oauth-auth:
      description: "Squidex uses oauth2 client authentication. Read more about it\
        \ at: https://oauth.net/2/ and https://tools.ietf.org/html/rfc6750.\n\nTo\
        \ retrieve an access token, the client id must make a request to the token\
        \ url. For example:\n\n    $ curl\n        -X POST 'https://squidex-embracecloudte.features.embracecloud.io/identity-server/connect/token'\
        \ \n        -H 'Content-Type: application/x-www-form-urlencoded' \n      \
        \  -d 'grant_type=client_credentials&\n            client_id=[APP_NAME]:[CLIENT_ID]&\n\
        \            client_secret=[CLIENT_SECRET]&\n\t\t\tscope=squidex-api'\n\n\
        `[APP_NAME]` is the name of your app. You have to create a client to generate\
        \ an access token.\n\nYou must send this token in the `Authorization` header\
        \ when making requests to the API:\n\n     Authorization: Bearer <token>"
      flows:
        clientCredentials:
          scopes:
            squidex-api: Read and write access to the API
          tokenUrl: https://squidex-embracecloudte.features.embracecloud.io/identity-server/connect/token
      type: oauth2
x-generator: NSwag v13.2.2.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0))
