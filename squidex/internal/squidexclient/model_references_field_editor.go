/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// ReferencesFieldEditor 
type ReferencesFieldEditor string

// List of ReferencesFieldEditor
const (
	ReferencesFieldEditorLIST ReferencesFieldEditor = "List"
	ReferencesFieldEditorDROPDOWN ReferencesFieldEditor = "Dropdown"
	ReferencesFieldEditorTAGS ReferencesFieldEditor = "Tags"
	ReferencesFieldEditorCHECKBOXES ReferencesFieldEditor = "Checkboxes"
	ReferencesFieldEditorINPUT ReferencesFieldEditor = "Input"
)

// All allowed values of ReferencesFieldEditor enum
var AllowedReferencesFieldEditorEnumValues = []ReferencesFieldEditor{
	"List",
	"Dropdown",
	"Tags",
	"Checkboxes",
	"Input",
}

func (v *ReferencesFieldEditor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReferencesFieldEditor(value)
	for _, existing := range AllowedReferencesFieldEditorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReferencesFieldEditor", value)
}

// NewReferencesFieldEditorFromValue returns a pointer to a valid ReferencesFieldEditor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReferencesFieldEditorFromValue(v string) (*ReferencesFieldEditor, error) {
	ev := ReferencesFieldEditor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReferencesFieldEditor: valid values are %v", v, AllowedReferencesFieldEditorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReferencesFieldEditor) IsValid() bool {
	for _, existing := range AllowedReferencesFieldEditorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReferencesFieldEditor value
func (v ReferencesFieldEditor) Ptr() *ReferencesFieldEditor {
	return &v
}

type NullableReferencesFieldEditor struct {
	value *ReferencesFieldEditor
	isSet bool
}

func (v NullableReferencesFieldEditor) Get() *ReferencesFieldEditor {
	return v.value
}

func (v *NullableReferencesFieldEditor) Set(val *ReferencesFieldEditor) {
	v.value = val
	v.isSet = true
}

func (v NullableReferencesFieldEditor) IsSet() bool {
	return v.isSet
}

func (v *NullableReferencesFieldEditor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferencesFieldEditor(val *ReferencesFieldEditor) *NullableReferencesFieldEditor {
	return &NullableReferencesFieldEditor{value: val, isSet: true}
}

func (v NullableReferencesFieldEditor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferencesFieldEditor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

