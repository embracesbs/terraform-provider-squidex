/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AppLanguageDto struct for AppLanguageDto
type AppLanguageDto struct {
	// The links.
	Links map[string]ResourceLink `json:"_links"`
	// The iso code of the language.
	Iso2Code string `json:"iso2Code"`
	// The english name of the language.
	EnglishName string `json:"englishName"`
	// The fallback languages.
	Fallback []string `json:"fallback"`
	// Indicates if the language is the master language.
	IsMaster *bool `json:"isMaster,omitempty"`
	// Indicates if the language is optional.
	IsOptional *bool `json:"isOptional,omitempty"`
}

// NewAppLanguageDto instantiates a new AppLanguageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppLanguageDto(links map[string]ResourceLink, iso2Code string, englishName string, fallback []string) *AppLanguageDto {
	this := AppLanguageDto{}
	this.Links = links
	this.Iso2Code = iso2Code
	this.EnglishName = englishName
	this.Fallback = fallback
	return &this
}

// NewAppLanguageDtoWithDefaults instantiates a new AppLanguageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppLanguageDtoWithDefaults() *AppLanguageDto {
	this := AppLanguageDto{}
	return &this
}

// GetLinks returns the Links field value
func (o *AppLanguageDto) GetLinks() map[string]ResourceLink {
	if o == nil {
		var ret map[string]ResourceLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *AppLanguageDto) GetLinksOk() (*map[string]ResourceLink, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *AppLanguageDto) SetLinks(v map[string]ResourceLink) {
	o.Links = v
}

// GetIso2Code returns the Iso2Code field value
func (o *AppLanguageDto) GetIso2Code() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iso2Code
}

// GetIso2CodeOk returns a tuple with the Iso2Code field value
// and a boolean to check if the value has been set.
func (o *AppLanguageDto) GetIso2CodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Iso2Code, true
}

// SetIso2Code sets field value
func (o *AppLanguageDto) SetIso2Code(v string) {
	o.Iso2Code = v
}

// GetEnglishName returns the EnglishName field value
func (o *AppLanguageDto) GetEnglishName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnglishName
}

// GetEnglishNameOk returns a tuple with the EnglishName field value
// and a boolean to check if the value has been set.
func (o *AppLanguageDto) GetEnglishNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EnglishName, true
}

// SetEnglishName sets field value
func (o *AppLanguageDto) SetEnglishName(v string) {
	o.EnglishName = v
}

// GetFallback returns the Fallback field value
func (o *AppLanguageDto) GetFallback() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Fallback
}

// GetFallbackOk returns a tuple with the Fallback field value
// and a boolean to check if the value has been set.
func (o *AppLanguageDto) GetFallbackOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Fallback, true
}

// SetFallback sets field value
func (o *AppLanguageDto) SetFallback(v []string) {
	o.Fallback = v
}

// GetIsMaster returns the IsMaster field value if set, zero value otherwise.
func (o *AppLanguageDto) GetIsMaster() bool {
	if o == nil || isNil(o.IsMaster) {
		var ret bool
		return ret
	}
	return *o.IsMaster
}

// GetIsMasterOk returns a tuple with the IsMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppLanguageDto) GetIsMasterOk() (*bool, bool) {
	if o == nil || isNil(o.IsMaster) {
    return nil, false
	}
	return o.IsMaster, true
}

// HasIsMaster returns a boolean if a field has been set.
func (o *AppLanguageDto) HasIsMaster() bool {
	if o != nil && !isNil(o.IsMaster) {
		return true
	}

	return false
}

// SetIsMaster gets a reference to the given bool and assigns it to the IsMaster field.
func (o *AppLanguageDto) SetIsMaster(v bool) {
	o.IsMaster = &v
}

// GetIsOptional returns the IsOptional field value if set, zero value otherwise.
func (o *AppLanguageDto) GetIsOptional() bool {
	if o == nil || isNil(o.IsOptional) {
		var ret bool
		return ret
	}
	return *o.IsOptional
}

// GetIsOptionalOk returns a tuple with the IsOptional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppLanguageDto) GetIsOptionalOk() (*bool, bool) {
	if o == nil || isNil(o.IsOptional) {
    return nil, false
	}
	return o.IsOptional, true
}

// HasIsOptional returns a boolean if a field has been set.
func (o *AppLanguageDto) HasIsOptional() bool {
	if o != nil && !isNil(o.IsOptional) {
		return true
	}

	return false
}

// SetIsOptional gets a reference to the given bool and assigns it to the IsOptional field.
func (o *AppLanguageDto) SetIsOptional(v bool) {
	o.IsOptional = &v
}

func (o AppLanguageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_links"] = o.Links
	}
	if true {
		toSerialize["iso2Code"] = o.Iso2Code
	}
	if true {
		toSerialize["englishName"] = o.EnglishName
	}
	if true {
		toSerialize["fallback"] = o.Fallback
	}
	if !isNil(o.IsMaster) {
		toSerialize["isMaster"] = o.IsMaster
	}
	if !isNil(o.IsOptional) {
		toSerialize["isOptional"] = o.IsOptional
	}
	return json.Marshal(toSerialize)
}

type NullableAppLanguageDto struct {
	value *AppLanguageDto
	isSet bool
}

func (v NullableAppLanguageDto) Get() *AppLanguageDto {
	return v.value
}

func (v *NullableAppLanguageDto) Set(val *AppLanguageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppLanguageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppLanguageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppLanguageDto(val *AppLanguageDto) *NullableAppLanguageDto {
	return &NullableAppLanguageDto{value: val, isSet: true}
}

func (v NullableAppLanguageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppLanguageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


