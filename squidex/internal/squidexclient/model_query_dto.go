/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// QueryDto struct for QueryDto
type QueryDto struct {
	// The optional list of ids to query.
	Ids []string `json:"ids,omitempty"`
	// The optional odata query.
	OData NullableString `json:"oData,omitempty"`
	// The optional json query.
	Q interface{} `json:"q,omitempty"`
	// The parent id (for assets).
	ParentId NullableString `json:"parentId,omitempty"`
}

// NewQueryDto instantiates a new QueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDto() *QueryDto {
	this := QueryDto{}
	return &this
}

// NewQueryDtoWithDefaults instantiates a new QueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDtoWithDefaults() *QueryDto {
	this := QueryDto{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDto) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDto) GetIdsOk() ([]string, bool) {
	if o == nil || isNil(o.Ids) {
    return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *QueryDto) HasIds() bool {
	if o != nil && isNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *QueryDto) SetIds(v []string) {
	o.Ids = v
}

// GetOData returns the OData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDto) GetOData() string {
	if o == nil || isNil(o.OData.Get()) {
		var ret string
		return ret
	}
	return *o.OData.Get()
}

// GetODataOk returns a tuple with the OData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDto) GetODataOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.OData.Get(), o.OData.IsSet()
}

// HasOData returns a boolean if a field has been set.
func (o *QueryDto) HasOData() bool {
	if o != nil && o.OData.IsSet() {
		return true
	}

	return false
}

// SetOData gets a reference to the given NullableString and assigns it to the OData field.
func (o *QueryDto) SetOData(v string) {
	o.OData.Set(&v)
}
// SetODataNil sets the value for OData to be an explicit nil
func (o *QueryDto) SetODataNil() {
	o.OData.Set(nil)
}

// UnsetOData ensures that no value is present for OData, not even an explicit nil
func (o *QueryDto) UnsetOData() {
	o.OData.Unset()
}

// GetQ returns the Q field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDto) GetQ() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDto) GetQOk() (*interface{}, bool) {
	if o == nil || isNil(o.Q) {
    return nil, false
	}
	return &o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *QueryDto) HasQ() bool {
	if o != nil && isNil(o.Q) {
		return true
	}

	return false
}

// SetQ gets a reference to the given interface{} and assigns it to the Q field.
func (o *QueryDto) SetQ(v interface{}) {
	o.Q = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDto) GetParentId() string {
	if o == nil || isNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDto) GetParentIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *QueryDto) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *QueryDto) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *QueryDto) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *QueryDto) UnsetParentId() {
	o.ParentId.Unset()
}

func (o QueryDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.OData.IsSet() {
		toSerialize["oData"] = o.OData.Get()
	}
	if o.Q != nil {
		toSerialize["q"] = o.Q
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableQueryDto struct {
	value *QueryDto
	isSet bool
}

func (v NullableQueryDto) Get() *QueryDto {
	return v.value
}

func (v *NullableQueryDto) Set(val *QueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDto(val *QueryDto) *NullableQueryDto {
	return &NullableQueryDto{value: val, isSet: true}
}

func (v NullableQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


