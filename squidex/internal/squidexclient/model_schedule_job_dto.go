/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"time"
)

// ScheduleJobDto struct for ScheduleJobDto
type ScheduleJobDto struct {
	// The id of the schedule job.
	Id *string `json:"id,omitempty"`
	// The new status.
	Status *string `json:"status,omitempty"`
	// The target date and time when the content should be scheduled.
	DueTime *time.Time `json:"dueTime,omitempty"`
	// The color of the scheduled status.
	Color *string `json:"color,omitempty"`
	// The user who schedule the content.
	ScheduledBy string `json:"scheduledBy"`
}

// NewScheduleJobDto instantiates a new ScheduleJobDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleJobDto(scheduledBy string) *ScheduleJobDto {
	this := ScheduleJobDto{}
	this.ScheduledBy = scheduledBy
	return &this
}

// NewScheduleJobDtoWithDefaults instantiates a new ScheduleJobDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleJobDtoWithDefaults() *ScheduleJobDto {
	this := ScheduleJobDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScheduleJobDto) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleJobDto) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScheduleJobDto) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScheduleJobDto) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ScheduleJobDto) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleJobDto) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ScheduleJobDto) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ScheduleJobDto) SetStatus(v string) {
	o.Status = &v
}

// GetDueTime returns the DueTime field value if set, zero value otherwise.
func (o *ScheduleJobDto) GetDueTime() time.Time {
	if o == nil || isNil(o.DueTime) {
		var ret time.Time
		return ret
	}
	return *o.DueTime
}

// GetDueTimeOk returns a tuple with the DueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleJobDto) GetDueTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.DueTime) {
    return nil, false
	}
	return o.DueTime, true
}

// HasDueTime returns a boolean if a field has been set.
func (o *ScheduleJobDto) HasDueTime() bool {
	if o != nil && !isNil(o.DueTime) {
		return true
	}

	return false
}

// SetDueTime gets a reference to the given time.Time and assigns it to the DueTime field.
func (o *ScheduleJobDto) SetDueTime(v time.Time) {
	o.DueTime = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ScheduleJobDto) GetColor() string {
	if o == nil || isNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleJobDto) GetColorOk() (*string, bool) {
	if o == nil || isNil(o.Color) {
    return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ScheduleJobDto) HasColor() bool {
	if o != nil && !isNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *ScheduleJobDto) SetColor(v string) {
	o.Color = &v
}

// GetScheduledBy returns the ScheduledBy field value
func (o *ScheduleJobDto) GetScheduledBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduledBy
}

// GetScheduledByOk returns a tuple with the ScheduledBy field value
// and a boolean to check if the value has been set.
func (o *ScheduleJobDto) GetScheduledByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ScheduledBy, true
}

// SetScheduledBy sets field value
func (o *ScheduleJobDto) SetScheduledBy(v string) {
	o.ScheduledBy = v
}

func (o ScheduleJobDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.DueTime) {
		toSerialize["dueTime"] = o.DueTime
	}
	if !isNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if true {
		toSerialize["scheduledBy"] = o.ScheduledBy
	}
	return json.Marshal(toSerialize)
}

type NullableScheduleJobDto struct {
	value *ScheduleJobDto
	isSet bool
}

func (v NullableScheduleJobDto) Get() *ScheduleJobDto {
	return v.value
}

func (v *NullableScheduleJobDto) Set(val *ScheduleJobDto) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleJobDto) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleJobDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleJobDto(val *ScheduleJobDto) *NullableScheduleJobDto {
	return &NullableScheduleJobDto{value: val, isSet: true}
}

func (v NullableScheduleJobDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleJobDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


