/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// UpsertSchemaNestedFieldDto struct for UpsertSchemaNestedFieldDto
type UpsertSchemaNestedFieldDto struct {
	// The name of the field. Must be unique within the schema.
	Name string `json:"name"`
	// Defines if the field is hidden.
	IsHidden *bool `json:"isHidden,omitempty"`
	// Defines if the field is locked.
	IsLocked *bool `json:"isLocked,omitempty"`
	// Defines if the field is disabled.
	IsDisabled *bool `json:"isDisabled,omitempty"`
	Properties FieldPropertiesDto `json:"properties"`
}

// NewUpsertSchemaNestedFieldDto instantiates a new UpsertSchemaNestedFieldDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertSchemaNestedFieldDto(name string, properties FieldPropertiesDto) *UpsertSchemaNestedFieldDto {
	this := UpsertSchemaNestedFieldDto{}
	this.Name = name
	this.Properties = properties
	return &this
}

// NewUpsertSchemaNestedFieldDtoWithDefaults instantiates a new UpsertSchemaNestedFieldDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertSchemaNestedFieldDtoWithDefaults() *UpsertSchemaNestedFieldDto {
	this := UpsertSchemaNestedFieldDto{}
	return &this
}

// GetName returns the Name field value
func (o *UpsertSchemaNestedFieldDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpsertSchemaNestedFieldDto) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpsertSchemaNestedFieldDto) SetName(v string) {
	o.Name = v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *UpsertSchemaNestedFieldDto) GetIsHidden() bool {
	if o == nil || isNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaNestedFieldDto) GetIsHiddenOk() (*bool, bool) {
	if o == nil || isNil(o.IsHidden) {
    return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *UpsertSchemaNestedFieldDto) HasIsHidden() bool {
	if o != nil && !isNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *UpsertSchemaNestedFieldDto) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *UpsertSchemaNestedFieldDto) GetIsLocked() bool {
	if o == nil || isNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaNestedFieldDto) GetIsLockedOk() (*bool, bool) {
	if o == nil || isNil(o.IsLocked) {
    return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *UpsertSchemaNestedFieldDto) HasIsLocked() bool {
	if o != nil && !isNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *UpsertSchemaNestedFieldDto) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *UpsertSchemaNestedFieldDto) GetIsDisabled() bool {
	if o == nil || isNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaNestedFieldDto) GetIsDisabledOk() (*bool, bool) {
	if o == nil || isNil(o.IsDisabled) {
    return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *UpsertSchemaNestedFieldDto) HasIsDisabled() bool {
	if o != nil && !isNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *UpsertSchemaNestedFieldDto) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetProperties returns the Properties field value
func (o *UpsertSchemaNestedFieldDto) GetProperties() FieldPropertiesDto {
	if o == nil {
		var ret FieldPropertiesDto
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *UpsertSchemaNestedFieldDto) GetPropertiesOk() (*FieldPropertiesDto, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *UpsertSchemaNestedFieldDto) SetProperties(v FieldPropertiesDto) {
	o.Properties = v
}

func (o UpsertSchemaNestedFieldDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !isNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	if !isNil(o.IsDisabled) {
		toSerialize["isDisabled"] = o.IsDisabled
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableUpsertSchemaNestedFieldDto struct {
	value *UpsertSchemaNestedFieldDto
	isSet bool
}

func (v NullableUpsertSchemaNestedFieldDto) Get() *UpsertSchemaNestedFieldDto {
	return v.value
}

func (v *NullableUpsertSchemaNestedFieldDto) Set(val *UpsertSchemaNestedFieldDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertSchemaNestedFieldDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertSchemaNestedFieldDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertSchemaNestedFieldDto(val *UpsertSchemaNestedFieldDto) *NullableUpsertSchemaNestedFieldDto {
	return &NullableUpsertSchemaNestedFieldDto{value: val, isSet: true}
}

func (v NullableUpsertSchemaNestedFieldDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertSchemaNestedFieldDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


