/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// HistoryEventDto struct for HistoryEventDto
type HistoryEventDto struct {
	// The message for the event.
	Message string `json:"message"`
	// The type of the original event.
	EventType string `json:"eventType"`
	// The user who called the action.
	Actor string `json:"actor"`
	// Gets a unique id for the event.
	EventId *string `json:"eventId,omitempty"`
	// The time when the event happened.
	Created *time.Time `json:"created,omitempty"`
	// The version identifier.
	Version *int64 `json:"version,omitempty"`
}

// NewHistoryEventDto instantiates a new HistoryEventDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryEventDto(message string, eventType string, actor string) *HistoryEventDto {
	this := HistoryEventDto{}
	this.Message = message
	this.EventType = eventType
	this.Actor = actor
	return &this
}

// NewHistoryEventDtoWithDefaults instantiates a new HistoryEventDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryEventDtoWithDefaults() *HistoryEventDto {
	this := HistoryEventDto{}
	return &this
}

// GetMessage returns the Message field value
func (o *HistoryEventDto) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *HistoryEventDto) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *HistoryEventDto) SetMessage(v string) {
	o.Message = v
}

// GetEventType returns the EventType field value
func (o *HistoryEventDto) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *HistoryEventDto) GetEventTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *HistoryEventDto) SetEventType(v string) {
	o.EventType = v
}

// GetActor returns the Actor field value
func (o *HistoryEventDto) GetActor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *HistoryEventDto) GetActorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *HistoryEventDto) SetActor(v string) {
	o.Actor = v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *HistoryEventDto) GetEventId() string {
	if o == nil || isNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEventDto) GetEventIdOk() (*string, bool) {
	if o == nil || isNil(o.EventId) {
    return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *HistoryEventDto) HasEventId() bool {
	if o != nil && !isNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *HistoryEventDto) SetEventId(v string) {
	o.EventId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *HistoryEventDto) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEventDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
    return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *HistoryEventDto) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *HistoryEventDto) SetCreated(v time.Time) {
	o.Created = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HistoryEventDto) GetVersion() int64 {
	if o == nil || isNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEventDto) GetVersionOk() (*int64, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HistoryEventDto) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *HistoryEventDto) SetVersion(v int64) {
	o.Version = &v
}

func (o HistoryEventDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["actor"] = o.Actor
	}
	if !isNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableHistoryEventDto struct {
	value *HistoryEventDto
	isSet bool
}

func (v NullableHistoryEventDto) Get() *HistoryEventDto {
	return v.value
}

func (v *NullableHistoryEventDto) Set(val *HistoryEventDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryEventDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryEventDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryEventDto(val *HistoryEventDto) *NullableHistoryEventDto {
	return &NullableHistoryEventDto{value: val, isSet: true}
}

func (v NullableHistoryEventDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryEventDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


