/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ResourcesDto struct for ResourcesDto
type ResourcesDto struct {
	// The links.
	Links map[string]ResourceLink `json:"_links"`
}

// NewResourcesDto instantiates a new ResourcesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcesDto(links map[string]ResourceLink) *ResourcesDto {
	this := ResourcesDto{}
	this.Links = links
	return &this
}

// NewResourcesDtoWithDefaults instantiates a new ResourcesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcesDtoWithDefaults() *ResourcesDto {
	this := ResourcesDto{}
	return &this
}

// GetLinks returns the Links field value
func (o *ResourcesDto) GetLinks() map[string]ResourceLink {
	if o == nil {
		var ret map[string]ResourceLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ResourcesDto) GetLinksOk() (*map[string]ResourceLink, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *ResourcesDto) SetLinks(v map[string]ResourceLink) {
	o.Links = v
}

func (o ResourcesDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableResourcesDto struct {
	value *ResourcesDto
	isSet bool
}

func (v NullableResourcesDto) Get() *ResourcesDto {
	return v.value
}

func (v *NullableResourcesDto) Set(val *ResourcesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesDto(val *ResourcesDto) *NullableResourcesDto {
	return &NullableResourcesDto{value: val, isSet: true}
}

func (v NullableResourcesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


