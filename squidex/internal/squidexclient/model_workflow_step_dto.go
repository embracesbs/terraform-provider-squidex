/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// WorkflowStepDto struct for WorkflowStepDto
type WorkflowStepDto struct {
	// The transitions.
	Transitions map[string]WorkflowTransitionDto `json:"transitions"`
	// The optional color.
	Color NullableString `json:"color,omitempty"`
	// True if the content should be validated when moving to this step.
	Validate *bool `json:"validate,omitempty"`
	// Indicates if updates should not be allowed.
	NoUpdate *bool `json:"noUpdate,omitempty"`
	// Optional expression that must evaluate to true when you want to prevent updates.
	NoUpdateExpression NullableString `json:"noUpdateExpression,omitempty"`
	// Optional list of roles to restrict the updates for users with these roles.
	NoUpdateRoles []string `json:"noUpdateRoles,omitempty"`
}

// NewWorkflowStepDto instantiates a new WorkflowStepDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowStepDto(transitions map[string]WorkflowTransitionDto) *WorkflowStepDto {
	this := WorkflowStepDto{}
	this.Transitions = transitions
	return &this
}

// NewWorkflowStepDtoWithDefaults instantiates a new WorkflowStepDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowStepDtoWithDefaults() *WorkflowStepDto {
	this := WorkflowStepDto{}
	return &this
}

// GetTransitions returns the Transitions field value
func (o *WorkflowStepDto) GetTransitions() map[string]WorkflowTransitionDto {
	if o == nil {
		var ret map[string]WorkflowTransitionDto
		return ret
	}

	return o.Transitions
}

// GetTransitionsOk returns a tuple with the Transitions field value
// and a boolean to check if the value has been set.
func (o *WorkflowStepDto) GetTransitionsOk() (*map[string]WorkflowTransitionDto, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Transitions, true
}

// SetTransitions sets field value
func (o *WorkflowStepDto) SetTransitions(v map[string]WorkflowTransitionDto) {
	o.Transitions = v
}

// GetColor returns the Color field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowStepDto) GetColor() string {
	if o == nil || isNil(o.Color.Get()) {
		var ret string
		return ret
	}
	return *o.Color.Get()
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowStepDto) GetColorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Color.Get(), o.Color.IsSet()
}

// HasColor returns a boolean if a field has been set.
func (o *WorkflowStepDto) HasColor() bool {
	if o != nil && o.Color.IsSet() {
		return true
	}

	return false
}

// SetColor gets a reference to the given NullableString and assigns it to the Color field.
func (o *WorkflowStepDto) SetColor(v string) {
	o.Color.Set(&v)
}
// SetColorNil sets the value for Color to be an explicit nil
func (o *WorkflowStepDto) SetColorNil() {
	o.Color.Set(nil)
}

// UnsetColor ensures that no value is present for Color, not even an explicit nil
func (o *WorkflowStepDto) UnsetColor() {
	o.Color.Unset()
}

// GetValidate returns the Validate field value if set, zero value otherwise.
func (o *WorkflowStepDto) GetValidate() bool {
	if o == nil || isNil(o.Validate) {
		var ret bool
		return ret
	}
	return *o.Validate
}

// GetValidateOk returns a tuple with the Validate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDto) GetValidateOk() (*bool, bool) {
	if o == nil || isNil(o.Validate) {
    return nil, false
	}
	return o.Validate, true
}

// HasValidate returns a boolean if a field has been set.
func (o *WorkflowStepDto) HasValidate() bool {
	if o != nil && !isNil(o.Validate) {
		return true
	}

	return false
}

// SetValidate gets a reference to the given bool and assigns it to the Validate field.
func (o *WorkflowStepDto) SetValidate(v bool) {
	o.Validate = &v
}

// GetNoUpdate returns the NoUpdate field value if set, zero value otherwise.
func (o *WorkflowStepDto) GetNoUpdate() bool {
	if o == nil || isNil(o.NoUpdate) {
		var ret bool
		return ret
	}
	return *o.NoUpdate
}

// GetNoUpdateOk returns a tuple with the NoUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDto) GetNoUpdateOk() (*bool, bool) {
	if o == nil || isNil(o.NoUpdate) {
    return nil, false
	}
	return o.NoUpdate, true
}

// HasNoUpdate returns a boolean if a field has been set.
func (o *WorkflowStepDto) HasNoUpdate() bool {
	if o != nil && !isNil(o.NoUpdate) {
		return true
	}

	return false
}

// SetNoUpdate gets a reference to the given bool and assigns it to the NoUpdate field.
func (o *WorkflowStepDto) SetNoUpdate(v bool) {
	o.NoUpdate = &v
}

// GetNoUpdateExpression returns the NoUpdateExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowStepDto) GetNoUpdateExpression() string {
	if o == nil || isNil(o.NoUpdateExpression.Get()) {
		var ret string
		return ret
	}
	return *o.NoUpdateExpression.Get()
}

// GetNoUpdateExpressionOk returns a tuple with the NoUpdateExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowStepDto) GetNoUpdateExpressionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.NoUpdateExpression.Get(), o.NoUpdateExpression.IsSet()
}

// HasNoUpdateExpression returns a boolean if a field has been set.
func (o *WorkflowStepDto) HasNoUpdateExpression() bool {
	if o != nil && o.NoUpdateExpression.IsSet() {
		return true
	}

	return false
}

// SetNoUpdateExpression gets a reference to the given NullableString and assigns it to the NoUpdateExpression field.
func (o *WorkflowStepDto) SetNoUpdateExpression(v string) {
	o.NoUpdateExpression.Set(&v)
}
// SetNoUpdateExpressionNil sets the value for NoUpdateExpression to be an explicit nil
func (o *WorkflowStepDto) SetNoUpdateExpressionNil() {
	o.NoUpdateExpression.Set(nil)
}

// UnsetNoUpdateExpression ensures that no value is present for NoUpdateExpression, not even an explicit nil
func (o *WorkflowStepDto) UnsetNoUpdateExpression() {
	o.NoUpdateExpression.Unset()
}

// GetNoUpdateRoles returns the NoUpdateRoles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowStepDto) GetNoUpdateRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NoUpdateRoles
}

// GetNoUpdateRolesOk returns a tuple with the NoUpdateRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowStepDto) GetNoUpdateRolesOk() ([]string, bool) {
	if o == nil || isNil(o.NoUpdateRoles) {
    return nil, false
	}
	return o.NoUpdateRoles, true
}

// HasNoUpdateRoles returns a boolean if a field has been set.
func (o *WorkflowStepDto) HasNoUpdateRoles() bool {
	if o != nil && isNil(o.NoUpdateRoles) {
		return true
	}

	return false
}

// SetNoUpdateRoles gets a reference to the given []string and assigns it to the NoUpdateRoles field.
func (o *WorkflowStepDto) SetNoUpdateRoles(v []string) {
	o.NoUpdateRoles = v
}

func (o WorkflowStepDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transitions"] = o.Transitions
	}
	if o.Color.IsSet() {
		toSerialize["color"] = o.Color.Get()
	}
	if !isNil(o.Validate) {
		toSerialize["validate"] = o.Validate
	}
	if !isNil(o.NoUpdate) {
		toSerialize["noUpdate"] = o.NoUpdate
	}
	if o.NoUpdateExpression.IsSet() {
		toSerialize["noUpdateExpression"] = o.NoUpdateExpression.Get()
	}
	if o.NoUpdateRoles != nil {
		toSerialize["noUpdateRoles"] = o.NoUpdateRoles
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowStepDto struct {
	value *WorkflowStepDto
	isSet bool
}

func (v NullableWorkflowStepDto) Get() *WorkflowStepDto {
	return v.value
}

func (v *NullableWorkflowStepDto) Set(val *WorkflowStepDto) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStepDto) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStepDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStepDto(val *WorkflowStepDto) *NullableWorkflowStepDto {
	return &NullableWorkflowStepDto{value: val, isSet: true}
}

func (v NullableWorkflowStepDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStepDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


