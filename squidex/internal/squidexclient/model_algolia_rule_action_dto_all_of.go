/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AlgoliaRuleActionDtoAllOf struct for AlgoliaRuleActionDtoAllOf
type AlgoliaRuleActionDtoAllOf struct {
	// The application ID.
	AppId string `json:"appId"`
	// The API key to grant access to Squidex.
	ApiKey string `json:"apiKey"`
	// The name of the index.
	IndexName string `json:"indexName"`
	// The optional custom document.
	Document NullableString `json:"document,omitempty"`
	// The condition when to delete the entry.
	Delete NullableString `json:"delete,omitempty"`
}

// NewAlgoliaRuleActionDtoAllOf instantiates a new AlgoliaRuleActionDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlgoliaRuleActionDtoAllOf(appId string, apiKey string, indexName string) *AlgoliaRuleActionDtoAllOf {
	this := AlgoliaRuleActionDtoAllOf{}
	this.AppId = appId
	this.ApiKey = apiKey
	this.IndexName = indexName
	return &this
}

// NewAlgoliaRuleActionDtoAllOfWithDefaults instantiates a new AlgoliaRuleActionDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlgoliaRuleActionDtoAllOfWithDefaults() *AlgoliaRuleActionDtoAllOf {
	this := AlgoliaRuleActionDtoAllOf{}
	return &this
}

// GetAppId returns the AppId field value
func (o *AlgoliaRuleActionDtoAllOf) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *AlgoliaRuleActionDtoAllOf) GetAppIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *AlgoliaRuleActionDtoAllOf) SetAppId(v string) {
	o.AppId = v
}

// GetApiKey returns the ApiKey field value
func (o *AlgoliaRuleActionDtoAllOf) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *AlgoliaRuleActionDtoAllOf) GetApiKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *AlgoliaRuleActionDtoAllOf) SetApiKey(v string) {
	o.ApiKey = v
}

// GetIndexName returns the IndexName field value
func (o *AlgoliaRuleActionDtoAllOf) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *AlgoliaRuleActionDtoAllOf) GetIndexNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *AlgoliaRuleActionDtoAllOf) SetIndexName(v string) {
	o.IndexName = v
}

// GetDocument returns the Document field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlgoliaRuleActionDtoAllOf) GetDocument() string {
	if o == nil || isNil(o.Document.Get()) {
		var ret string
		return ret
	}
	return *o.Document.Get()
}

// GetDocumentOk returns a tuple with the Document field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlgoliaRuleActionDtoAllOf) GetDocumentOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Document.Get(), o.Document.IsSet()
}

// HasDocument returns a boolean if a field has been set.
func (o *AlgoliaRuleActionDtoAllOf) HasDocument() bool {
	if o != nil && o.Document.IsSet() {
		return true
	}

	return false
}

// SetDocument gets a reference to the given NullableString and assigns it to the Document field.
func (o *AlgoliaRuleActionDtoAllOf) SetDocument(v string) {
	o.Document.Set(&v)
}
// SetDocumentNil sets the value for Document to be an explicit nil
func (o *AlgoliaRuleActionDtoAllOf) SetDocumentNil() {
	o.Document.Set(nil)
}

// UnsetDocument ensures that no value is present for Document, not even an explicit nil
func (o *AlgoliaRuleActionDtoAllOf) UnsetDocument() {
	o.Document.Unset()
}

// GetDelete returns the Delete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlgoliaRuleActionDtoAllOf) GetDelete() string {
	if o == nil || isNil(o.Delete.Get()) {
		var ret string
		return ret
	}
	return *o.Delete.Get()
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlgoliaRuleActionDtoAllOf) GetDeleteOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Delete.Get(), o.Delete.IsSet()
}

// HasDelete returns a boolean if a field has been set.
func (o *AlgoliaRuleActionDtoAllOf) HasDelete() bool {
	if o != nil && o.Delete.IsSet() {
		return true
	}

	return false
}

// SetDelete gets a reference to the given NullableString and assigns it to the Delete field.
func (o *AlgoliaRuleActionDtoAllOf) SetDelete(v string) {
	o.Delete.Set(&v)
}
// SetDeleteNil sets the value for Delete to be an explicit nil
func (o *AlgoliaRuleActionDtoAllOf) SetDeleteNil() {
	o.Delete.Set(nil)
}

// UnsetDelete ensures that no value is present for Delete, not even an explicit nil
func (o *AlgoliaRuleActionDtoAllOf) UnsetDelete() {
	o.Delete.Unset()
}

func (o AlgoliaRuleActionDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["appId"] = o.AppId
	}
	if true {
		toSerialize["apiKey"] = o.ApiKey
	}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if o.Document.IsSet() {
		toSerialize["document"] = o.Document.Get()
	}
	if o.Delete.IsSet() {
		toSerialize["delete"] = o.Delete.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAlgoliaRuleActionDtoAllOf struct {
	value *AlgoliaRuleActionDtoAllOf
	isSet bool
}

func (v NullableAlgoliaRuleActionDtoAllOf) Get() *AlgoliaRuleActionDtoAllOf {
	return v.value
}

func (v *NullableAlgoliaRuleActionDtoAllOf) Set(val *AlgoliaRuleActionDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAlgoliaRuleActionDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAlgoliaRuleActionDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlgoliaRuleActionDtoAllOf(val *AlgoliaRuleActionDtoAllOf) *NullableAlgoliaRuleActionDtoAllOf {
	return &NullableAlgoliaRuleActionDtoAllOf{value: val, isSet: true}
}

func (v NullableAlgoliaRuleActionDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlgoliaRuleActionDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


