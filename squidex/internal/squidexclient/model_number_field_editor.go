/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NumberFieldEditor 
type NumberFieldEditor string

// List of NumberFieldEditor
const (
	INPUT NumberFieldEditor = "Input"
	RADIO NumberFieldEditor = "Radio"
	DROPDOWN NumberFieldEditor = "Dropdown"
	STARS NumberFieldEditor = "Stars"
)

// All allowed values of NumberFieldEditor enum
var AllowedNumberFieldEditorEnumValues = []NumberFieldEditor{
	"Input",
	"Radio",
	"Dropdown",
	"Stars",
}

func (v *NumberFieldEditor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NumberFieldEditor(value)
	for _, existing := range AllowedNumberFieldEditorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NumberFieldEditor", value)
}

// NewNumberFieldEditorFromValue returns a pointer to a valid NumberFieldEditor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNumberFieldEditorFromValue(v string) (*NumberFieldEditor, error) {
	ev := NumberFieldEditor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NumberFieldEditor: valid values are %v", v, AllowedNumberFieldEditorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NumberFieldEditor) IsValid() bool {
	for _, existing := range AllowedNumberFieldEditorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NumberFieldEditor value
func (v NumberFieldEditor) Ptr() *NumberFieldEditor {
	return &v
}

type NullableNumberFieldEditor struct {
	value *NumberFieldEditor
	isSet bool
}

func (v NullableNumberFieldEditor) Get() *NumberFieldEditor {
	return v.value
}

func (v *NullableNumberFieldEditor) Set(val *NumberFieldEditor) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberFieldEditor) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberFieldEditor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberFieldEditor(val *NumberFieldEditor) *NullableNumberFieldEditor {
	return &NullableNumberFieldEditor{value: val, isSet: true}
}

func (v NullableNumberFieldEditor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberFieldEditor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

