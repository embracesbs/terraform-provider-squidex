/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// AssignContributorDto struct for AssignContributorDto
type AssignContributorDto struct {
	// The id or email of the user to add to the app.
	ContributorId string `json:"contributorId"`
	// The role of the contributor.
	Role NullableString `json:"role,omitempty"`
	// Set to true to invite the user if he does not exist.
	Invite *bool `json:"invite,omitempty"`
}

// NewAssignContributorDto instantiates a new AssignContributorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignContributorDto(contributorId string) *AssignContributorDto {
	this := AssignContributorDto{}
	this.ContributorId = contributorId
	return &this
}

// NewAssignContributorDtoWithDefaults instantiates a new AssignContributorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignContributorDtoWithDefaults() *AssignContributorDto {
	this := AssignContributorDto{}
	return &this
}

// GetContributorId returns the ContributorId field value
func (o *AssignContributorDto) GetContributorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContributorId
}

// GetContributorIdOk returns a tuple with the ContributorId field value
// and a boolean to check if the value has been set.
func (o *AssignContributorDto) GetContributorIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ContributorId, true
}

// SetContributorId sets field value
func (o *AssignContributorDto) SetContributorId(v string) {
	o.ContributorId = v
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssignContributorDto) GetRole() string {
	if o == nil || isNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssignContributorDto) GetRoleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *AssignContributorDto) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *AssignContributorDto) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *AssignContributorDto) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *AssignContributorDto) UnsetRole() {
	o.Role.Unset()
}

// GetInvite returns the Invite field value if set, zero value otherwise.
func (o *AssignContributorDto) GetInvite() bool {
	if o == nil || isNil(o.Invite) {
		var ret bool
		return ret
	}
	return *o.Invite
}

// GetInviteOk returns a tuple with the Invite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignContributorDto) GetInviteOk() (*bool, bool) {
	if o == nil || isNil(o.Invite) {
    return nil, false
	}
	return o.Invite, true
}

// HasInvite returns a boolean if a field has been set.
func (o *AssignContributorDto) HasInvite() bool {
	if o != nil && !isNil(o.Invite) {
		return true
	}

	return false
}

// SetInvite gets a reference to the given bool and assigns it to the Invite field.
func (o *AssignContributorDto) SetInvite(v bool) {
	o.Invite = &v
}

func (o AssignContributorDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["contributorId"] = o.ContributorId
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if !isNil(o.Invite) {
		toSerialize["invite"] = o.Invite
	}
	return json.Marshal(toSerialize)
}

type NullableAssignContributorDto struct {
	value *AssignContributorDto
	isSet bool
}

func (v NullableAssignContributorDto) Get() *AssignContributorDto {
	return v.value
}

func (v *NullableAssignContributorDto) Set(val *AssignContributorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignContributorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignContributorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignContributorDto(val *AssignContributorDto) *NullableAssignContributorDto {
	return &NullableAssignContributorDto{value: val, isSet: true}
}

func (v NullableAssignContributorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignContributorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


