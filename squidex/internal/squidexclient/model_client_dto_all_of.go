/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// ClientDtoAllOf struct for ClientDtoAllOf
type ClientDtoAllOf struct {
	// The client id.
	Id string `json:"id"`
	// The client secret.
	Secret string `json:"secret"`
	// The client name.
	Name string `json:"name"`
	// The role of the client.
	Role NullableString `json:"role,omitempty"`
	// The number of allowed api calls per month for this client.
	ApiCallsLimit *int64 `json:"apiCallsLimit,omitempty"`
	// The number of allowed api traffic bytes per month for this client.
	ApiTrafficLimit *int64 `json:"apiTrafficLimit,omitempty"`
	// True to allow anonymous access without an access token for this client.
	AllowAnonymous *bool `json:"allowAnonymous,omitempty"`
}

// NewClientDtoAllOf instantiates a new ClientDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientDtoAllOf(id string, secret string, name string) *ClientDtoAllOf {
	this := ClientDtoAllOf{}
	this.Id = id
	this.Secret = secret
	this.Name = name
	return &this
}

// NewClientDtoAllOfWithDefaults instantiates a new ClientDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientDtoAllOfWithDefaults() *ClientDtoAllOf {
	this := ClientDtoAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *ClientDtoAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ClientDtoAllOf) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ClientDtoAllOf) SetId(v string) {
	o.Id = v
}

// GetSecret returns the Secret field value
func (o *ClientDtoAllOf) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *ClientDtoAllOf) GetSecretOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *ClientDtoAllOf) SetSecret(v string) {
	o.Secret = v
}

// GetName returns the Name field value
func (o *ClientDtoAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClientDtoAllOf) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClientDtoAllOf) SetName(v string) {
	o.Name = v
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientDtoAllOf) GetRole() string {
	if o == nil || isNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientDtoAllOf) GetRoleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *ClientDtoAllOf) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *ClientDtoAllOf) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *ClientDtoAllOf) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *ClientDtoAllOf) UnsetRole() {
	o.Role.Unset()
}

// GetApiCallsLimit returns the ApiCallsLimit field value if set, zero value otherwise.
func (o *ClientDtoAllOf) GetApiCallsLimit() int64 {
	if o == nil || isNil(o.ApiCallsLimit) {
		var ret int64
		return ret
	}
	return *o.ApiCallsLimit
}

// GetApiCallsLimitOk returns a tuple with the ApiCallsLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDtoAllOf) GetApiCallsLimitOk() (*int64, bool) {
	if o == nil || isNil(o.ApiCallsLimit) {
    return nil, false
	}
	return o.ApiCallsLimit, true
}

// HasApiCallsLimit returns a boolean if a field has been set.
func (o *ClientDtoAllOf) HasApiCallsLimit() bool {
	if o != nil && !isNil(o.ApiCallsLimit) {
		return true
	}

	return false
}

// SetApiCallsLimit gets a reference to the given int64 and assigns it to the ApiCallsLimit field.
func (o *ClientDtoAllOf) SetApiCallsLimit(v int64) {
	o.ApiCallsLimit = &v
}

// GetApiTrafficLimit returns the ApiTrafficLimit field value if set, zero value otherwise.
func (o *ClientDtoAllOf) GetApiTrafficLimit() int64 {
	if o == nil || isNil(o.ApiTrafficLimit) {
		var ret int64
		return ret
	}
	return *o.ApiTrafficLimit
}

// GetApiTrafficLimitOk returns a tuple with the ApiTrafficLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDtoAllOf) GetApiTrafficLimitOk() (*int64, bool) {
	if o == nil || isNil(o.ApiTrafficLimit) {
    return nil, false
	}
	return o.ApiTrafficLimit, true
}

// HasApiTrafficLimit returns a boolean if a field has been set.
func (o *ClientDtoAllOf) HasApiTrafficLimit() bool {
	if o != nil && !isNil(o.ApiTrafficLimit) {
		return true
	}

	return false
}

// SetApiTrafficLimit gets a reference to the given int64 and assigns it to the ApiTrafficLimit field.
func (o *ClientDtoAllOf) SetApiTrafficLimit(v int64) {
	o.ApiTrafficLimit = &v
}

// GetAllowAnonymous returns the AllowAnonymous field value if set, zero value otherwise.
func (o *ClientDtoAllOf) GetAllowAnonymous() bool {
	if o == nil || isNil(o.AllowAnonymous) {
		var ret bool
		return ret
	}
	return *o.AllowAnonymous
}

// GetAllowAnonymousOk returns a tuple with the AllowAnonymous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDtoAllOf) GetAllowAnonymousOk() (*bool, bool) {
	if o == nil || isNil(o.AllowAnonymous) {
    return nil, false
	}
	return o.AllowAnonymous, true
}

// HasAllowAnonymous returns a boolean if a field has been set.
func (o *ClientDtoAllOf) HasAllowAnonymous() bool {
	if o != nil && !isNil(o.AllowAnonymous) {
		return true
	}

	return false
}

// SetAllowAnonymous gets a reference to the given bool and assigns it to the AllowAnonymous field.
func (o *ClientDtoAllOf) SetAllowAnonymous(v bool) {
	o.AllowAnonymous = &v
}

func (o ClientDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["secret"] = o.Secret
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if !isNil(o.ApiCallsLimit) {
		toSerialize["apiCallsLimit"] = o.ApiCallsLimit
	}
	if !isNil(o.ApiTrafficLimit) {
		toSerialize["apiTrafficLimit"] = o.ApiTrafficLimit
	}
	if !isNil(o.AllowAnonymous) {
		toSerialize["allowAnonymous"] = o.AllowAnonymous
	}
	return json.Marshal(toSerialize)
}

type NullableClientDtoAllOf struct {
	value *ClientDtoAllOf
	isSet bool
}

func (v NullableClientDtoAllOf) Get() *ClientDtoAllOf {
	return v.value
}

func (v *NullableClientDtoAllOf) Set(val *ClientDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableClientDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableClientDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientDtoAllOf(val *ClientDtoAllOf) *NullableClientDtoAllOf {
	return &NullableClientDtoAllOf{value: val, isSet: true}
}

func (v NullableClientDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


