/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"time"
)

// AppDtoAllOf struct for AppDtoAllOf
type AppDtoAllOf struct {
	// The name of the app.
	Name string `json:"name"`
	// The optional label of the app.
	Label NullableString `json:"label,omitempty"`
	// The optional description of the app.
	Description NullableString `json:"description,omitempty"`
	// The version of the app.
	Version *int64 `json:"version,omitempty"`
	// The id of the app.
	Id *string `json:"id,omitempty"`
	// The timestamp when the app has been created.
	Created *time.Time `json:"created,omitempty"`
	// The timestamp when the app has been modified last.
	LastModified *time.Time `json:"lastModified,omitempty"`
	// The permission level of the user.
	Permissions []string `json:"permissions,omitempty"`
	// Indicates if the user can access the api.
	// Deprecated
	CanAccessApi *bool `json:"canAccessApi,omitempty"`
	// Indicates if the user can access at least one content.
	CanAccessContent *bool `json:"canAccessContent,omitempty"`
	// The role name of the user.
	RoleName NullableString `json:"roleName,omitempty"`
	// The properties from the role.
	RoleProperties interface{} `json:"roleProperties"`
}

// NewAppDtoAllOf instantiates a new AppDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDtoAllOf(name string, roleProperties interface{}) *AppDtoAllOf {
	this := AppDtoAllOf{}
	this.Name = name
	this.RoleProperties = roleProperties
	return &this
}

// NewAppDtoAllOfWithDefaults instantiates a new AppDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDtoAllOfWithDefaults() *AppDtoAllOf {
	this := AppDtoAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *AppDtoAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppDtoAllOf) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppDtoAllOf) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppDtoAllOf) GetLabel() string {
	if o == nil || isNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppDtoAllOf) GetLabelOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *AppDtoAllOf) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *AppDtoAllOf) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *AppDtoAllOf) UnsetLabel() {
	o.Label.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppDtoAllOf) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppDtoAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AppDtoAllOf) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AppDtoAllOf) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AppDtoAllOf) UnsetDescription() {
	o.Description.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AppDtoAllOf) GetVersion() int64 {
	if o == nil || isNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDtoAllOf) GetVersionOk() (*int64, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *AppDtoAllOf) SetVersion(v int64) {
	o.Version = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppDtoAllOf) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDtoAllOf) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AppDtoAllOf) SetId(v string) {
	o.Id = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *AppDtoAllOf) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDtoAllOf) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
    return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *AppDtoAllOf) SetCreated(v time.Time) {
	o.Created = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *AppDtoAllOf) GetLastModified() time.Time {
	if o == nil || isNil(o.LastModified) {
		var ret time.Time
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDtoAllOf) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastModified) {
    return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasLastModified() bool {
	if o != nil && !isNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given time.Time and assigns it to the LastModified field.
func (o *AppDtoAllOf) SetLastModified(v time.Time) {
	o.LastModified = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *AppDtoAllOf) GetPermissions() []string {
	if o == nil || isNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDtoAllOf) GetPermissionsOk() ([]string, bool) {
	if o == nil || isNil(o.Permissions) {
    return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasPermissions() bool {
	if o != nil && !isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *AppDtoAllOf) SetPermissions(v []string) {
	o.Permissions = v
}

// GetCanAccessApi returns the CanAccessApi field value if set, zero value otherwise.
// Deprecated
func (o *AppDtoAllOf) GetCanAccessApi() bool {
	if o == nil || isNil(o.CanAccessApi) {
		var ret bool
		return ret
	}
	return *o.CanAccessApi
}

// GetCanAccessApiOk returns a tuple with the CanAccessApi field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AppDtoAllOf) GetCanAccessApiOk() (*bool, bool) {
	if o == nil || isNil(o.CanAccessApi) {
    return nil, false
	}
	return o.CanAccessApi, true
}

// HasCanAccessApi returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasCanAccessApi() bool {
	if o != nil && !isNil(o.CanAccessApi) {
		return true
	}

	return false
}

// SetCanAccessApi gets a reference to the given bool and assigns it to the CanAccessApi field.
// Deprecated
func (o *AppDtoAllOf) SetCanAccessApi(v bool) {
	o.CanAccessApi = &v
}

// GetCanAccessContent returns the CanAccessContent field value if set, zero value otherwise.
func (o *AppDtoAllOf) GetCanAccessContent() bool {
	if o == nil || isNil(o.CanAccessContent) {
		var ret bool
		return ret
	}
	return *o.CanAccessContent
}

// GetCanAccessContentOk returns a tuple with the CanAccessContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDtoAllOf) GetCanAccessContentOk() (*bool, bool) {
	if o == nil || isNil(o.CanAccessContent) {
    return nil, false
	}
	return o.CanAccessContent, true
}

// HasCanAccessContent returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasCanAccessContent() bool {
	if o != nil && !isNil(o.CanAccessContent) {
		return true
	}

	return false
}

// SetCanAccessContent gets a reference to the given bool and assigns it to the CanAccessContent field.
func (o *AppDtoAllOf) SetCanAccessContent(v bool) {
	o.CanAccessContent = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppDtoAllOf) GetRoleName() string {
	if o == nil || isNil(o.RoleName.Get()) {
		var ret string
		return ret
	}
	return *o.RoleName.Get()
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppDtoAllOf) GetRoleNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RoleName.Get(), o.RoleName.IsSet()
}

// HasRoleName returns a boolean if a field has been set.
func (o *AppDtoAllOf) HasRoleName() bool {
	if o != nil && o.RoleName.IsSet() {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given NullableString and assigns it to the RoleName field.
func (o *AppDtoAllOf) SetRoleName(v string) {
	o.RoleName.Set(&v)
}
// SetRoleNameNil sets the value for RoleName to be an explicit nil
func (o *AppDtoAllOf) SetRoleNameNil() {
	o.RoleName.Set(nil)
}

// UnsetRoleName ensures that no value is present for RoleName, not even an explicit nil
func (o *AppDtoAllOf) UnsetRoleName() {
	o.RoleName.Unset()
}

// GetRoleProperties returns the RoleProperties field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *AppDtoAllOf) GetRoleProperties() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RoleProperties
}

// GetRolePropertiesOk returns a tuple with the RoleProperties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppDtoAllOf) GetRolePropertiesOk() (*interface{}, bool) {
	if o == nil || isNil(o.RoleProperties) {
    return nil, false
	}
	return &o.RoleProperties, true
}

// SetRoleProperties sets field value
func (o *AppDtoAllOf) SetRoleProperties(v interface{}) {
	o.RoleProperties = v
}

func (o AppDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	if !isNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !isNil(o.CanAccessApi) {
		toSerialize["canAccessApi"] = o.CanAccessApi
	}
	if !isNil(o.CanAccessContent) {
		toSerialize["canAccessContent"] = o.CanAccessContent
	}
	if o.RoleName.IsSet() {
		toSerialize["roleName"] = o.RoleName.Get()
	}
	if o.RoleProperties != nil {
		toSerialize["roleProperties"] = o.RoleProperties
	}
	return json.Marshal(toSerialize)
}

type NullableAppDtoAllOf struct {
	value *AppDtoAllOf
	isSet bool
}

func (v NullableAppDtoAllOf) Get() *AppDtoAllOf {
	return v.value
}

func (v *NullableAppDtoAllOf) Set(val *AppDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDtoAllOf(val *AppDtoAllOf) *NullableAppDtoAllOf {
	return &NullableAppDtoAllOf{value: val, isSet: true}
}

func (v NullableAppDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


