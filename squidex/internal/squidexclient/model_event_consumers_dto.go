/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventConsumersDto struct for EventConsumersDto
type EventConsumersDto struct {
	// The links.
	Links map[string]ResourceLink `json:"_links"`
	// The event consumers.
	Items []EventConsumerDto `json:"items,omitempty"`
}

// NewEventConsumersDto instantiates a new EventConsumersDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventConsumersDto(links map[string]ResourceLink) *EventConsumersDto {
	this := EventConsumersDto{}
	this.Links = links
	return &this
}

// NewEventConsumersDtoWithDefaults instantiates a new EventConsumersDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventConsumersDtoWithDefaults() *EventConsumersDto {
	this := EventConsumersDto{}
	return &this
}

// GetLinks returns the Links field value
func (o *EventConsumersDto) GetLinks() map[string]ResourceLink {
	if o == nil {
		var ret map[string]ResourceLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *EventConsumersDto) GetLinksOk() (*map[string]ResourceLink, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *EventConsumersDto) SetLinks(v map[string]ResourceLink) {
	o.Links = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *EventConsumersDto) GetItems() []EventConsumerDto {
	if o == nil || isNil(o.Items) {
		var ret []EventConsumerDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventConsumersDto) GetItemsOk() ([]EventConsumerDto, bool) {
	if o == nil || isNil(o.Items) {
    return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *EventConsumersDto) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []EventConsumerDto and assigns it to the Items field.
func (o *EventConsumersDto) SetItems(v []EventConsumerDto) {
	o.Items = v
}

func (o EventConsumersDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_links"] = o.Links
	}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableEventConsumersDto struct {
	value *EventConsumersDto
	isSet bool
}

func (v NullableEventConsumersDto) Get() *EventConsumersDto {
	return v.value
}

func (v *NullableEventConsumersDto) Set(val *EventConsumersDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEventConsumersDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEventConsumersDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventConsumersDto(val *EventConsumersDto) *NullableEventConsumersDto {
	return &NullableEventConsumersDto{value: val, isSet: true}
}

func (v NullableEventConsumersDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventConsumersDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


