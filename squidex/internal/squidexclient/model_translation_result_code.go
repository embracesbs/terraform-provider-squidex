/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// TranslationResultCode 
type TranslationResultCode string

// List of TranslationResultCode
const (
	TranslationResultCodeTRANSLATED TranslationResultCode = "Translated"
	TranslationResultCodeLANGUAGE_NOT_SUPPORTED TranslationResultCode = "LanguageNotSupported"
	TranslationResultCodeNOT_TRANSLATED TranslationResultCode = "NotTranslated"
	TranslationResultCodeNOT_CONFIGURED TranslationResultCode = "NotConfigured"
	TranslationResultCodeUNAUTHORIZED TranslationResultCode = "Unauthorized"
	TranslationResultCodeFAILED TranslationResultCode = "Failed"
)

// All allowed values of TranslationResultCode enum
var AllowedTranslationResultCodeEnumValues = []TranslationResultCode{
	"Translated",
	"LanguageNotSupported",
	"NotTranslated",
	"NotConfigured",
	"Unauthorized",
	"Failed",
}

func (v *TranslationResultCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TranslationResultCode(value)
	for _, existing := range AllowedTranslationResultCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TranslationResultCode", value)
}

// NewTranslationResultCodeFromValue returns a pointer to a valid TranslationResultCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTranslationResultCodeFromValue(v string) (*TranslationResultCode, error) {
	ev := TranslationResultCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TranslationResultCode: valid values are %v", v, AllowedTranslationResultCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TranslationResultCode) IsValid() bool {
	for _, existing := range AllowedTranslationResultCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TranslationResultCode value
func (v TranslationResultCode) Ptr() *TranslationResultCode {
	return &v
}

type NullableTranslationResultCode struct {
	value *TranslationResultCode
	isSet bool
}

func (v NullableTranslationResultCode) Get() *TranslationResultCode {
	return v.value
}

func (v *NullableTranslationResultCode) Set(val *TranslationResultCode) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslationResultCode) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslationResultCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslationResultCode(val *TranslationResultCode) *NullableTranslationResultCode {
	return &NullableTranslationResultCode{value: val, isSet: true}
}

func (v NullableTranslationResultCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslationResultCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

