/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SimulatedRuleEventDto struct for SimulatedRuleEventDto
type SimulatedRuleEventDto struct {
	// The unique event id.
	EventId string `json:"eventId"`
	// The name of the event.
	EventName string `json:"eventName"`
	// The source event.
	Event interface{} `json:"event"`
	// The enriched event.
	EnrichedEvent interface{} `json:"enrichedEvent,omitempty"`
	// The data for the action.
	ActionName NullableString `json:"actionName,omitempty"`
	// The name of the action.
	ActionData NullableString `json:"actionData,omitempty"`
	// The name of the event.
	Error NullableString `json:"error,omitempty"`
	// The reason why the event has been skipped.
	SkipReasons []SkipReason `json:"skipReasons"`
}

// NewSimulatedRuleEventDto instantiates a new SimulatedRuleEventDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimulatedRuleEventDto(eventId string, eventName string, event interface{}, skipReasons []SkipReason) *SimulatedRuleEventDto {
	this := SimulatedRuleEventDto{}
	this.EventId = eventId
	this.EventName = eventName
	this.Event = event
	this.SkipReasons = skipReasons
	return &this
}

// NewSimulatedRuleEventDtoWithDefaults instantiates a new SimulatedRuleEventDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimulatedRuleEventDtoWithDefaults() *SimulatedRuleEventDto {
	this := SimulatedRuleEventDto{}
	return &this
}

// GetEventId returns the EventId field value
func (o *SimulatedRuleEventDto) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *SimulatedRuleEventDto) GetEventIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *SimulatedRuleEventDto) SetEventId(v string) {
	o.EventId = v
}

// GetEventName returns the EventName field value
func (o *SimulatedRuleEventDto) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *SimulatedRuleEventDto) GetEventNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *SimulatedRuleEventDto) SetEventName(v string) {
	o.EventName = v
}

// GetEvent returns the Event field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SimulatedRuleEventDto) GetEvent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimulatedRuleEventDto) GetEventOk() (*interface{}, bool) {
	if o == nil || isNil(o.Event) {
    return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *SimulatedRuleEventDto) SetEvent(v interface{}) {
	o.Event = v
}

// GetEnrichedEvent returns the EnrichedEvent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimulatedRuleEventDto) GetEnrichedEvent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EnrichedEvent
}

// GetEnrichedEventOk returns a tuple with the EnrichedEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimulatedRuleEventDto) GetEnrichedEventOk() (*interface{}, bool) {
	if o == nil || isNil(o.EnrichedEvent) {
    return nil, false
	}
	return &o.EnrichedEvent, true
}

// HasEnrichedEvent returns a boolean if a field has been set.
func (o *SimulatedRuleEventDto) HasEnrichedEvent() bool {
	if o != nil && isNil(o.EnrichedEvent) {
		return true
	}

	return false
}

// SetEnrichedEvent gets a reference to the given interface{} and assigns it to the EnrichedEvent field.
func (o *SimulatedRuleEventDto) SetEnrichedEvent(v interface{}) {
	o.EnrichedEvent = v
}

// GetActionName returns the ActionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimulatedRuleEventDto) GetActionName() string {
	if o == nil || isNil(o.ActionName.Get()) {
		var ret string
		return ret
	}
	return *o.ActionName.Get()
}

// GetActionNameOk returns a tuple with the ActionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimulatedRuleEventDto) GetActionNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ActionName.Get(), o.ActionName.IsSet()
}

// HasActionName returns a boolean if a field has been set.
func (o *SimulatedRuleEventDto) HasActionName() bool {
	if o != nil && o.ActionName.IsSet() {
		return true
	}

	return false
}

// SetActionName gets a reference to the given NullableString and assigns it to the ActionName field.
func (o *SimulatedRuleEventDto) SetActionName(v string) {
	o.ActionName.Set(&v)
}
// SetActionNameNil sets the value for ActionName to be an explicit nil
func (o *SimulatedRuleEventDto) SetActionNameNil() {
	o.ActionName.Set(nil)
}

// UnsetActionName ensures that no value is present for ActionName, not even an explicit nil
func (o *SimulatedRuleEventDto) UnsetActionName() {
	o.ActionName.Unset()
}

// GetActionData returns the ActionData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimulatedRuleEventDto) GetActionData() string {
	if o == nil || isNil(o.ActionData.Get()) {
		var ret string
		return ret
	}
	return *o.ActionData.Get()
}

// GetActionDataOk returns a tuple with the ActionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimulatedRuleEventDto) GetActionDataOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ActionData.Get(), o.ActionData.IsSet()
}

// HasActionData returns a boolean if a field has been set.
func (o *SimulatedRuleEventDto) HasActionData() bool {
	if o != nil && o.ActionData.IsSet() {
		return true
	}

	return false
}

// SetActionData gets a reference to the given NullableString and assigns it to the ActionData field.
func (o *SimulatedRuleEventDto) SetActionData(v string) {
	o.ActionData.Set(&v)
}
// SetActionDataNil sets the value for ActionData to be an explicit nil
func (o *SimulatedRuleEventDto) SetActionDataNil() {
	o.ActionData.Set(nil)
}

// UnsetActionData ensures that no value is present for ActionData, not even an explicit nil
func (o *SimulatedRuleEventDto) UnsetActionData() {
	o.ActionData.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimulatedRuleEventDto) GetError() string {
	if o == nil || isNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimulatedRuleEventDto) GetErrorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *SimulatedRuleEventDto) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *SimulatedRuleEventDto) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *SimulatedRuleEventDto) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *SimulatedRuleEventDto) UnsetError() {
	o.Error.Unset()
}

// GetSkipReasons returns the SkipReasons field value
func (o *SimulatedRuleEventDto) GetSkipReasons() []SkipReason {
	if o == nil {
		var ret []SkipReason
		return ret
	}

	return o.SkipReasons
}

// GetSkipReasonsOk returns a tuple with the SkipReasons field value
// and a boolean to check if the value has been set.
func (o *SimulatedRuleEventDto) GetSkipReasonsOk() ([]SkipReason, bool) {
	if o == nil {
    return nil, false
	}
	return o.SkipReasons, true
}

// SetSkipReasons sets field value
func (o *SimulatedRuleEventDto) SetSkipReasons(v []SkipReason) {
	o.SkipReasons = v
}

func (o SimulatedRuleEventDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventId"] = o.EventId
	}
	if true {
		toSerialize["eventName"] = o.EventName
	}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.EnrichedEvent != nil {
		toSerialize["enrichedEvent"] = o.EnrichedEvent
	}
	if o.ActionName.IsSet() {
		toSerialize["actionName"] = o.ActionName.Get()
	}
	if o.ActionData.IsSet() {
		toSerialize["actionData"] = o.ActionData.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if true {
		toSerialize["skipReasons"] = o.SkipReasons
	}
	return json.Marshal(toSerialize)
}

type NullableSimulatedRuleEventDto struct {
	value *SimulatedRuleEventDto
	isSet bool
}

func (v NullableSimulatedRuleEventDto) Get() *SimulatedRuleEventDto {
	return v.value
}

func (v *NullableSimulatedRuleEventDto) Set(val *SimulatedRuleEventDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSimulatedRuleEventDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSimulatedRuleEventDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimulatedRuleEventDto(val *SimulatedRuleEventDto) *NullableSimulatedRuleEventDto {
	return &NullableSimulatedRuleEventDto{value: val, isSet: true}
}

func (v NullableSimulatedRuleEventDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimulatedRuleEventDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


