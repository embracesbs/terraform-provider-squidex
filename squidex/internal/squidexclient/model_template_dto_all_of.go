/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
)

// TemplateDtoAllOf struct for TemplateDtoAllOf
type TemplateDtoAllOf struct {
	// The name of the template.
	Name string `json:"name"`
	// The title of the template.
	Title string `json:"title"`
	// The description of the template.
	Description string `json:"description"`
	// True, if the template is a starter.
	IsStarter *bool `json:"isStarter,omitempty"`
}

// NewTemplateDtoAllOf instantiates a new TemplateDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateDtoAllOf(name string, title string, description string) *TemplateDtoAllOf {
	this := TemplateDtoAllOf{}
	this.Name = name
	this.Title = title
	this.Description = description
	return &this
}

// NewTemplateDtoAllOfWithDefaults instantiates a new TemplateDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateDtoAllOfWithDefaults() *TemplateDtoAllOf {
	this := TemplateDtoAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *TemplateDtoAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TemplateDtoAllOf) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TemplateDtoAllOf) SetName(v string) {
	o.Name = v
}

// GetTitle returns the Title field value
func (o *TemplateDtoAllOf) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TemplateDtoAllOf) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TemplateDtoAllOf) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *TemplateDtoAllOf) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TemplateDtoAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TemplateDtoAllOf) SetDescription(v string) {
	o.Description = v
}

// GetIsStarter returns the IsStarter field value if set, zero value otherwise.
func (o *TemplateDtoAllOf) GetIsStarter() bool {
	if o == nil || isNil(o.IsStarter) {
		var ret bool
		return ret
	}
	return *o.IsStarter
}

// GetIsStarterOk returns a tuple with the IsStarter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoAllOf) GetIsStarterOk() (*bool, bool) {
	if o == nil || isNil(o.IsStarter) {
    return nil, false
	}
	return o.IsStarter, true
}

// HasIsStarter returns a boolean if a field has been set.
func (o *TemplateDtoAllOf) HasIsStarter() bool {
	if o != nil && !isNil(o.IsStarter) {
		return true
	}

	return false
}

// SetIsStarter gets a reference to the given bool and assigns it to the IsStarter field.
func (o *TemplateDtoAllOf) SetIsStarter(v bool) {
	o.IsStarter = &v
}

func (o TemplateDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.IsStarter) {
		toSerialize["isStarter"] = o.IsStarter
	}
	return json.Marshal(toSerialize)
}

type NullableTemplateDtoAllOf struct {
	value *TemplateDtoAllOf
	isSet bool
}

func (v NullableTemplateDtoAllOf) Get() *TemplateDtoAllOf {
	return v.value
}

func (v *NullableTemplateDtoAllOf) Set(val *TemplateDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateDtoAllOf(val *TemplateDtoAllOf) *NullableTemplateDtoAllOf {
	return &NullableTemplateDtoAllOf{value: val, isSet: true}
}

func (v NullableTemplateDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


