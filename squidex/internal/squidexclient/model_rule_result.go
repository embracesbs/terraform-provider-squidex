/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RuleResult 
type RuleResult string

// List of RuleResult
const (
	PENDING RuleResult = "Pending"
	SUCCESS RuleResult = "Success"
	FAILED RuleResult = "Failed"
	TIMEOUT RuleResult = "Timeout"
)

// All allowed values of RuleResult enum
var AllowedRuleResultEnumValues = []RuleResult{
	"Pending",
	"Success",
	"Failed",
	"Timeout",
}

func (v *RuleResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleResult(value)
	for _, existing := range AllowedRuleResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleResult", value)
}

// NewRuleResultFromValue returns a pointer to a valid RuleResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleResultFromValue(v string) (*RuleResult, error) {
	ev := RuleResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleResult: valid values are %v", v, AllowedRuleResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleResult) IsValid() bool {
	for _, existing := range AllowedRuleResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleResult value
func (v RuleResult) Ptr() *RuleResult {
	return &v
}

type NullableRuleResult struct {
	value *RuleResult
	isSet bool
}

func (v NullableRuleResult) Get() *RuleResult {
	return v.value
}

func (v *NullableRuleResult) Set(val *RuleResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleResult(val *RuleResult) *NullableRuleResult {
	return &NullableRuleResult{value: val, isSet: true}
}

func (v NullableRuleResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

