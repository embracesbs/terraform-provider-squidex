/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssetType 
type AssetType string

// List of AssetType
const (
	UNKNOWN AssetType = "Unknown"
	IMAGE AssetType = "Image"
	AUDIO AssetType = "Audio"
	VIDEO AssetType = "Video"
)

// All allowed values of AssetType enum
var AllowedAssetTypeEnumValues = []AssetType{
	"Unknown",
	"Image",
	"Audio",
	"Video",
}

func (v *AssetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetType(value)
	for _, existing := range AllowedAssetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetType", value)
}

// NewAssetTypeFromValue returns a pointer to a valid AssetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetTypeFromValue(v string) (*AssetType, error) {
	ev := AssetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetType: valid values are %v", v, AllowedAssetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetType) IsValid() bool {
	for _, existing := range AllowedAssetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetType value
func (v AssetType) Ptr() *AssetType {
	return &v
}

type NullableAssetType struct {
	value *AssetType
	isSet bool
}

func (v NullableAssetType) Get() *AssetType {
	return v.value
}

func (v *NullableAssetType) Set(val *AssetType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetType(val *AssetType) *NullableAssetType {
	return &NullableAssetType{value: val, isSet: true}
}

func (v NullableAssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

