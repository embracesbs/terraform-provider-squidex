/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package squidexclient

import (
	"encoding/json"
	"fmt"
)

// StringFieldEditor 
type StringFieldEditor string

// List of StringFieldEditor
const (
	StringFieldEditorINPUT StringFieldEditor = "Input"
	StringFieldEditorCOLOR StringFieldEditor = "Color"
	StringFieldEditorMARKDOWN StringFieldEditor = "Markdown"
	StringFieldEditorDROPDOWN StringFieldEditor = "Dropdown"
	StringFieldEditorHTML StringFieldEditor = "Html"
	StringFieldEditorRADIO StringFieldEditor = "Radio"
	StringFieldEditorRICH_TEXT StringFieldEditor = "RichText"
	StringFieldEditorSLUG StringFieldEditor = "Slug"
	StringFieldEditorSTOCK_PHOTO StringFieldEditor = "StockPhoto"
	StringFieldEditorTEXT_AREA StringFieldEditor = "TextArea"
)

// All allowed values of StringFieldEditor enum
var AllowedStringFieldEditorEnumValues = []StringFieldEditor{
	"Input",
	"Color",
	"Markdown",
	"Dropdown",
	"Html",
	"Radio",
	"RichText",
	"Slug",
	"StockPhoto",
	"TextArea",
}

func (v *StringFieldEditor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StringFieldEditor(value)
	for _, existing := range AllowedStringFieldEditorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StringFieldEditor", value)
}

// NewStringFieldEditorFromValue returns a pointer to a valid StringFieldEditor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStringFieldEditorFromValue(v string) (*StringFieldEditor, error) {
	ev := StringFieldEditor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StringFieldEditor: valid values are %v", v, AllowedStringFieldEditorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StringFieldEditor) IsValid() bool {
	for _, existing := range AllowedStringFieldEditorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StringFieldEditor value
func (v StringFieldEditor) Ptr() *StringFieldEditor {
	return &v
}

type NullableStringFieldEditor struct {
	value *StringFieldEditor
	isSet bool
}

func (v NullableStringFieldEditor) Get() *StringFieldEditor {
	return v.value
}

func (v *NullableStringFieldEditor) Set(val *StringFieldEditor) {
	v.value = val
	v.isSet = true
}

func (v NullableStringFieldEditor) IsSet() bool {
	return v.isSet
}

func (v *NullableStringFieldEditor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringFieldEditor(val *StringFieldEditor) *NullableStringFieldEditor {
	return &NullableStringFieldEditor{value: val, isSet: true}
}

func (v NullableStringFieldEditor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringFieldEditor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

