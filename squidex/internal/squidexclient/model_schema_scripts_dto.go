/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SchemaScriptsDto struct for SchemaScriptsDto
type SchemaScriptsDto struct {
	// The script that is executed for each content when querying contents.
	Query NullableString `json:"query,omitempty"`
	// The script that is executed for all contents when querying contents.
	QueryPre NullableString `json:"queryPre,omitempty"`
	// The script that is executed when creating a content.
	Create NullableString `json:"create,omitempty"`
	// The script that is executed when updating a content.
	Update NullableString `json:"update,omitempty"`
	// The script that is executed when deleting a content.
	Delete NullableString `json:"delete,omitempty"`
	// The script that is executed when change a content status.
	Change NullableString `json:"change,omitempty"`
}

// NewSchemaScriptsDto instantiates a new SchemaScriptsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaScriptsDto() *SchemaScriptsDto {
	this := SchemaScriptsDto{}
	return &this
}

// NewSchemaScriptsDtoWithDefaults instantiates a new SchemaScriptsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaScriptsDtoWithDefaults() *SchemaScriptsDto {
	this := SchemaScriptsDto{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaScriptsDto) GetQuery() string {
	if o == nil || isNil(o.Query.Get()) {
		var ret string
		return ret
	}
	return *o.Query.Get()
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaScriptsDto) GetQueryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Query.Get(), o.Query.IsSet()
}

// HasQuery returns a boolean if a field has been set.
func (o *SchemaScriptsDto) HasQuery() bool {
	if o != nil && o.Query.IsSet() {
		return true
	}

	return false
}

// SetQuery gets a reference to the given NullableString and assigns it to the Query field.
func (o *SchemaScriptsDto) SetQuery(v string) {
	o.Query.Set(&v)
}
// SetQueryNil sets the value for Query to be an explicit nil
func (o *SchemaScriptsDto) SetQueryNil() {
	o.Query.Set(nil)
}

// UnsetQuery ensures that no value is present for Query, not even an explicit nil
func (o *SchemaScriptsDto) UnsetQuery() {
	o.Query.Unset()
}

// GetQueryPre returns the QueryPre field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaScriptsDto) GetQueryPre() string {
	if o == nil || isNil(o.QueryPre.Get()) {
		var ret string
		return ret
	}
	return *o.QueryPre.Get()
}

// GetQueryPreOk returns a tuple with the QueryPre field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaScriptsDto) GetQueryPreOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.QueryPre.Get(), o.QueryPre.IsSet()
}

// HasQueryPre returns a boolean if a field has been set.
func (o *SchemaScriptsDto) HasQueryPre() bool {
	if o != nil && o.QueryPre.IsSet() {
		return true
	}

	return false
}

// SetQueryPre gets a reference to the given NullableString and assigns it to the QueryPre field.
func (o *SchemaScriptsDto) SetQueryPre(v string) {
	o.QueryPre.Set(&v)
}
// SetQueryPreNil sets the value for QueryPre to be an explicit nil
func (o *SchemaScriptsDto) SetQueryPreNil() {
	o.QueryPre.Set(nil)
}

// UnsetQueryPre ensures that no value is present for QueryPre, not even an explicit nil
func (o *SchemaScriptsDto) UnsetQueryPre() {
	o.QueryPre.Unset()
}

// GetCreate returns the Create field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaScriptsDto) GetCreate() string {
	if o == nil || isNil(o.Create.Get()) {
		var ret string
		return ret
	}
	return *o.Create.Get()
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaScriptsDto) GetCreateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Create.Get(), o.Create.IsSet()
}

// HasCreate returns a boolean if a field has been set.
func (o *SchemaScriptsDto) HasCreate() bool {
	if o != nil && o.Create.IsSet() {
		return true
	}

	return false
}

// SetCreate gets a reference to the given NullableString and assigns it to the Create field.
func (o *SchemaScriptsDto) SetCreate(v string) {
	o.Create.Set(&v)
}
// SetCreateNil sets the value for Create to be an explicit nil
func (o *SchemaScriptsDto) SetCreateNil() {
	o.Create.Set(nil)
}

// UnsetCreate ensures that no value is present for Create, not even an explicit nil
func (o *SchemaScriptsDto) UnsetCreate() {
	o.Create.Unset()
}

// GetUpdate returns the Update field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaScriptsDto) GetUpdate() string {
	if o == nil || isNil(o.Update.Get()) {
		var ret string
		return ret
	}
	return *o.Update.Get()
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaScriptsDto) GetUpdateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Update.Get(), o.Update.IsSet()
}

// HasUpdate returns a boolean if a field has been set.
func (o *SchemaScriptsDto) HasUpdate() bool {
	if o != nil && o.Update.IsSet() {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given NullableString and assigns it to the Update field.
func (o *SchemaScriptsDto) SetUpdate(v string) {
	o.Update.Set(&v)
}
// SetUpdateNil sets the value for Update to be an explicit nil
func (o *SchemaScriptsDto) SetUpdateNil() {
	o.Update.Set(nil)
}

// UnsetUpdate ensures that no value is present for Update, not even an explicit nil
func (o *SchemaScriptsDto) UnsetUpdate() {
	o.Update.Unset()
}

// GetDelete returns the Delete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaScriptsDto) GetDelete() string {
	if o == nil || isNil(o.Delete.Get()) {
		var ret string
		return ret
	}
	return *o.Delete.Get()
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaScriptsDto) GetDeleteOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Delete.Get(), o.Delete.IsSet()
}

// HasDelete returns a boolean if a field has been set.
func (o *SchemaScriptsDto) HasDelete() bool {
	if o != nil && o.Delete.IsSet() {
		return true
	}

	return false
}

// SetDelete gets a reference to the given NullableString and assigns it to the Delete field.
func (o *SchemaScriptsDto) SetDelete(v string) {
	o.Delete.Set(&v)
}
// SetDeleteNil sets the value for Delete to be an explicit nil
func (o *SchemaScriptsDto) SetDeleteNil() {
	o.Delete.Set(nil)
}

// UnsetDelete ensures that no value is present for Delete, not even an explicit nil
func (o *SchemaScriptsDto) UnsetDelete() {
	o.Delete.Unset()
}

// GetChange returns the Change field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaScriptsDto) GetChange() string {
	if o == nil || isNil(o.Change.Get()) {
		var ret string
		return ret
	}
	return *o.Change.Get()
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaScriptsDto) GetChangeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Change.Get(), o.Change.IsSet()
}

// HasChange returns a boolean if a field has been set.
func (o *SchemaScriptsDto) HasChange() bool {
	if o != nil && o.Change.IsSet() {
		return true
	}

	return false
}

// SetChange gets a reference to the given NullableString and assigns it to the Change field.
func (o *SchemaScriptsDto) SetChange(v string) {
	o.Change.Set(&v)
}
// SetChangeNil sets the value for Change to be an explicit nil
func (o *SchemaScriptsDto) SetChangeNil() {
	o.Change.Set(nil)
}

// UnsetChange ensures that no value is present for Change, not even an explicit nil
func (o *SchemaScriptsDto) UnsetChange() {
	o.Change.Unset()
}

func (o SchemaScriptsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Query.IsSet() {
		toSerialize["query"] = o.Query.Get()
	}
	if o.QueryPre.IsSet() {
		toSerialize["queryPre"] = o.QueryPre.Get()
	}
	if o.Create.IsSet() {
		toSerialize["create"] = o.Create.Get()
	}
	if o.Update.IsSet() {
		toSerialize["update"] = o.Update.Get()
	}
	if o.Delete.IsSet() {
		toSerialize["delete"] = o.Delete.Get()
	}
	if o.Change.IsSet() {
		toSerialize["change"] = o.Change.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaScriptsDto struct {
	value *SchemaScriptsDto
	isSet bool
}

func (v NullableSchemaScriptsDto) Get() *SchemaScriptsDto {
	return v.value
}

func (v *NullableSchemaScriptsDto) Set(val *SchemaScriptsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaScriptsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaScriptsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaScriptsDto(val *SchemaScriptsDto) *NullableSchemaScriptsDto {
	return &NullableSchemaScriptsDto{value: val, isSet: true}
}

func (v NullableSchemaScriptsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaScriptsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


