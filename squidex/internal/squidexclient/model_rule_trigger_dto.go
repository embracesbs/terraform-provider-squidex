/*
Squidex API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 7.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RuleTriggerDto struct for RuleTriggerDto
type RuleTriggerDto struct {
	TriggerType string `json:"triggerType"`
}

// NewRuleTriggerDto instantiates a new RuleTriggerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleTriggerDto(triggerType string) *RuleTriggerDto {
	this := RuleTriggerDto{}
	this.TriggerType = triggerType
	return &this
}

// NewRuleTriggerDtoWithDefaults instantiates a new RuleTriggerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleTriggerDtoWithDefaults() *RuleTriggerDto {
	this := RuleTriggerDto{}
	return &this
}

// GetTriggerType returns the TriggerType field value
func (o *RuleTriggerDto) GetTriggerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerType
}

// GetTriggerTypeOk returns a tuple with the TriggerType field value
// and a boolean to check if the value has been set.
func (o *RuleTriggerDto) GetTriggerTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TriggerType, true
}

// SetTriggerType sets field value
func (o *RuleTriggerDto) SetTriggerType(v string) {
	o.TriggerType = v
}

func (o RuleTriggerDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["triggerType"] = o.TriggerType
	}
	return json.Marshal(toSerialize)
}

type NullableRuleTriggerDto struct {
	value *RuleTriggerDto
	isSet bool
}

func (v NullableRuleTriggerDto) Get() *RuleTriggerDto {
	return v.value
}

func (v *NullableRuleTriggerDto) Set(val *RuleTriggerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleTriggerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleTriggerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleTriggerDto(val *RuleTriggerDto) *NullableRuleTriggerDto {
	return &NullableRuleTriggerDto{value: val, isSet: true}
}

func (v NullableRuleTriggerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleTriggerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


